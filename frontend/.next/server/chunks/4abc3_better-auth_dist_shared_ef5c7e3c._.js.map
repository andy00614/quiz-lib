{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs"],"sourcesContent":["const getDate = (span, unit = \"ms\") => {\n  return new Date(Date.now() + (unit === \"sec\" ? span * 1e3 : span));\n};\n\nexport { getDate as g };\n"],"names":[],"mappings":";;;AAAA,MAAM,UAAU,CAAC,MAAM,OAAO,IAAI;IAChC,OAAO,IAAI,KAAK,KAAK,GAAG,KAAK,CAAC,SAAS,QAAQ,OAAO,MAAM,IAAI;AAClE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs"],"sourcesContent":["import { createRandomStringGenerator } from '@better-auth/utils/random';\n\nconst generateRandomString = createRandomStringGenerator(\n  \"a-z\",\n  \"0-9\",\n  \"A-Z\",\n  \"-_\"\n);\n\nexport { generateRandomString as g };\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,uBAAuB,CAAA,GAAA,oOAAA,CAAA,8BAA2B,AAAD,EACrD,OACA,OACA,OACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs"],"sourcesContent":["const _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && process.env.NODE_ENV || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = nodeENV === \"test\" || toBoolean(env.TEST);\n\nexport { isProduction as a, isDevelopment as b, env as e, isTest as i };\n"],"names":[],"mappings":";;;;;;AAAA,MAAM,WAAW,aAAa,GAAG,OAAO,MAAM,CAAC;AAC/C,MAAM,UAAU,CAAC,UAAY,WAAW,OAAO,EAAE,OAAO,kBAAkB;IAC1E,WAAW,IAAI,EAAE,IAAI,cAAc,kBAAkB;IACrD,WAAW,OAAO,IAAI,CAAC,UAAU,WAAW,UAAU;AACtD,MAAM,MAAM,IAAI,MAAM,UAAU;IAC9B,KAAI,CAAC,EAAE,IAAI;QACT,MAAM,OAAO;QACb,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;IACrC;IACA,KAAI,CAAC,EAAE,IAAI;QACT,MAAM,OAAO;QACb,OAAO,QAAQ,QAAQ,QAAQ;IACjC;IACA,KAAI,CAAC,EAAE,IAAI,EAAE,KAAK;QAChB,MAAM,OAAO,QAAQ;QACrB,IAAI,CAAC,KAAK,GAAG;QACb,OAAO;IACT;IACA,gBAAe,CAAC,EAAE,IAAI;QACpB,IAAI,CAAC,MAAM;YACT,OAAO;QACT;QACA,MAAM,OAAO,QAAQ;QACrB,OAAO,IAAI,CAAC,KAAK;QACjB,OAAO;IACT;IACA;QACE,MAAM,OAAO,QAAQ;QACrB,OAAO,OAAO,IAAI,CAAC;IACrB;AACF;AACA,SAAS,UAAU,GAAG;IACpB,OAAO,MAAM,QAAQ,UAAU;AACjC;AACA,MAAM,UAAU,OAAO,YAAY,eAAe,QAAQ,GAAG,uDAA4B;AACzF,MAAM,eAAe,YAAY;AACjC,MAAM,gBAAgB,YAAY,SAAS,YAAY;AACvD,MAAM,SAAS,YAAY,UAAU,UAAU,IAAI,IAAI","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs"],"sourcesContent":["class BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\nexport { BetterAuthError as B, MissingDependencyError as M };\n"],"names":[],"mappings":";;;;AAAA,MAAM,wBAAwB;IAC5B,YAAY,OAAO,EAAE,KAAK,CAAE;QAC1B,KAAK,CAAC;QACN,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,KAAK,GAAG;IACf;AACF;AACA,MAAM,+BAA+B;IACnC,YAAY,OAAO,CAAE;QACnB,KAAK,CACH,CAAC,aAAa,EAAE,QAAQ,yCAAyC,CAAC,EAClE;IAEJ;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs"],"sourcesContent":["import { e as env } from './better-auth.8zoxzg-F.mjs';\nimport { B as BetterAuthError } from './better-auth.DdzSJf-n.mjs';\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname !== \"/\";\n  } catch (error) {\n    throw new BetterAuthError(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${url.replace(/\\/+$/, \"\")}${path}`;\n}\nfunction getBaseURL(url, path, request) {\n  if (url) {\n    return withPath(url, path);\n  }\n  const fromEnv = env.BETTER_AUTH_URL || env.NEXT_PUBLIC_BETTER_AUTH_URL || env.PUBLIC_BETTER_AUTH_URL || env.NUXT_PUBLIC_BETTER_AUTH_URL || env.NUXT_PUBLIC_AUTH_URL || (env.BASE_URL !== \"/\" ? env.BASE_URL : void 0);\n  if (fromEnv) {\n    return withPath(fromEnv, path);\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new BetterAuthError(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\nexport { getBaseURL as a, getHost as b, getProtocol as c, getOrigin as g };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,SAAS,aAAa,GAAG;IACvB,IAAI;QACF,MAAM,YAAY,IAAI,IAAI;QAC1B,OAAO,UAAU,QAAQ,KAAK;IAChC,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,4TAAA,CAAA,IAAe,CACvB,CAAC,kBAAkB,EAAE,IAAI,kCAAkC,CAAC;IAEhE;AACF;AACA,SAAS,SAAS,GAAG,EAAE,OAAO,WAAW;IACvC,MAAM,UAAU,aAAa;IAC7B,IAAI,SAAS;QACX,OAAO;IACT;IACA,OAAO,KAAK,UAAU,CAAC,OAAO,OAAO,CAAC,CAAC,EAAE,MAAM;IAC/C,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,MAAM,MAAM;AAC5C;AACA,SAAS,WAAW,GAAG,EAAE,IAAI,EAAE,OAAO;IACpC,IAAI,KAAK;QACP,OAAO,SAAS,KAAK;IACvB;IACA,MAAM,UAAU,4TAAA,CAAA,IAAG,CAAC,eAAe,IAAI,4TAAA,CAAA,IAAG,CAAC,2BAA2B,IAAI,4TAAA,CAAA,IAAG,CAAC,sBAAsB,IAAI,4TAAA,CAAA,IAAG,CAAC,2BAA2B,IAAI,4TAAA,CAAA,IAAG,CAAC,oBAAoB,IAAI,CAAC,4TAAA,CAAA,IAAG,CAAC,QAAQ,KAAK,MAAM,4TAAA,CAAA,IAAG,CAAC,QAAQ,GAAG,KAAK,CAAC;IACpN,IAAI,SAAS;QACX,OAAO,SAAS,SAAS;IAC3B;IACA,MAAM,cAAc,SAAS,QAAQ,IAAI;IACzC,MAAM,mBAAmB,SAAS,QAAQ,IAAI;IAC9C,IAAI,eAAe,kBAAkB;QACnC,OAAO,SAAS,GAAG,iBAAiB,GAAG,EAAE,aAAa,EAAE;IAC1D;IACA,IAAI,SAAS;QACX,MAAM,OAAO,UAAU,QAAQ,GAAG;QAClC,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,4TAAA,CAAA,IAAe,CACvB;QAEJ;QACA,OAAO,SAAS,MAAM;IACxB;IACA;;IAGA,OAAO,KAAK;AACd;AACA,SAAS,UAAU,GAAG;IACpB,IAAI;QACF,MAAM,YAAY,IAAI,IAAI;QAC1B,OAAO,UAAU,MAAM;IACzB,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AACA,SAAS,YAAY,GAAG;IACtB,IAAI;QACF,MAAM,YAAY,IAAI,IAAI;QAC1B,OAAO,UAAU,QAAQ;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AACA,SAAS,QAAQ,GAAG;IAClB,IAAI;QACF,MAAM,YAAY,IAAI,IAAI;QAC1B,OAAO,UAAU,IAAI;IACvB,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs"],"sourcesContent":["function safeJSONParse(data) {\n  function reviver(_, value) {\n    if (typeof value === \"string\") {\n      const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n      if (iso8601Regex.test(value)) {\n        const date = new Date(value);\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n    }\n    return value;\n  }\n  try {\n    return JSON.parse(data, reviver);\n  } catch {\n    return null;\n  }\n}\n\nexport { safeJSONParse as s };\n"],"names":[],"mappings":";;;AAAA,SAAS,cAAc,IAAI;IACzB,SAAS,QAAQ,CAAC,EAAE,KAAK;QACvB,IAAI,OAAO,UAAU,UAAU;YAC7B,MAAM,eAAe;YACrB,IAAI,aAAa,IAAI,CAAC,QAAQ;gBAC5B,MAAM,OAAO,IAAI,KAAK;gBACtB,IAAI,CAAC,MAAM,KAAK,OAAO,KAAK;oBAC1B,OAAO;gBACT;YACF;QACF;QACA,OAAO;IACT;IACA,IAAI;QACF,OAAO,KAAK,KAAK,CAAC,MAAM;IAC1B,EAAE,OAAM;QACN,OAAO;IACT;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DBGfIDnh.mjs"],"sourcesContent":["import { createRandomStringGenerator } from '@better-auth/utils/random';\n\nconst generateId = (size) => {\n  return createRandomStringGenerator(\"a-z\", \"A-Z\", \"0-9\")(size || 32);\n};\n\nconst levels = [\"info\", \"success\", \"warn\", \"error\", \"debug\"];\nfunction shouldPublishLog(currentLogLevel, logLevel) {\n  return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);\n}\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    red: \"\\x1B[31m\",\n    green: \"\\x1B[32m\",\n    yellow: \"\\x1B[33m\",\n    blue: \"\\x1B[34m\",\n    magenta: \"\\x1B[35m\"}};\nconst levelColors = {\n  info: colors.fg.blue,\n  success: colors.fg.green,\n  warn: colors.fg.yellow,\n  error: colors.fg.red,\n  debug: colors.fg.magenta\n};\nconst formatMessage = (level, message) => {\n  const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n  return `${colors.dim}${timestamp}${colors.reset} ${levelColors[level]}${level.toUpperCase()}${colors.reset} ${colors.bright}[Better Auth]:${colors.reset} ${message}`;\n};\nconst createLogger = (options) => {\n  const enabled = options?.disabled !== true;\n  const logLevel = options?.level ?? \"error\";\n  const LogFunc = (level, message, args = []) => {\n    if (!enabled || !shouldPublishLog(logLevel, level)) {\n      return;\n    }\n    const formattedMessage = formatMessage(level, message);\n    if (!options || typeof options.log !== \"function\") {\n      if (level === \"error\") {\n        console.error(formattedMessage, ...args);\n      } else if (level === \"warn\") {\n        console.warn(formattedMessage, ...args);\n      } else {\n        console.log(formattedMessage, ...args);\n      }\n      return;\n    }\n    options.log(level === \"success\" ? \"info\" : level, message, ...args);\n  };\n  return Object.fromEntries(\n    levels.map((level) => [\n      level,\n      (...[message, ...args]) => LogFunc(level, message, args)\n    ])\n  );\n};\nconst logger = createLogger();\n\nexport { logger as a, createLogger as c, generateId as g, levels as l, shouldPublishLog as s };\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEA,MAAM,aAAa,CAAC;IAClB,OAAO,CAAA,GAAA,oOAAA,CAAA,8BAA2B,AAAD,EAAE,OAAO,OAAO,OAAO,QAAQ;AAClE;AAEA,MAAM,SAAS;IAAC;IAAQ;IAAW;IAAQ;IAAS;CAAQ;AAC5D,SAAS,iBAAiB,eAAe,EAAE,QAAQ;IACjD,OAAO,OAAO,OAAO,CAAC,aAAa,OAAO,OAAO,CAAC;AACpD;AACA,MAAM,SAAS;IACb,OAAO;IACP,QAAQ;IACR,KAAK;IACL,IAAI;QACF,KAAK;QACL,OAAO;QACP,QAAQ;QACR,MAAM;QACN,SAAS;IAAU;AAAC;AACxB,MAAM,cAAc;IAClB,MAAM,OAAO,EAAE,CAAC,IAAI;IACpB,SAAS,OAAO,EAAE,CAAC,KAAK;IACxB,MAAM,OAAO,EAAE,CAAC,MAAM;IACtB,OAAO,OAAO,EAAE,CAAC,GAAG;IACpB,OAAO,OAAO,EAAE,CAAC,OAAO;AAC1B;AACA,MAAM,gBAAgB,CAAC,OAAO;IAC5B,MAAM,YAAY,AAAC,aAAa,GAAG,IAAI,OAAQ,WAAW;IAC1D,OAAO,GAAG,OAAO,GAAG,GAAG,YAAY,OAAO,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,MAAM,WAAW,KAAK,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO,MAAM,CAAC,cAAc,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,SAAS;AACvK;AACA,MAAM,eAAe,CAAC;IACpB,MAAM,UAAU,SAAS,aAAa;IACtC,MAAM,WAAW,SAAS,SAAS;IACnC,MAAM,UAAU,CAAC,OAAO,SAAS,OAAO,EAAE;QACxC,IAAI,CAAC,WAAW,CAAC,iBAAiB,UAAU,QAAQ;YAClD;QACF;QACA,MAAM,mBAAmB,cAAc,OAAO;QAC9C,IAAI,CAAC,WAAW,OAAO,QAAQ,GAAG,KAAK,YAAY;YACjD,IAAI,UAAU,SAAS;gBACrB,QAAQ,KAAK,CAAC,qBAAqB;YACrC,OAAO,IAAI,UAAU,QAAQ;gBAC3B,QAAQ,IAAI,CAAC,qBAAqB;YACpC,OAAO;gBACL,QAAQ,GAAG,CAAC,qBAAqB;YACnC;YACA;QACF;QACA,QAAQ,GAAG,CAAC,UAAU,YAAY,SAAS,OAAO,YAAY;IAChE;IACA,OAAO,OAAO,WAAW,CACvB,OAAO,GAAG,CAAC,CAAC,QAAU;YACpB;YACA,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,GAAK,QAAQ,OAAO,SAAS;SACpD;AAEL;AACA,MAAM,SAAS","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.n2KFGwjY.mjs"],"sourcesContent":["import * as z from 'zod/v4';\nimport { APIError } from 'better-call';\n\nconst accountSchema = z.object({\n  id: z.string(),\n  providerId: z.string(),\n  accountId: z.string(),\n  userId: z.coerce.string(),\n  accessToken: z.string().nullish(),\n  refreshToken: z.string().nullish(),\n  idToken: z.string().nullish(),\n  /**\n   * Access token expires at\n   */\n  accessTokenExpiresAt: z.date().nullish(),\n  /**\n   * Refresh token expires at\n   */\n  refreshTokenExpiresAt: z.date().nullish(),\n  /**\n   * The scopes that the user has authorized\n   */\n  scope: z.string().nullish(),\n  /**\n   * Password is only stored in the credential provider\n   */\n  password: z.string().nullish(),\n  createdAt: z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: z.date().default(() => /* @__PURE__ */ new Date())\n});\nconst userSchema = z.object({\n  id: z.string(),\n  email: z.string().transform((val) => val.toLowerCase()),\n  emailVerified: z.boolean().default(false),\n  name: z.string(),\n  image: z.string().nullish(),\n  createdAt: z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: z.date().default(() => /* @__PURE__ */ new Date())\n});\nconst sessionSchema = z.object({\n  id: z.string(),\n  userId: z.coerce.string(),\n  expiresAt: z.date(),\n  createdAt: z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: z.date().default(() => /* @__PURE__ */ new Date()),\n  token: z.string(),\n  ipAddress: z.string().nullish(),\n  userAgent: z.string().nullish()\n});\nconst verificationSchema = z.object({\n  id: z.string(),\n  value: z.string(),\n  createdAt: z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: z.date().default(() => /* @__PURE__ */ new Date()),\n  expiresAt: z.date(),\n  identifier: z.string()\n});\nfunction parseOutputData(data, schema) {\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in data) {\n    const field = fields[key];\n    if (!field) {\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (field.returned === false) {\n      continue;\n    }\n    parsedData[key] = data[key];\n  }\n  return parsedData;\n}\nfunction getAllFields(options, table) {\n  let schema = {\n    ...table === \"user\" ? options.user?.additionalFields : {},\n    ...table === \"session\" ? options.session?.additionalFields : {}\n  };\n  for (const plugin of options.plugins || []) {\n    if (plugin.schema && plugin.schema[table]) {\n      schema = {\n        ...schema,\n        ...plugin.schema[table].fields\n      };\n    }\n  }\n  return schema;\n}\nfunction parseUserOutput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseOutputData(user, { fields: schema });\n}\nfunction parseAccountOutput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseOutputData(account, { fields: schema });\n}\nfunction parseSessionOutput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseOutputData(session, { fields: schema });\n}\nfunction parseInputData(data, schema) {\n  const action = schema.action || \"create\";\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in fields) {\n    if (key in data) {\n      if (fields[key].input === false) {\n        if (fields[key].defaultValue) {\n          parsedData[key] = fields[key].defaultValue;\n          continue;\n        }\n        continue;\n      }\n      if (fields[key].validator?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].validator.input.parse(data[key]);\n        continue;\n      }\n      if (fields[key].transform?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].transform?.input(data[key]);\n        continue;\n      }\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (fields[key].defaultValue && action === \"create\") {\n      parsedData[key] = fields[key].defaultValue;\n      continue;\n    }\n    if (fields[key].required && action === \"create\") {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `${key} is required`\n      });\n    }\n  }\n  return parsedData;\n}\nfunction parseUserInput(options, user, action) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema, action });\n}\nfunction parseAdditionalUserInput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema });\n}\nfunction parseAccountInput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseInputData(account, { fields: schema });\n}\nfunction parseSessionInput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseInputData(session, { fields: schema });\n}\nfunction mergeSchema(schema, newSchema) {\n  if (!newSchema) {\n    return schema;\n  }\n  for (const table in newSchema) {\n    const newModelName = newSchema[table]?.modelName;\n    if (newModelName) {\n      schema[table].modelName = newModelName;\n    }\n    for (const field in schema[table].fields) {\n      const newField = newSchema[table]?.fields?.[field];\n      if (!newField) {\n        continue;\n      }\n      schema[table].fields[field].fieldName = newField;\n    }\n  }\n  return schema;\n}\n\nexport { accountSchema as a, parseUserOutput as b, parseAccountOutput as c, parseSessionOutput as d, parseInputData as e, parseUserInput as f, getAllFields as g, parseAdditionalUserInput as h, parseAccountInput as i, parseSessionInput as j, mergeSchema as m, parseOutputData as p, sessionSchema as s, userSchema as u, verificationSchema as v };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.z3dsxLxE.mjs"],"sourcesContent":["import * as z from 'zod/v4';\nimport { createMiddleware, createEndpoint, APIError } from 'better-call';\nimport { g as getDate } from './better-auth.CW6D9eSx.mjs';\nimport { createHash } from '@better-auth/utils/hash';\nimport { base64, base64Url } from '@better-auth/utils/base64';\nimport { signJWT, symmetricEncrypt, symmetricDecrypt } from '../crypto/index.mjs';\nimport { betterFetch } from '@better-fetch/fetch';\nimport { jwtVerify, decodeJwt, decodeProtectedHeader, importJWK, createRemoteJWKSet } from 'jose';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport { g as generateRandomString } from './better-auth.B4Qoxdgc.mjs';\nimport { g as getOrigin, b as getHost, c as getProtocol } from './better-auth.VTXNLFMT.mjs';\nimport { deleteSessionCookie, setSessionCookie, setCookieCache } from '../cookies/index.mjs';\nimport { s as safeJSONParse } from './better-auth.tB5eU6EY.mjs';\nimport { createHMAC } from '@better-auth/utils/hmac';\nimport { binary } from '@better-auth/utils/binary';\nimport { JWTExpired } from 'jose/errors';\nimport '@better-auth/utils/random';\nimport { a as logger, g as generateId } from './better-auth.DBGfIDnh.mjs';\nimport { f as parseUserInput } from './better-auth.n2KFGwjY.mjs';\nimport { b as isDevelopment } from './better-auth.8zoxzg-F.mjs';\nimport 'defu';\nimport { B as BetterAuthError } from './better-auth.DdzSJf-n.mjs';\n\nconst optionsMiddleware = createMiddleware(async () => {\n  return {};\n});\nconst createAuthMiddleware = createMiddleware.create({\n  use: [\n    optionsMiddleware,\n    /**\n     * Only use for post hooks\n     */\n    createMiddleware(async () => {\n      return {};\n    })\n  ]\n});\nconst createAuthEndpoint = createEndpoint.create({\n  use: [optionsMiddleware]\n});\n\nfunction escapeRegExpChar(char) {\n  if (char === \"-\" || char === \"^\" || char === \"$\" || char === \"+\" || char === \".\" || char === \"(\" || char === \")\" || char === \"|\" || char === \"[\" || char === \"]\" || char === \"{\" || char === \"}\" || char === \"*\" || char === \"?\" || char === \"\\\\\") {\n    return `\\\\${char}`;\n  } else {\n    return char;\n  }\n}\nfunction escapeRegExpString(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += escapeRegExpChar(str[i]);\n  }\n  return result;\n}\nfunction transform(pattern, separator = true) {\n  if (Array.isArray(pattern)) {\n    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);\n    return `(?:${regExpPatterns.join(\"|\")})`;\n  }\n  let separatorSplitter = \"\";\n  let separatorMatcher = \"\";\n  let wildcard = \".\";\n  if (separator === true) {\n    separatorSplitter = \"/\";\n    separatorMatcher = \"[/\\\\\\\\]\";\n    wildcard = \"[^/\\\\\\\\]\";\n  } else if (separator) {\n    separatorSplitter = separator;\n    separatorMatcher = escapeRegExpString(separatorSplitter);\n    if (separatorMatcher.length > 1) {\n      separatorMatcher = `(?:${separatorMatcher})`;\n      wildcard = `((?!${separatorMatcher}).)`;\n    } else {\n      wildcard = `[^${separatorMatcher}]`;\n    }\n  }\n  let requiredSeparator = separator ? `${separatorMatcher}+?` : \"\";\n  let optionalSeparator = separator ? `${separatorMatcher}*?` : \"\";\n  let segments = separator ? pattern.split(separatorSplitter) : [pattern];\n  let result = \"\";\n  for (let s = 0; s < segments.length; s++) {\n    let segment = segments[s];\n    let nextSegment = segments[s + 1];\n    let currentSeparator = \"\";\n    if (!segment && s > 0) {\n      continue;\n    }\n    if (separator) {\n      if (s === segments.length - 1) {\n        currentSeparator = optionalSeparator;\n      } else if (nextSegment !== \"**\") {\n        currentSeparator = requiredSeparator;\n      } else {\n        currentSeparator = \"\";\n      }\n    }\n    if (separator && segment === \"**\") {\n      if (currentSeparator) {\n        result += s === 0 ? \"\" : currentSeparator;\n        result += `(?:${wildcard}*?${currentSeparator})*?`;\n      }\n      continue;\n    }\n    for (let c = 0; c < segment.length; c++) {\n      let char = segment[c];\n      if (char === \"\\\\\") {\n        if (c < segment.length - 1) {\n          result += escapeRegExpChar(segment[c + 1]);\n          c++;\n        }\n      } else if (char === \"?\") {\n        result += wildcard;\n      } else if (char === \"*\") {\n        result += `${wildcard}*?`;\n      } else {\n        result += escapeRegExpChar(char);\n      }\n    }\n    result += currentSeparator;\n  }\n  return result;\n}\nfunction isMatch(regexp, sample) {\n  if (typeof sample !== \"string\") {\n    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);\n  }\n  return regexp.test(sample);\n}\nfunction wildcardMatch(pattern, options) {\n  if (typeof pattern !== \"string\" && !Array.isArray(pattern)) {\n    throw new TypeError(\n      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`\n    );\n  }\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    options = { separator: options };\n  }\n  if (arguments.length === 2 && !(typeof options === \"undefined\" || typeof options === \"object\" && options !== null && !Array.isArray(options))) {\n    throw new TypeError(\n      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`\n    );\n  }\n  options = options || {};\n  if (options.separator === \"\\\\\") {\n    throw new Error(\n      \"\\\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead\"\n    );\n  }\n  let regexpPattern = transform(pattern, options.separator);\n  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);\n  let fn = isMatch.bind(null, regexp);\n  fn.options = options;\n  fn.pattern = pattern;\n  fn.regexp = regexp;\n  return fn;\n}\n\nconst originCheckMiddleware = createAuthMiddleware(async (ctx) => {\n  if (ctx.request?.method !== \"POST\" || !ctx.request) {\n    return;\n  }\n  const { body, query, context } = ctx;\n  const originHeader = ctx.headers?.get(\"origin\") || ctx.headers?.get(\"referer\") || \"\";\n  const callbackURL = body?.callbackURL || query?.callbackURL;\n  const redirectURL = body?.redirectTo;\n  const errorCallbackURL = body?.errorCallbackURL;\n  const newUserCallbackURL = body?.newUserCallbackURL;\n  const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const usesCookies = ctx.headers?.has(\"cookie\");\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)(getOrigin(url) || url);\n      }\n      return wildcardMatch(pattern)(getHost(url));\n    }\n    const protocol = getProtocol(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === getOrigin(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(url)\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {\n    validateURL(originHeader, \"origin\");\n  }\n  callbackURL && validateURL(callbackURL, \"callbackURL\");\n  redirectURL && validateURL(redirectURL, \"redirectURL\");\n  errorCallbackURL && validateURL(errorCallbackURL, \"errorCallbackURL\");\n  newUserCallbackURL && validateURL(newUserCallbackURL, \"newUserCallbackURL\");\n});\nconst originCheck = (getValue) => createAuthMiddleware(async (ctx) => {\n  if (!ctx.request) {\n    return;\n  }\n  const { context } = ctx;\n  const callbackURL = getValue(ctx);\n  const trustedOrigins = Array.isArray(\n    context.options.trustedOrigins\n  ) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      if (pattern.includes(\"://\")) {\n        return wildcardMatch(pattern)(getOrigin(url) || url);\n      }\n      return wildcardMatch(pattern)(getHost(url));\n    }\n    const protocol = getProtocol(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === getOrigin(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(\n        url\n      )\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];\n  for (const url of callbacks) {\n    validateURL(url, \"callbackURL\");\n  }\n});\n\nconst BASE_ERROR_CODES = {\n  USER_NOT_FOUND: \"User not found\",\n  FAILED_TO_CREATE_USER: \"Failed to create user\",\n  FAILED_TO_CREATE_SESSION: \"Failed to create session\",\n  FAILED_TO_UPDATE_USER: \"Failed to update user\",\n  FAILED_TO_GET_SESSION: \"Failed to get session\",\n  INVALID_PASSWORD: \"Invalid password\",\n  INVALID_EMAIL: \"Invalid email\",\n  INVALID_EMAIL_OR_PASSWORD: \"Invalid email or password\",\n  SOCIAL_ACCOUNT_ALREADY_LINKED: \"Social account already linked\",\n  PROVIDER_NOT_FOUND: \"Provider not found\",\n  INVALID_TOKEN: \"invalid token\",\n  ID_TOKEN_NOT_SUPPORTED: \"id_token not supported\",\n  FAILED_TO_GET_USER_INFO: \"Failed to get user info\",\n  USER_EMAIL_NOT_FOUND: \"User email not found\",\n  EMAIL_NOT_VERIFIED: \"Email not verified\",\n  PASSWORD_TOO_SHORT: \"Password too short\",\n  PASSWORD_TOO_LONG: \"Password too long\",\n  USER_ALREADY_EXISTS: \"User already exists\",\n  EMAIL_CAN_NOT_BE_UPDATED: \"Email can not be updated\",\n  CREDENTIAL_ACCOUNT_NOT_FOUND: \"Credential account not found\",\n  SESSION_EXPIRED: \"Session expired. Re-authenticate to perform this action.\",\n  FAILED_TO_UNLINK_LAST_ACCOUNT: \"You can't unlink your last account\",\n  ACCOUNT_NOT_FOUND: \"Account not found\",\n  USER_ALREADY_HAS_PASSWORD: \"User already has a password. Provide that to delete the account.\"\n};\n\nconst getSession = () => createAuthEndpoint(\n  \"/get-session\",\n  {\n    method: \"GET\",\n    query: z.optional(\n      z.object({\n        /**\n         * If cookie cache is enabled, it will disable the cache\n         * and fetch the session from the database\n         */\n        disableCookieCache: z.coerce.boolean().meta({\n          description: \"Disable cookie cache and fetch session from database\"\n        }).optional(),\n        disableRefresh: z.coerce.boolean().meta({\n          description: \"Disable session refresh. Useful for checking session status, without updating the session\"\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the current session\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    session: {\n                      $ref: \"#/components/schemas/Session\"\n                    },\n                    user: {\n                      $ref: \"#/components/schemas/User\"\n                    }\n                  },\n                  required: [\"session\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessionCookieToken = await ctx.getSignedCookie(\n        ctx.context.authCookies.sessionToken.name,\n        ctx.context.secret\n      );\n      if (!sessionCookieToken) {\n        return null;\n      }\n      const sessionDataCookie = ctx.getCookie(\n        ctx.context.authCookies.sessionData.name\n      );\n      const sessionDataPayload = sessionDataCookie ? safeJSONParse(binary.decode(base64.decode(sessionDataCookie))) : null;\n      if (sessionDataPayload) {\n        const isValid = await createHMAC(\"SHA-256\", \"base64urlnopad\").verify(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionDataPayload.session,\n            expiresAt: sessionDataPayload.expiresAt\n          }),\n          sessionDataPayload.signature\n        );\n        if (!isValid) {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n          return ctx.json(null);\n        }\n      }\n      const dontRememberMe = await ctx.getSignedCookie(\n        ctx.context.authCookies.dontRememberToken.name,\n        ctx.context.secret\n      );\n      if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {\n        const session2 = sessionDataPayload.session;\n        const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();\n        if (!hasExpired) {\n          ctx.context.session = session2;\n          return ctx.json(\n            session2\n          );\n        } else {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n        }\n      }\n      const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);\n      ctx.context.session = session;\n      if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {\n        deleteSessionCookie(ctx);\n        if (session) {\n          await ctx.context.internalAdapter.deleteSession(\n            session.session.token\n          );\n        }\n        return ctx.json(null);\n      }\n      if (dontRememberMe || ctx.query?.disableRefresh) {\n        return ctx.json(\n          session\n        );\n      }\n      const expiresIn = ctx.context.sessionConfig.expiresIn;\n      const updateAge = ctx.context.sessionConfig.updateAge;\n      const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;\n      const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();\n      if (shouldBeUpdated && (!ctx.query?.disableRefresh || !ctx.context.options.session?.disableSessionRefresh)) {\n        const updatedSession = await ctx.context.internalAdapter.updateSession(\n          session.session.token,\n          {\n            expiresAt: getDate(ctx.context.sessionConfig.expiresIn, \"sec\"),\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        );\n        if (!updatedSession) {\n          deleteSessionCookie(ctx);\n          return ctx.json(null, { status: 401 });\n        }\n        const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;\n        await setSessionCookie(\n          ctx,\n          {\n            session: updatedSession,\n            user: session.user\n          },\n          false,\n          {\n            maxAge\n          }\n        );\n        return ctx.json({\n          session: updatedSession,\n          user: session.user\n        });\n      }\n      await setCookieCache(ctx, session);\n      return ctx.json(\n        session\n      );\n    } catch (error) {\n      ctx.context.logger.error(\"INTERNAL_SERVER_ERROR\", error);\n      throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n  }\n);\nconst getSessionFromCtx = async (ctx, config) => {\n  if (ctx.context.session) {\n    return ctx.context.session;\n  }\n  const session = await getSession()({\n    ...ctx,\n    asResponse: false,\n    headers: ctx.headers,\n    returnHeaders: false,\n    query: {\n      ...config,\n      ...ctx.query\n    }\n  }).catch((e) => {\n    return null;\n  });\n  ctx.context.session = session;\n  return session;\n};\nconst sessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new APIError(\"UNAUTHORIZED\");\n  }\n  return {\n    session\n  };\n});\nconst requestOnlySessionMiddleware = createAuthMiddleware(\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session?.session && (ctx.request || ctx.headers)) {\n      throw new APIError(\"UNAUTHORIZED\");\n    }\n    return { session };\n  }\n);\nconst freshSessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new APIError(\"UNAUTHORIZED\");\n  }\n  if (ctx.context.sessionConfig.freshAge === 0) {\n    return {\n      session\n    };\n  }\n  const freshAge = ctx.context.sessionConfig.freshAge;\n  const lastUpdated = session.session.updatedAt?.valueOf() || session.session.createdAt.valueOf();\n  const now = Date.now();\n  const isFresh = now - lastUpdated < freshAge * 1e3;\n  if (!isFresh) {\n    throw new APIError(\"FORBIDDEN\", {\n      message: \"Session is not fresh\"\n    });\n  }\n  return {\n    session\n  };\n});\nconst listSessions = () => createAuthEndpoint(\n  \"/list-sessions\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all active sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Session\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessions = await ctx.context.internalAdapter.listSessions(\n        ctx.context.session.user.id\n      );\n      const activeSessions = sessions.filter((session) => {\n        return session.expiresAt > /* @__PURE__ */ new Date();\n      });\n      return ctx.json(\n        activeSessions\n      );\n    } catch (e) {\n      ctx.context.logger.error(e);\n      throw ctx.error(\"INTERNAL_SERVER_ERROR\");\n    }\n  }\n);\nconst revokeSession = createAuthEndpoint(\n  \"/revoke-session\",\n  {\n    method: \"POST\",\n    body: z.object({\n      token: z.string().meta({\n        description: \"The token to revoke\"\n      })\n    }),\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke a single session\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  token: {\n                    type: \"string\",\n                    description: \"The token to revoke\"\n                  }\n                },\n                required: [\"token\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the session was revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token;\n    const findSession = await ctx.context.internalAdapter.findSession(token);\n    if (!findSession) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Session not found\"\n      });\n    }\n    if (findSession.session.userId !== ctx.context.session.user.id) {\n      throw new APIError(\"UNAUTHORIZED\");\n    }\n    try {\n      await ctx.context.internalAdapter.deleteSession(token);\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeSessions = createAuthEndpoint(\n  \"/revoke-sessions\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke all sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      await ctx.context.internalAdapter.deleteSessions(\n        ctx.context.session.user.id\n      );\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeOtherSessions = createAuthEndpoint(\n  \"/revoke-other-sessions\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Revoke all other sessions for the user except the current one\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all other sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!session.user) {\n      throw new APIError(\"UNAUTHORIZED\");\n    }\n    const sessions = await ctx.context.internalAdapter.listSessions(\n      session.user.id\n    );\n    const activeSessions = sessions.filter((session2) => {\n      return session2.expiresAt > /* @__PURE__ */ new Date();\n    });\n    const otherSessions = activeSessions.filter(\n      (session2) => session2.token !== ctx.context.session.session.token\n    );\n    await Promise.all(\n      otherSessions.map(\n        (session2) => ctx.context.internalAdapter.deleteSession(session2.token)\n      )\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nasync function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {\n  const token = await signJWT(\n    {\n      email: email.toLowerCase(),\n      updateTo\n    },\n    secret,\n    expiresIn\n  );\n  return token;\n}\nasync function sendVerificationEmailFn(ctx, user) {\n  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n    ctx.context.logger.error(\"Verification email isn't enabled.\");\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"Verification email isn't enabled\"\n    });\n  }\n  const token = await createEmailVerificationToken(\n    ctx.context.secret,\n    user.email,\n    void 0,\n    ctx.context.options.emailVerification?.expiresIn\n  );\n  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n  await ctx.context.options.emailVerification.sendVerificationEmail(\n    {\n      user,\n      url,\n      token\n    },\n    ctx.request\n  );\n}\nconst sendVerificationEmail = createAuthEndpoint(\n  \"/send-verification-email\",\n  {\n    method: \"POST\",\n    body: z.object({\n      email: z.email().meta({\n        description: \"The email to send the verification email to\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to use for email verification callback\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a verification email to the user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    description: \"The email to send the verification email to\",\n                    example: \"user@example.com\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\",\n                    example: \"https://example.com/callback\",\n                    nullable: true\n                  }\n                },\n                required: [\"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was sent successfully\",\n                      example: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad Request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Error message\",\n                      example: \"Verification email isn't enabled\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const { email } = ctx.body;\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      const user = await ctx.context.internalAdapter.findUserByEmail(email);\n      if (!user) {\n        return ctx.json({\n          status: true\n        });\n      }\n      await sendVerificationEmailFn(ctx, user.user);\n      return ctx.json({\n        status: true\n      });\n    }\n    if (session?.user.emailVerified) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to an unverified email\"\n      });\n    }\n    if (session?.user.email !== email) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"You can only send a verification email to your own email\"\n      });\n    }\n    await sendVerificationEmailFn(ctx, session.user);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst verifyEmail = createAuthEndpoint(\n  \"/verify-email\",\n  {\n    method: \"GET\",\n    query: z.object({\n      token: z.string().meta({\n        description: \"The token to verify the email\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Verify the email of the user\",\n        parameters: [\n          {\n            name: \"token\",\n            in: \"query\",\n            description: \"The token to verify the email\",\n            required: true,\n            schema: {\n              type: \"string\"\n            }\n          },\n          {\n            name: \"callbackURL\",\n            in: \"query\",\n            description: \"The URL to redirect to after email verification\",\n            required: false,\n            schema: {\n              type: \"string\"\n            }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"User ID\"\n                        },\n                        email: {\n                          type: \"string\",\n                          description: \"User email\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"User name\"\n                        },\n                        image: {\n                          type: \"string\",\n                          description: \"User image URL\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Indicates if the user email is verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          description: \"User creation date\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          description: \"User update date\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"image\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    },\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was verified successfully\"\n                    }\n                  },\n                  required: [\"user\", \"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    function redirectOnError(error) {\n      if (ctx.query.callbackURL) {\n        if (ctx.query.callbackURL.includes(\"?\")) {\n          throw ctx.redirect(`${ctx.query.callbackURL}&error=${error}`);\n        }\n        throw ctx.redirect(`${ctx.query.callbackURL}?error=${error}`);\n      }\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: error\n      });\n    }\n    const { token } = ctx.query;\n    let jwt;\n    try {\n      jwt = await jwtVerify(\n        token,\n        new TextEncoder().encode(ctx.context.secret),\n        {\n          algorithms: [\"HS256\"]\n        }\n      );\n    } catch (e) {\n      if (e instanceof JWTExpired) {\n        return redirectOnError(\"token_expired\");\n      }\n      return redirectOnError(\"invalid_token\");\n    }\n    const schema = z.object({\n      email: z.string().email(),\n      updateTo: z.string().optional()\n    });\n    const parsed = schema.parse(jwt.payload);\n    const user = await ctx.context.internalAdapter.findUserByEmail(\n      parsed.email\n    );\n    if (!user) {\n      return redirectOnError(\"user_not_found\");\n    }\n    if (parsed.updateTo) {\n      const session = await getSessionFromCtx(ctx);\n      if (!session) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      if (session.user.email !== parsed.email) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      const updatedUser2 = await ctx.context.internalAdapter.updateUserByEmail(\n        parsed.email,\n        {\n          email: parsed.updateTo,\n          emailVerified: false\n        },\n        ctx\n      );\n      const newToken = await createEmailVerificationToken(\n        ctx.context.secret,\n        parsed.updateTo\n      );\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: updatedUser2,\n          url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || \"/\"}`,\n          token: newToken\n        },\n        ctx.request\n      );\n      await setSessionCookie(ctx, {\n        session: session.session,\n        user: {\n          ...session.user,\n          email: parsed.updateTo,\n          emailVerified: false\n        }\n      });\n      if (ctx.query.callbackURL) {\n        throw ctx.redirect(ctx.query.callbackURL);\n      }\n      return ctx.json({\n        status: true,\n        user: {\n          id: updatedUser2.id,\n          email: updatedUser2.email,\n          name: updatedUser2.name,\n          image: updatedUser2.image,\n          emailVerified: updatedUser2.emailVerified,\n          createdAt: updatedUser2.createdAt,\n          updatedAt: updatedUser2.updatedAt\n        }\n      });\n    }\n    if (ctx.context.options.emailVerification?.onEmailVerification) {\n      await ctx.context.options.emailVerification.onEmailVerification(\n        user.user,\n        ctx.request\n      );\n    }\n    const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(\n      parsed.email,\n      {\n        emailVerified: true\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.afterEmailVerification) {\n      await ctx.context.options.emailVerification.afterEmailVerification(\n        updatedUser,\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {\n      const currentSession = await getSessionFromCtx(ctx);\n      if (!currentSession || currentSession.user.email !== parsed.email) {\n        const session = await ctx.context.internalAdapter.createSession(\n          user.user.id,\n          ctx\n        );\n        if (!session) {\n          throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n            message: \"Failed to create session\"\n          });\n        }\n        await setSessionCookie(ctx, {\n          session,\n          user: {\n            ...user.user,\n            emailVerified: true\n          }\n        });\n      } else {\n        await setSessionCookie(ctx, {\n          session: currentSession.session,\n          user: {\n            ...currentSession.user,\n            emailVerified: true\n          }\n        });\n      }\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL);\n    }\n    return ctx.json({\n      status: true,\n      user: null\n    });\n  }\n);\n\nconst HIDE_METADATA = {\n  isAction: false\n};\n\nasync function generateState(c, link) {\n  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;\n  if (!callbackURL) {\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"callbackURL is required\"\n    });\n  }\n  const codeVerifier = generateRandomString(128);\n  const state = generateRandomString(32);\n  const data = JSON.stringify({\n    callbackURL,\n    codeVerifier,\n    errorURL: c.body?.errorCallbackURL,\n    newUserURL: c.body?.newUserCallbackURL,\n    link,\n    /**\n     * This is the actual expiry time of the state\n     */\n    expiresAt: Date.now() + 10 * 60 * 1e3,\n    requestSignUp: c.body?.requestSignUp\n  });\n  const expiresAt = /* @__PURE__ */ new Date();\n  expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n  const verification = await c.context.internalAdapter.createVerificationValue(\n    {\n      value: data,\n      identifier: state,\n      expiresAt\n    },\n    c\n  );\n  if (!verification) {\n    c.context.logger.error(\n      \"Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database\"\n    );\n    throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"Unable to create verification\"\n    });\n  }\n  return {\n    state: verification.identifier,\n    codeVerifier\n  };\n}\nasync function parseState(c) {\n  const state = c.query.state || c.body.state;\n  const data = await c.context.internalAdapter.findVerificationValue(state);\n  if (!data) {\n    c.context.logger.error(\"State Mismatch. Verification not found\", {\n      state\n    });\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  const parsedData = z.object({\n    callbackURL: z.string(),\n    codeVerifier: z.string(),\n    errorURL: z.string().optional(),\n    newUserURL: z.string().optional(),\n    expiresAt: z.number(),\n    link: z.object({\n      email: z.string(),\n      userId: z.coerce.string()\n    }).optional(),\n    requestSignUp: z.boolean().optional()\n  }).parse(JSON.parse(data.value));\n  if (!parsedData.errorURL) {\n    parsedData.errorURL = `${c.context.baseURL}/error`;\n  }\n  if (parsedData.expiresAt < Date.now()) {\n    await c.context.internalAdapter.deleteVerificationValue(data.id);\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=please_restart_the_process`);\n  }\n  await c.context.internalAdapter.deleteVerificationValue(data.id);\n  return parsedData;\n}\n\nasync function generateCodeChallenge(codeVerifier) {\n  const codeChallengeBytes = await createHash(\"SHA-256\").digest(codeVerifier);\n  return base64Url.encode(new Uint8Array(codeChallengeBytes), {\n    padding: false\n  });\n}\nfunction getOAuth2Tokens(data) {\n  return {\n    tokenType: data.token_type,\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    accessTokenExpiresAt: data.expires_in ? getDate(data.expires_in, \"sec\") : void 0,\n    refreshTokenExpiresAt: data.refresh_token_expires_in ? getDate(data.refresh_token_expires_in, \"sec\") : void 0,\n    scopes: data?.scope ? typeof data.scope === \"string\" ? data.scope.split(\" \") : data.scope : [],\n    idToken: data.id_token\n  };\n}\nconst encodeOAuthParameter = (value) => encodeURIComponent(value).replace(/%20/g, \"+\");\nfunction decryptOAuthToken(token, ctx) {\n  if (!token) return token;\n  if (ctx.options.account?.encryptOAuthTokens) {\n    return symmetricDecrypt({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\nfunction setTokenUtil(token, ctx) {\n  if (ctx.options.account?.encryptOAuthTokens && token) {\n    return symmetricEncrypt({\n      key: ctx.secret,\n      data: token\n    });\n  }\n  return token;\n}\n\nasync function handleOAuthUserInfo(c, {\n  userInfo,\n  account,\n  callbackURL,\n  disableSignUp,\n  overrideUserInfo\n}) {\n  const dbUser = await c.context.internalAdapter.findOAuthUser(\n    userInfo.email.toLowerCase(),\n    account.accountId,\n    account.providerId\n  ).catch((e) => {\n    logger.error(\n      \"Better auth was unable to query your database.\\nError: \",\n      e\n    );\n    const errorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    throw c.redirect(`${errorURL}?error=internal_server_error`);\n  });\n  let user = dbUser?.user;\n  let isRegister = !user;\n  if (dbUser) {\n    const hasBeenLinked = dbUser.accounts.find(\n      (a) => a.providerId === account.providerId && a.accountId === account.accountId\n    );\n    if (!hasBeenLinked) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        account.providerId\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        if (isDevelopment) {\n          logger.warn(\n            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`\n          );\n        }\n        return {\n          error: \"account not linked\",\n          data: null\n        };\n      }\n      try {\n        await c.context.internalAdapter.linkAccount(\n          {\n            providerId: account.providerId,\n            accountId: userInfo.id.toString(),\n            userId: dbUser.user.id,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            idToken: account.idToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          },\n          c\n        );\n      } catch (e) {\n        logger.error(\"Unable to link account\", e);\n        return {\n          error: \"unable to link account\",\n          data: null\n        };\n      }\n    } else {\n      if (c.context.options.account?.updateAccountOnSignIn !== false) {\n        const updateData = Object.fromEntries(\n          Object.entries({\n            idToken: account.idToken,\n            accessToken: await setTokenUtil(account.accessToken, c.context),\n            refreshToken: await setTokenUtil(account.refreshToken, c.context),\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          }).filter(([_, value]) => value !== void 0)\n        );\n        if (Object.keys(updateData).length > 0) {\n          await c.context.internalAdapter.updateAccount(\n            hasBeenLinked.id,\n            updateData,\n            c\n          );\n        }\n      }\n    }\n    if (overrideUserInfo) {\n      const { id: _, ...restUserInfo } = userInfo;\n      await c.context.internalAdapter.updateUser(dbUser.user.id, {\n        ...restUserInfo,\n        email: userInfo.email.toLowerCase(),\n        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified\n      });\n    }\n  } else {\n    if (disableSignUp) {\n      return {\n        error: \"signup disabled\",\n        data: null,\n        isRegister: false\n      };\n    }\n    try {\n      const { id: _, ...restUserInfo } = userInfo;\n      user = await c.context.internalAdapter.createOAuthUser(\n        {\n          ...restUserInfo,\n          email: userInfo.email.toLowerCase()\n        },\n        {\n          accessToken: await setTokenUtil(account.accessToken, c.context),\n          refreshToken: await setTokenUtil(account.refreshToken, c.context),\n          idToken: account.idToken,\n          accessTokenExpiresAt: account.accessTokenExpiresAt,\n          refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n          scope: account.scope,\n          providerId: account.providerId,\n          accountId: userInfo.id.toString()\n        },\n        c\n      ).then((res) => res?.user);\n      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {\n        const token = await createEmailVerificationToken(\n          c.context.secret,\n          user.email,\n          void 0,\n          c.context.options.emailVerification?.expiresIn\n        );\n        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;\n        await c.context.options.emailVerification?.sendVerificationEmail?.(\n          {\n            user,\n            url,\n            token\n          },\n          c.request\n        );\n      }\n    } catch (e) {\n      logger.error(e);\n      if (e instanceof APIError) {\n        return {\n          error: e.message,\n          data: null,\n          isRegister: false\n        };\n      }\n      return {\n        error: \"unable to create user\",\n        data: null,\n        isRegister: false\n      };\n    }\n  }\n  if (!user) {\n    return {\n      error: \"unable to create user\",\n      data: null,\n      isRegister: false\n    };\n  }\n  const session = await c.context.internalAdapter.createSession(user.id, c);\n  if (!session) {\n    return {\n      error: \"unable to create session\",\n      data: null,\n      isRegister: false\n    };\n  }\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null,\n    isRegister\n  };\n}\n\nasync function createAuthorizationURL({\n  id,\n  options,\n  authorizationEndpoint,\n  state,\n  codeVerifier,\n  scopes,\n  claims,\n  redirectURI,\n  duration,\n  prompt,\n  accessType,\n  responseType,\n  display,\n  loginHint,\n  hd,\n  responseMode,\n  additionalParams,\n  scopeJoiner\n}) {\n  const url = new URL(authorizationEndpoint);\n  url.searchParams.set(\"response_type\", responseType || \"code\");\n  url.searchParams.set(\"client_id\", options.clientId);\n  url.searchParams.set(\"state\", state);\n  url.searchParams.set(\"scope\", scopes.join(scopeJoiner || \" \"));\n  url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  duration && url.searchParams.set(\"duration\", duration);\n  display && url.searchParams.set(\"display\", display);\n  loginHint && url.searchParams.set(\"login_hint\", loginHint);\n  prompt && url.searchParams.set(\"prompt\", prompt);\n  hd && url.searchParams.set(\"hd\", hd);\n  accessType && url.searchParams.set(\"access_type\", accessType);\n  responseMode && url.searchParams.set(\"response_mode\", responseMode);\n  if (codeVerifier) {\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    url.searchParams.set(\"code_challenge_method\", \"S256\");\n    url.searchParams.set(\"code_challenge\", codeChallenge);\n  }\n  if (claims) {\n    const claimsObj = claims.reduce(\n      (acc, claim) => {\n        acc[claim] = null;\n        return acc;\n      },\n      {}\n    );\n    url.searchParams.set(\n      \"claims\",\n      JSON.stringify({\n        id_token: { email: null, email_verified: null, ...claimsObj }\n      })\n    );\n  }\n  if (additionalParams) {\n    Object.entries(additionalParams).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n  }\n  return url;\n}\n\nasync function validateAuthorizationCode({\n  code,\n  codeVerifier,\n  redirectURI,\n  options,\n  tokenEndpoint,\n  authentication,\n  deviceId,\n  headers,\n  additionalParams = {}\n}) {\n  const body = new URLSearchParams();\n  const requestHeaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\",\n    \"user-agent\": \"better-auth\",\n    ...headers\n  };\n  body.set(\"grant_type\", \"authorization_code\");\n  body.set(\"code\", code);\n  codeVerifier && body.set(\"code_verifier\", codeVerifier);\n  options.clientKey && body.set(\"client_key\", options.clientKey);\n  deviceId && body.set(\"device_id\", deviceId);\n  body.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  body.set(\"client_id\", options.clientId);\n  if (authentication === \"basic\") {\n    const encodedCredentials = base64.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n    requestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  for (const [key, value] of Object.entries(additionalParams)) {\n    if (!body.has(key)) body.append(key, value);\n  }\n  const { data, error } = await betterFetch(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers: requestHeaders\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = getOAuth2Tokens(data);\n  return tokens;\n}\nasync function validateToken(token, jwksEndpoint) {\n  const { data, error } = await betterFetch(jwksEndpoint, {\n    method: \"GET\",\n    headers: {\n      accept: \"application/json\",\n      \"user-agent\": \"better-auth\"\n    }\n  });\n  if (error) {\n    throw error;\n  }\n  const keys = data[\"keys\"];\n  const header = JSON.parse(atob(token.split(\".\")[0]));\n  const key = keys.find((key2) => key2.kid === header.kid);\n  if (!key) {\n    throw new Error(\"Key not found\");\n  }\n  const verified = await jwtVerify(token, key);\n  return verified;\n}\n\nasync function refreshAccessToken({\n  refreshToken,\n  options,\n  tokenEndpoint,\n  authentication,\n  extraParams,\n  grantType = \"refresh_token\"\n}) {\n  const body = new URLSearchParams();\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\"\n  };\n  body.set(\"grant_type\", grantType);\n  body.set(\"refresh_token\", refreshToken);\n  if (authentication === \"basic\") {\n    headers[\"authorization\"] = base64.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n  } else {\n    body.set(\"client_id\", options.clientId);\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  if (extraParams) {\n    for (const [key, value] of Object.entries(extraParams)) {\n      body.set(key, value);\n    }\n  }\n  const { data, error } = await betterFetch(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = {\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    tokenType: data.token_type,\n    scopes: data.scope?.split(\" \"),\n    idToken: data.id_token\n  };\n  if (data.expires_in) {\n    const now = /* @__PURE__ */ new Date();\n    tokens.accessTokenExpiresAt = new Date(\n      now.getTime() + data.expires_in * 1e3\n    );\n  }\n  return tokens;\n}\n\nconst apple = (options) => {\n  const tokenEndpoint = \"https://appleid.apple.com/auth/token\";\n  return {\n    id: \"apple\",\n    name: \"Apple\",\n    async createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scope = options.disableDefaultScope ? [] : [\"email\", \"name\"];\n      options.scope && _scope.push(...options.scope);\n      scopes && _scope.push(...scopes);\n      const url = await createAuthorizationURL({\n        id: \"apple\",\n        options,\n        authorizationEndpoint: \"https://appleid.apple.com/auth/authorize\",\n        scopes: _scope,\n        state,\n        redirectURI,\n        responseMode: \"form_post\",\n        responseType: \"code id_token\"\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const decodedHeader = decodeProtectedHeader(token);\n      const { kid, alg: jwtAlg } = decodedHeader;\n      if (!kid || !jwtAlg) return false;\n      const publicKey = await getApplePublicKey(kid);\n      const { payload: jwtClaims } = await jwtVerify(token, publicKey, {\n        algorithms: [jwtAlg],\n        issuer: \"https://appleid.apple.com\",\n        audience: options.appBundleIdentifier || options.clientId,\n        maxTokenAge: \"1h\"\n      });\n      [\"email_verified\", \"is_private_email\"].forEach((field) => {\n        if (jwtClaims[field] !== void 0) {\n          jwtClaims[field] = Boolean(jwtClaims[field]);\n        }\n      });\n      if (nonce && jwtClaims.nonce !== nonce) {\n        return false;\n      }\n      return !!jwtClaims;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://appleid.apple.com/auth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const profile = decodeJwt(token.idToken);\n      if (!profile) {\n        return null;\n      }\n      const name = token.user ? `${token.user.name?.firstName} ${token.user.name?.lastName}` : profile.name || profile.email;\n      const emailVerified = typeof profile.email_verified === \"boolean\" ? profile.email_verified : profile.email_verified === \"true\";\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name,\n          emailVerified,\n          email: profile.email,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\nconst getApplePublicKey = async (kid) => {\n  const APPLE_BASE_URL = \"https://appleid.apple.com\";\n  const JWKS_APPLE_URI = \"/auth/keys\";\n  const { data } = await betterFetch(`${APPLE_BASE_URL}${JWKS_APPLE_URI}`);\n  if (!data?.keys) {\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"Keys not found\"\n    });\n  }\n  const jwk = data.keys.find((key) => key.kid === kid);\n  if (!jwk) {\n    throw new Error(`JWK with kid ${kid} not found`);\n  }\n  return await importJWK(jwk, jwk.alg);\n};\n\nconst discord = (options) => {\n  return {\n    id: \"discord\",\n    name: \"Discord\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identify\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      return new URL(\n        `https://discord.com/api/oauth2/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"none\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://discord.com/api/users/@me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (profile.avatar === null) {\n        const defaultAvatarNumber = profile.discriminator === \"0\" ? Number(BigInt(profile.id) >> BigInt(22)) % 6 : parseInt(profile.discriminator) % 5;\n        profile.image_url = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarNumber}.png`;\n      } else {\n        const format = profile.avatar.startsWith(\"a_\") ? \"gif\" : \"png\";\n        profile.image_url = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.${format}`;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.global_name || profile.username || \"\",\n          email: profile.email,\n          emailVerified: profile.verified,\n          image: profile.image_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst facebook = (options) => {\n  return {\n    id: \"facebook\",\n    name: \"Facebook\",\n    async createAuthorizationURL({ state, scopes, redirectURI, loginHint }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"public_profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"facebook\",\n        options,\n        authorizationEndpoint: \"https://www.facebook.com/v21.0/dialog/oauth\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: options.configId ? {\n          config_id: options.configId\n        } : {}\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://graph.facebook.com/oauth/access_token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      if (token.split(\".\").length === 3) {\n        try {\n          const { payload: jwtClaims } = await jwtVerify(\n            token,\n            createRemoteJWKSet(\n              // https://developers.facebook.com/docs/facebook-login/limited-login/token/#jwks\n              new URL(\n                \"https://limited.facebook.com/.well-known/oauth/openid/jwks/\"\n              )\n            ),\n            {\n              algorithms: [\"RS256\"],\n              audience: options.clientId,\n              issuer: \"https://www.facebook.com\"\n            }\n          );\n          if (nonce && jwtClaims.nonce !== nonce) {\n            return false;\n          }\n          return !!jwtClaims;\n        } catch (error) {\n          return false;\n        }\n      }\n      return true;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://graph.facebook.com/v18.0/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (token.idToken && token.idToken.split(\".\").length === 3) {\n        const profile2 = decodeJwt(token.idToken);\n        const user = {\n          id: profile2.sub,\n          name: profile2.name,\n          email: profile2.email,\n          picture: {\n            data: {\n              url: profile2.picture,\n              height: 100,\n              width: 100,\n              is_silhouette: false\n            }\n          }\n        };\n        const userMap2 = await options.mapProfileToUser?.({\n          ...user,\n          email_verified: true\n        });\n        return {\n          user: {\n            ...user,\n            emailVerified: true,\n            ...userMap2\n          },\n          data: profile2\n        };\n      }\n      const fields = [\n        \"id\",\n        \"name\",\n        \"email\",\n        \"picture\",\n        ...options?.fields || []\n      ];\n      const { data: profile, error } = await betterFetch(\n        \"https://graph.facebook.com/me?fields=\" + fields.join(\",\"),\n        {\n          auth: {\n            type: \"Bearer\",\n            token: token.accessToken\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.picture.data.url,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst github = (options) => {\n  const tokenEndpoint = \"https://github.com/login/oauth/access_token\";\n  return {\n    id: \"github\",\n    name: \"GitHub\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read:user\", \"user:email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"github\",\n        options,\n        authorizationEndpoint: \"https://github.com/login/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://github.com/login/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://api.github.com/user\",\n        {\n          headers: {\n            \"User-Agent\": \"better-auth\",\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const { data: emails } = await betterFetch(\"https://api.github.com/user/emails\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"User-Agent\": \"better-auth\"\n        }\n      });\n      if (!profile.email && emails) {\n        profile.email = (emails.find((e) => e.primary) ?? emails[0])?.email;\n      }\n      const emailVerified = emails?.find((e) => e.email === profile.email)?.verified ?? false;\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst google = (options) => {\n  return {\n    id: \"google\",\n    name: \"Google\",\n    async createAuthorizationURL({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI,\n      loginHint,\n      display\n    }) {\n      if (!options.clientId || !options.clientSecret) {\n        logger.error(\n          \"Client Id and Client Secret is required for Google. Make sure to provide them in the options.\"\n        );\n        throw new BetterAuthError(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new BetterAuthError(\"codeVerifier is required for Google\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"profile\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      if (options.prompt === \"select_account+consent\")\n        options.prompt = \"select_account consent\";\n      const url = await createAuthorizationURL({\n        id: \"google\",\n        options,\n        authorizationEndpoint: \"https://accounts.google.com/o/oauth2/auth\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt,\n        accessType: options.accessType,\n        display: display || options.display,\n        loginHint,\n        hd: options.hd,\n        additionalParams: {\n          include_granted_scopes: \"true\"\n        }\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://oauth2.googleapis.com/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.googleapis.com/oauth2/v4/token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const googlePublicKeyUrl = `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${token}`;\n      const { data: tokenInfo } = await betterFetch(googlePublicKeyUrl);\n      if (!tokenInfo) {\n        return false;\n      }\n      const isValid = tokenInfo.aud === options.clientId && (tokenInfo.iss === \"https://accounts.google.com\" || tokenInfo.iss === \"accounts.google.com\");\n      return isValid;\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = decodeJwt(token.idToken);\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: user.email_verified,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    options\n  };\n};\n\nconst kick = (options) => {\n  return {\n    id: \"kick\",\n    name: \"Kick\",\n    createAuthorizationURL({ state, scopes, redirectURI, codeVerifier }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"kick\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.kick.com/oauth/authorize\",\n        scopes: _scopes,\n        codeVerifier,\n        state\n      });\n    },\n    async validateAuthorizationCode({ code, redirectURI, codeVerifier }) {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.kick.com/oauth/token\",\n        codeVerifier\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data, error } = await betterFetch(\"https://api.kick.com/public/v1/users\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      if (error) {\n        return null;\n      }\n      const profile = data.data[0];\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user_id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.profile_picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst huggingface = (options) => {\n  return {\n    id: \"huggingface\",\n    name: \"Hugging Face\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"huggingface\",\n        options,\n        authorizationEndpoint: \"https://huggingface.co/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://huggingface.co/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://huggingface.co/oauth/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name || profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified ?? false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst microsoft = (options) => {\n  const tenant = options.tenantId || \"common\";\n  const authorizationEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize`;\n  const tokenEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/token`;\n  return {\n    id: \"microsoft\",\n    name: \"Microsoft EntraID\",\n    createAuthorizationURL(data) {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      data.scopes && scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"microsoft\",\n        options,\n        authorizationEndpoint,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        scopes,\n        redirectURI: data.redirectURI,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode({ code, codeVerifier, redirectURI }) {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = decodeJwt(token.idToken);\n      const profilePhotoSize = options.profilePhotoSize || 48;\n      await betterFetch(\n        `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          async onResponse(context) {\n            if (options.disableProfilePhoto || !context.response.ok) {\n              return;\n            }\n            try {\n              const response = context.response.clone();\n              const pictureBuffer = await response.arrayBuffer();\n              const pictureBase64 = base64.encode(pictureBuffer);\n              user.picture = `data:image/jpeg;base64, ${pictureBase64}`;\n            } catch (e) {\n              logger.error(\n                e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n                e\n              );\n            }\n          }\n        }\n      );\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        extraParams: {\n          scope: scopes.join(\" \")\n          // Include the scopes in request to microsoft\n        },\n        tokenEndpoint\n      });\n    },\n    options\n  };\n};\n\nconst slack = (options) => {\n  return {\n    id: \"slack\",\n    name: \"Slack\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      const url = new URL(\"https://slack.com/openid/connect/authorize\");\n      url.searchParams.set(\"scope\", _scopes.join(\" \"));\n      url.searchParams.set(\"response_type\", \"code\");\n      url.searchParams.set(\"client_id\", options.clientId);\n      url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n      url.searchParams.set(\"state\", state);\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://slack.com/api/openid.connect.token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://slack.com/api/openid.connect.userInfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile[\"https://slack.com/user_id\"],\n          name: profile.name || \"\",\n          email: profile.email,\n          emailVerified: profile.email_verified,\n          image: profile.picture || profile[\"https://slack.com/user_image_512\"],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst notion = (options) => {\n  const tokenEndpoint = \"https://api.notion.com/v1/oauth/token\";\n  return {\n    id: \"notion\",\n    name: \"Notion\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"notion\",\n        options,\n        authorizationEndpoint: \"https://api.notion.com/v1/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: {\n          owner: \"user\"\n        }\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint,\n        authentication: \"basic\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\"https://api.notion.com/v1/users/me\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"Notion-Version\": \"2022-06-28\"\n        }\n      });\n      if (error || !profile) {\n        return null;\n      }\n      const userProfile = profile.bot?.owner?.user;\n      if (!userProfile) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(userProfile);\n      return {\n        user: {\n          id: userProfile.id,\n          name: userProfile.name || \"Notion User\",\n          email: userProfile.person?.email || null,\n          image: userProfile.avatar_url,\n          emailVerified: !!userProfile.person?.email,\n          ...userMap\n        },\n        data: userProfile\n      };\n    },\n    options\n  };\n};\n\nconst spotify = (options) => {\n  return {\n    id: \"spotify\",\n    name: \"Spotify\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user-read-email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"spotify\",\n        options,\n        authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://api.spotify.com/v1/me\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          email: profile.email,\n          image: profile.images[0]?.url,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitch = (options) => {\n  return {\n    id: \"twitch\",\n    name: \"Twitch\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read:email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"twitch\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.twitch.tv/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        claims: options.claims || [\n          \"email\",\n          \"email_verified\",\n          \"preferred_username\",\n          \"picture\"\n        ]\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const idToken = token.idToken;\n      if (!idToken) {\n        logger.error(\"No idToken found in token\");\n        return null;\n      }\n      const profile = decodeJwt(idToken);\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitter = (options) => {\n  return {\n    id: \"twitter\",\n    name: \"Twitter\",\n    createAuthorizationURL(data) {\n      const _scopes = options.disableDefaultScope ? [] : [\"users.read\", \"tweet.read\", \"offline.access\", \"users.email\"];\n      options.scope && _scopes.push(...options.scope);\n      data.scopes && _scopes.push(...data.scopes);\n      return createAuthorizationURL({\n        id: \"twitter\",\n        options,\n        authorizationEndpoint: \"https://x.com/i/oauth2/authorize\",\n        scopes: _scopes,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        redirectURI: data.redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        authentication: \"basic\",\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error: profileError } = await betterFetch(\n        \"https://api.x.com/2/users/me?user.fields=profile_image_url\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (profileError) {\n        return null;\n      }\n      const { data: emailData, error: emailError } = await betterFetch(\"https://api.x.com/2/users/me?user.fields=confirmed_email\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      let emailVerified = false;\n      if (!emailError && emailData?.data?.confirmed_email) {\n        profile.data.email = emailData.data.confirmed_email;\n        emailVerified = true;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.data.id,\n          name: profile.data.name,\n          email: profile.data.email || profile.data.username || null,\n          image: profile.data.profile_image_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst dropbox = (options) => {\n  const tokenEndpoint = \"https://api.dropboxapi.com/oauth2/token\";\n  return {\n    id: \"dropbox\",\n    name: \"Dropbox\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"account_info.read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const additionalParams = {};\n      if (options.accessType) {\n        additionalParams.token_access_type = options.accessType;\n      }\n      return await createAuthorizationURL({\n        id: \"dropbox\",\n        options,\n        authorizationEndpoint: \"https://www.dropbox.com/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        additionalParams\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.dropbox.com/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://api.dropboxapi.com/2/users/get_current_account\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.account_id,\n          name: profile.name?.display_name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.profile_photo_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst linear = (options) => {\n  const tokenEndpoint = \"https://api.linear.app/oauth/token\";\n  return {\n    id: \"linear\",\n    name: \"Linear\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"linear\",\n        options,\n        authorizationEndpoint: \"https://linear.app/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://api.linear.app/graphql\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          body: JSON.stringify({\n            query: `\n\t\t\t\t\t\t\tquery {\n\t\t\t\t\t\t\t\tviewer {\n\t\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\t\t\temail\n\t\t\t\t\t\t\t\t\tavatarUrl\n\t\t\t\t\t\t\t\t\tactive\n\t\t\t\t\t\t\t\t\tcreatedAt\n\t\t\t\t\t\t\t\t\tupdatedAt\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t`\n          })\n        }\n      );\n      if (error || !profile?.data?.viewer) {\n        return null;\n      }\n      const userData = profile.data.viewer;\n      const userMap = await options.mapProfileToUser?.(userData);\n      return {\n        user: {\n          id: profile.data.viewer.id,\n          name: profile.data.viewer.name,\n          email: profile.data.viewer.email,\n          image: profile.data.viewer.avatarUrl,\n          emailVerified: true,\n          ...userMap\n        },\n        data: userData\n      };\n    },\n    options\n  };\n};\n\nconst linkedin = (options) => {\n  const authorizationEndpoint = \"https://www.linkedin.com/oauth/v2/authorization\";\n  const tokenEndpoint = \"https://www.linkedin.com/oauth/v2/accessToken\";\n  return {\n    id: \"linkedin\",\n    name: \"Linkedin\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      redirectURI,\n      loginHint\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"profile\", \"email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: \"linkedin\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        loginHint,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return await validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://api.linkedin.com/v2/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.picture,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst cleanDoubleSlashes = (input = \"\") => {\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n};\nconst issuerToEndpoints = (issuer) => {\n  let baseUrl = issuer || \"https://gitlab.com\";\n  return {\n    authorizationEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/authorize`),\n    tokenEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/token`),\n    userinfoEndpoint: cleanDoubleSlashes(`${baseUrl}/api/v4/user`)\n  };\n};\nconst gitlab = (options) => {\n  const { authorizationEndpoint, tokenEndpoint, userinfoEndpoint } = issuerToEndpoints(options.issuer);\n  const issuerId = \"gitlab\";\n  const issuerName = \"Gitlab\";\n  return {\n    id: issuerId,\n    name: issuerName,\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      loginHint,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"read_user\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await createAuthorizationURL({\n        id: issuerId,\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI,\n        options,\n        codeVerifier,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://gitlab.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        userinfoEndpoint,\n        { headers: { authorization: `Bearer ${token.accessToken}` } }\n      );\n      if (error || profile.state !== \"active\" || profile.locked) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst tiktok = (options) => {\n  return {\n    id: \"tiktok\",\n    name: \"TikTok\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user.info.profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://www.tiktok.com/v2/auth/authorize?scope=${_scopes.join(\n          \",\"\n        )}&response_type=code&client_key=${options.clientKey}&client_secret=${options.clientSecret}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const fields = [\n        \"open_id\",\n        \"avatar_large_url\",\n        \"display_name\",\n        \"username\"\n      ];\n      const { data: profile, error } = await betterFetch(\n        `https://open.tiktokapis.com/v2/user/info/?fields=${fields.join(\",\")}`,\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      return {\n        user: {\n          email: profile.data.user.email || profile.data.user.username,\n          id: profile.data.user.open_id,\n          name: profile.data.user.display_name || profile.data.user.username,\n          image: profile.data.user.avatar_large_url,\n          /** @note Tiktok does not provide emailVerified or even email*/\n          emailVerified: profile.data.user.email ? true : false\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst reddit = (options) => {\n  return {\n    id: \"reddit\",\n    name: \"Reddit\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identity\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return createAuthorizationURL({\n        id: \"reddit\",\n        options,\n        authorizationEndpoint: \"https://www.reddit.com/api/v1/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        duration: options.duration\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      const body = new URLSearchParams({\n        grant_type: \"authorization_code\",\n        code,\n        redirect_uri: options.redirectURI || redirectURI\n      });\n      const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        accept: \"text/plain\",\n        \"user-agent\": \"better-auth\",\n        Authorization: `Basic ${base64.encode(\n          `${options.clientId}:${options.clientSecret}`\n        )}`\n      };\n      const { data, error } = await betterFetch(\n        \"https://www.reddit.com/api/v1/access_token\",\n        {\n          method: \"POST\",\n          headers,\n          body: body.toString()\n        }\n      );\n      if (error) {\n        throw error;\n      }\n      return getOAuth2Tokens(data);\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.reddit.com/api/v1/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://oauth.reddit.com/api/v1/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`,\n            \"User-Agent\": \"better-auth\"\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.oauth_client_id,\n          emailVerified: profile.has_verified_email,\n          image: profile.icon_img?.split(\"?\")[0],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst roblox = (options) => {\n  return {\n    id: \"roblox\",\n    name: \"Roblox\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://apis.roblox.com/oauth/v1/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"select_account+consent\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\",\n        authentication: \"post\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://apis.roblox.com/oauth/v1/userinfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.nickname || profile.preferred_username || \"\",\n          image: profile.picture,\n          email: profile.preferred_username || null,\n          // Roblox does not provide email\n          emailVerified: true,\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    },\n    options\n  };\n};\n\nvar LANG = /* @__PURE__ */ ((LANG2) => {\n  LANG2[LANG2[\"RUS\"] = 0] = \"RUS\";\n  LANG2[LANG2[\"UKR\"] = 1] = \"UKR\";\n  LANG2[LANG2[\"ENG\"] = 3] = \"ENG\";\n  LANG2[LANG2[\"SPA\"] = 4] = \"SPA\";\n  LANG2[LANG2[\"GERMAN\"] = 6] = \"GERMAN\";\n  LANG2[LANG2[\"POL\"] = 15] = \"POL\";\n  LANG2[LANG2[\"FRA\"] = 16] = \"FRA\";\n  LANG2[LANG2[\"TURKEY\"] = 82] = \"TURKEY\";\n  return LANG2;\n})(LANG || {});\nconst vk = (options) => {\n  return {\n    id: \"vk\",\n    name: \"VK\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"phone\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const authorizationEndpoint = \"https://id.vk.com/authorize\";\n      return createAuthorizationURL({\n        id: \"vk\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({\n      code,\n      codeVerifier,\n      redirectURI,\n      deviceId\n    }) => {\n      return validateAuthorizationCode({\n        code,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        deviceId,\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return refreshAccessToken({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    async getUserInfo(data) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(data);\n      }\n      if (!data.accessToken) {\n        return null;\n      }\n      const formBody = new URLSearchParams({\n        access_token: data.accessToken,\n        client_id: options.clientId\n      }).toString();\n      const { data: profile, error } = await betterFetch(\n        \"https://id.vk.com/oauth2/user_info\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: formBody\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (!profile.user.email) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user.user_id,\n          first_name: profile.user.first_name,\n          last_name: profile.user.last_name,\n          email: profile.user.email,\n          image: profile.user.avatar,\n          /** @note VK does not provide emailVerified*/\n          emailVerified: !!profile.user.email,\n          birthday: profile.user.birthday,\n          sex: profile.user.sex,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst zoom = (userOptions) => {\n  const options = {\n    pkce: true,\n    ...userOptions\n  };\n  return {\n    id: \"zoom\",\n    name: \"Zoom\",\n    createAuthorizationURL: async ({ state, redirectURI, codeVerifier }) => {\n      const params = new URLSearchParams({\n        response_type: \"code\",\n        redirect_uri: options.redirectURI ? options.redirectURI : redirectURI,\n        client_id: options.clientId,\n        state\n      });\n      if (options.pkce) {\n        const codeChallenge = await generateCodeChallenge(codeVerifier);\n        params.set(\"code_challenge_method\", \"S256\");\n        params.set(\"code_challenge\", codeChallenge);\n      }\n      const url = new URL(\"https://zoom.us/oauth/authorize\");\n      url.search = params.toString();\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return validateAuthorizationCode({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        codeVerifier,\n        options,\n        tokenEndpoint: \"https://zoom.us/oauth/token\",\n        authentication: \"post\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await betterFetch(\n        \"https://api.zoom.us/v2/users/me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          image: profile.pic_url,\n          email: profile.email,\n          emailVerified: Boolean(profile.verified),\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    }\n  };\n};\n\nconst socialProviders = {\n  apple,\n  discord,\n  facebook,\n  github,\n  microsoft,\n  google,\n  huggingface,\n  slack,\n  spotify,\n  twitch,\n  twitter,\n  dropbox,\n  kick,\n  linear,\n  linkedin,\n  gitlab,\n  tiktok,\n  reddit,\n  roblox,\n  vk,\n  zoom,\n  notion\n};\nconst socialProviderList = Object.keys(socialProviders);\nconst SocialProviderListEnum = z.enum(socialProviderList).or(z.string());\n\nconst signInSocial = createAuthEndpoint(\n  \"/sign-in/social\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * Callback URL to redirect to after the user\n       * has signed in.\n       */\n      callbackURL: z.string().meta({\n        description: \"Callback URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * callback url to redirect if the user is newly registered.\n       *\n       * useful if you have different routes for existing users and new users\n       */\n      newUserCallbackURL: z.string().optional(),\n      /**\n       * Callback url to redirect to if an error happens\n       *\n       * If it's initiated from the client sdk this defaults to\n       * the current url.\n       */\n      errorCallbackURL: z.string().meta({\n        description: \"Callback URL to redirect to if an error happens\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use`\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: z.boolean().meta({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional(),\n      /**\n       * ID token from the provider\n       *\n       * This is used to sign in the user\n       * if the user is already signed in with the\n       * provider in the frontend.\n       *\n       * Only applicable if the provider supports\n       * it. Currently only `apple` and `google` is\n       * supported out of the box.\n       */\n      idToken: z.optional(\n        z.object({\n          /**\n           * ID token from the provider\n           */\n          token: z.string().meta({\n            description: \"ID token from the provider\"\n          }),\n          /**\n           * The nonce used to generate the token\n           */\n          nonce: z.string().meta({\n            description: \"Nonce used to generate the token\"\n          }).optional(),\n          /**\n           * Access token from the provider\n           */\n          accessToken: z.string().meta({\n            description: \"Access token from the provider\"\n          }).optional(),\n          /**\n           * Refresh token from the provider\n           */\n          refreshToken: z.string().meta({\n            description: \"Refresh token from the provider\"\n          }).optional(),\n          /**\n           * Expiry date of the token\n           */\n          expiresAt: z.number().meta({\n            description: \"Expiry date of the token\"\n          }).optional()\n        })\n      ),\n      scopes: z.array(z.string()).meta({\n        description: \"Array of scopes to request from the provider. This will override the default scopes passed.\"\n      }).optional(),\n      /**\n       * Explicitly request sign-up\n       *\n       * Should be used to allow sign up when\n       * disableImplicitSignUp for this provider is\n       * true\n       */\n      requestSignUp: z.boolean().meta({\n        description: \"Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider\"\n      }).optional(),\n      /**\n       * The login hint to use for the authorization code request\n       */\n      loginHint: z.string().meta({\n        description: \"The login hint to use for the authorization code request\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with a social provider\",\n        operationId: \"socialSignIn\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\",\n                      url: {\n                        type: \"null\",\n                        nullable: true\n                      },\n                      user: {\n                        type: \"object\",\n                        properties: {\n                          id: { type: \"string\" },\n                          email: { type: \"string\" },\n                          name: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          image: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          emailVerified: {\n                            type: \"boolean\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          }\n                        },\n                        required: [\n                          \"id\",\n                          \"email\",\n                          \"emailVerified\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const userInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!userInfo || !userInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!userInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const data = await handleOAuthUserInfo(c, {\n        userInfo: {\n          ...userInfo.user,\n          email: userInfo.user.email,\n          id: userInfo.user.id,\n          name: userInfo.user.name || \"\",\n          image: userInfo.user.image,\n          emailVerified: userInfo.user.emailVerified || false\n        },\n        account: {\n          providerId: provider.id,\n          accountId: userInfo.user.id,\n          accessToken: c.body.idToken.accessToken\n        },\n        callbackURL: c.body.callbackURL,\n        disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp\n      });\n      if (data.error) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: data.error\n        });\n      }\n      await setSessionCookie(c, data.data);\n      return c.json({\n        redirect: false,\n        token: data.data.session.token,\n        url: void 0,\n        user: {\n          id: data.data.user.id,\n          email: data.data.user.email,\n          name: data.data.user.name,\n          image: data.data.user.image,\n          emailVerified: data.data.user.emailVerified,\n          createdAt: data.data.user.createdAt,\n          updatedAt: data.data.user.updatedAt\n        }\n      });\n    }\n    const { codeVerifier, state } = await generateState(c);\n    const url = await provider.createAuthorizationURL({\n      state,\n      codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes,\n      loginHint: c.body.loginHint\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst signInEmail = createAuthEndpoint(\n  \"/sign-in/email\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * Email of the user\n       */\n      email: z.string().meta({\n        description: \"Email of the user\"\n      }),\n      /**\n       * Password of the user\n       */\n      password: z.string().meta({\n        description: \"Password of the user\"\n      }),\n      /**\n       * Callback URL to use as a redirect for email\n       * verification and for possible redirects\n       */\n      callbackURL: z.string().meta({\n        description: \"Callback URL to use as a redirect for email verification\"\n      }).optional(),\n      /**\n       * If this is false, the session will not be remembered\n       * @default true\n       */\n      rememberMe: z.boolean().meta({\n        description: \"If this is false, the session will not be remembered. Default is `true`.\"\n      }).default(true).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with email and password\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\"\n                    },\n                    url: {\n                      type: \"null\",\n                      nullable: true\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: { type: \"string\" },\n                        email: { type: \"string\" },\n                        name: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        image: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options?.emailAndPassword?.enabled) {\n      ctx.context.logger.error(\n        \"Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!\"\n      );\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Email and password is not enabled\"\n      });\n    }\n    const { email, password } = ctx.body;\n    const isValidEmail = z.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL\n      });\n    }\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      await ctx.context.password.hash(password);\n      ctx.context.logger.error(\"User not found\", { email });\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const credentialAccount = user.accounts.find(\n      (a) => a.providerId === \"credential\"\n    );\n    if (!credentialAccount) {\n      ctx.context.logger.error(\"Credential account not found\", { email });\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const currentPassword = credentialAccount?.password;\n    if (!currentPassword) {\n      ctx.context.logger.error(\"Password not found\", { email });\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const validPassword = await ctx.context.password.verify({\n      hash: currentPassword,\n      password\n    });\n    if (!validPassword) {\n      ctx.context.logger.error(\"Invalid password\");\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {\n      if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n        });\n      }\n      if (ctx.context.options?.emailVerification?.sendOnSignIn) {\n        const token = await createEmailVerificationToken(\n          ctx.context.secret,\n          user.user.email,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: user.user,\n            url,\n            token\n          },\n          ctx.request\n        );\n      }\n      throw new APIError(\"FORBIDDEN\", {\n        message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      user.user.id,\n      ctx,\n      ctx.body.rememberMe === false\n    );\n    if (!session) {\n      ctx.context.logger.error(\"Failed to create session\");\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await setSessionCookie(\n      ctx,\n      {\n        session,\n        user: user.user\n      },\n      ctx.body.rememberMe === false\n    );\n    return ctx.json({\n      redirect: !!ctx.body.callbackURL,\n      token: session.token,\n      url: ctx.body.callbackURL,\n      user: {\n        id: user.user.id,\n        email: user.user.email,\n        name: user.user.name,\n        image: user.user.image,\n        emailVerified: user.user.emailVerified,\n        createdAt: user.user.createdAt,\n        updatedAt: user.user.updatedAt\n      }\n    });\n  }\n);\n\nconst schema = z.object({\n  code: z.string().optional(),\n  error: z.string().optional(),\n  device_id: z.string().optional(),\n  error_description: z.string().optional(),\n  state: z.string().optional(),\n  user: z.string().optional()\n});\nconst callbackOAuth = createAuthEndpoint(\n  \"/callback/:id\",\n  {\n    method: [\"GET\", \"POST\"],\n    body: schema.optional(),\n    query: schema.optional(),\n    metadata: HIDE_METADATA\n  },\n  async (c) => {\n    let queryOrBody;\n    const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    try {\n      if (c.method === \"GET\") {\n        queryOrBody = schema.parse(c.query);\n      } else if (c.method === \"POST\") {\n        queryOrBody = schema.parse(c.body);\n      } else {\n        throw new Error(\"Unsupported method\");\n      }\n    } catch (e) {\n      c.context.logger.error(\"INVALID_CALLBACK_REQUEST\", e);\n      throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);\n    }\n    const { code, error, state, error_description, device_id } = queryOrBody;\n    if (error) {\n      throw c.redirect(\n        `${defaultErrorURL}?error=${error}&error_description=${error_description}`\n      );\n    }\n    if (!state) {\n      c.context.logger.error(\"State not found\", error);\n      throw c.redirect(`${defaultErrorURL}?error=state_not_found`);\n    }\n    const {\n      codeVerifier,\n      callbackURL,\n      link,\n      errorURL,\n      newUserURL,\n      requestSignUp\n    } = await parseState(c);\n    function redirectOnError(error2) {\n      let url = errorURL || defaultErrorURL;\n      if (url.includes(\"?\")) {\n        url = `${url}&error=${error2}`;\n      } else {\n        url = `${url}?error=${error2}`;\n      }\n      throw c.redirect(url);\n    }\n    if (!code) {\n      c.context.logger.error(\"Code not found\");\n      throw redirectOnError(\"no_code\");\n    }\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.params.id\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Oauth provider with id\",\n        c.params.id,\n        \"not found\"\n      );\n      throw redirectOnError(\"oauth_provider_not_found\");\n    }\n    let tokens;\n    try {\n      tokens = await provider.validateAuthorizationCode({\n        code,\n        codeVerifier,\n        deviceId: device_id,\n        redirectURI: `${c.context.baseURL}/callback/${provider.id}`\n      });\n    } catch (e) {\n      c.context.logger.error(\"\", e);\n      throw redirectOnError(\"invalid_code\");\n    }\n    const userInfo = await provider.getUserInfo({\n      ...tokens,\n      user: c.body?.user ? safeJSONParse(c.body.user) : void 0\n    }).then((res) => res?.user);\n    if (!userInfo) {\n      c.context.logger.error(\"Unable to get user info\");\n      return redirectOnError(\"unable_to_get_user_info\");\n    }\n    if (!callbackURL) {\n      c.context.logger.error(\"No callback URL found\");\n      throw redirectOnError(\"no_callback_url\");\n    }\n    if (link) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        provider.id\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        c.context.logger.error(\"Unable to link account - untrusted provider\");\n        return redirectOnError(\"unable_to_link_account\");\n      }\n      const existingAccount = await c.context.internalAdapter.findAccount(\n        userInfo.id\n      );\n      if (existingAccount) {\n        if (existingAccount.userId.toString() !== link.userId.toString()) {\n          return redirectOnError(\"account_already_linked_to_different_user\");\n        }\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            idToken: tokens.idToken,\n            accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,\n            scope: tokens.scopes?.join(\",\")\n          }).filter(([_, value]) => value !== void 0)\n        );\n        await c.context.internalAdapter.updateAccount(\n          existingAccount.id,\n          updateData\n        );\n      } else {\n        const newAccount = await c.context.internalAdapter.createAccount(\n          {\n            userId: link.userId,\n            providerId: provider.id,\n            accountId: userInfo.id,\n            ...tokens,\n            accessToken: await setTokenUtil(tokens.accessToken, c.context),\n            refreshToken: await setTokenUtil(tokens.refreshToken, c.context),\n            scope: tokens.scopes?.join(\",\")\n          },\n          c\n        );\n        if (!newAccount) {\n          return redirectOnError(\"unable_to_link_account\");\n        }\n      }\n      let toRedirectTo2;\n      try {\n        const url = callbackURL;\n        toRedirectTo2 = url.toString();\n      } catch {\n        toRedirectTo2 = callbackURL;\n      }\n      throw c.redirect(toRedirectTo2);\n    }\n    if (!userInfo.email) {\n      c.context.logger.error(\n        \"Provider did not return email. This could be due to misconfiguration in the provider settings.\"\n      );\n      return redirectOnError(\"email_not_found\");\n    }\n    const result = await handleOAuthUserInfo(c, {\n      userInfo: {\n        ...userInfo,\n        email: userInfo.email,\n        name: userInfo.name || userInfo.email\n      },\n      account: {\n        providerId: provider.id,\n        accountId: userInfo.id,\n        ...tokens,\n        scope: tokens.scopes?.join(\",\")\n      },\n      callbackURL,\n      disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,\n      overrideUserInfo: provider.options?.overrideUserInfoOnSignIn\n    });\n    if (result.error) {\n      c.context.logger.error(result.error.split(\" \").join(\"_\"));\n      return redirectOnError(result.error.split(\" \").join(\"_\"));\n    }\n    const { session, user } = result.data;\n    await setSessionCookie(c, {\n      session,\n      user\n    });\n    let toRedirectTo;\n    try {\n      const url = result.isRegister ? newUserURL || callbackURL : callbackURL;\n      toRedirectTo = url.toString();\n    } catch {\n      toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;\n    }\n    throw c.redirect(toRedirectTo);\n  }\n);\n\nconst signOut = createAuthEndpoint(\n  \"/sign-out\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Sign out the current user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const sessionCookieToken = await ctx.getSignedCookie(\n      ctx.context.authCookies.sessionToken.name,\n      ctx.context.secret\n    );\n    if (!sessionCookieToken) {\n      deleteSessionCookie(ctx);\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n    await ctx.context.internalAdapter.deleteSession(sessionCookieToken);\n    deleteSessionCookie(ctx);\n    return ctx.json({\n      success: true\n    });\n  }\n);\n\nfunction redirectError(ctx, callbackURL, query) {\n  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nfunction redirectCallback(ctx, callbackURL, query) {\n  const url = new URL(callbackURL, ctx.baseURL);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nconst requestPasswordReset = createAuthEndpoint(\n  \"/request-password-reset\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: z.email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: z.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = getDate(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = generateId(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst forgetPassword = createAuthEndpoint(\n  \"/forget-password\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: z.string().email().meta({\n        description: \"The email address of the user to send a password reset email to\"\n      }),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: z.string().meta({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = getDate(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = generateId(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst requestPasswordResetCallback = createAuthEndpoint(\n  \"/reset-password/:token\",\n  {\n    method: \"GET\",\n    query: z.object({\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect the user to reset their password\"\n      })\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Redirects the user to the callback URL with the token\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { token } = ctx.params;\n    const { callbackURL } = ctx.query;\n    if (!token || !callbackURL) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    const verification = await ctx.context.internalAdapter.findVerificationValue(\n      `reset-password:${token}`\n    );\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));\n  }\n);\nconst forgetPasswordCallback = requestPasswordResetCallback;\nconst resetPassword = createAuthEndpoint(\n  \"/reset-password\",\n  {\n    method: \"POST\",\n    query: z.object({\n      token: z.string().optional()\n    }).optional(),\n    body: z.object({\n      newPassword: z.string().meta({\n        description: \"The new password to set\"\n      }),\n      token: z.string().meta({\n        description: \"The token to reset the password\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Reset the password for a user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token || ctx.query?.token;\n    if (!token) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const { newPassword } = ctx.body;\n    const minLength = ctx.context.password?.config.minPasswordLength;\n    const maxLength = ctx.context.password?.config.maxPasswordLength;\n    if (newPassword.length < minLength) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    if (newPassword.length > maxLength) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const id = `reset-password:${token}`;\n    const verification = await ctx.context.internalAdapter.findVerificationValue(id);\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const userId = verification.value;\n    const hashedPassword = await ctx.context.password.hash(newPassword);\n    const accounts = await ctx.context.internalAdapter.findAccounts(userId);\n    const account = accounts.find((ac) => ac.providerId === \"credential\");\n    if (!account) {\n      await ctx.context.internalAdapter.createAccount(\n        {\n          userId,\n          providerId: \"credential\",\n          password: hashedPassword,\n          accountId: userId\n        },\n        ctx\n      );\n    } else {\n      await ctx.context.internalAdapter.updatePassword(\n        userId,\n        hashedPassword,\n        ctx\n      );\n    }\n    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);\n    if (ctx.context.options.emailAndPassword?.onPasswordReset) {\n      const user = await ctx.context.internalAdapter.findUserById(userId);\n      if (user) {\n        await ctx.context.options.emailAndPassword.onPasswordReset(\n          {\n            user\n          },\n          ctx.request\n        );\n      }\n    }\n    if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {\n      await ctx.context.internalAdapter.deleteSessions(userId);\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nconst updateUser = () => createAuthEndpoint(\n  \"/update-user\",\n  {\n    method: \"POST\",\n    body: z.record(\n      z.string().meta({\n        description: \"Field name must be a string\"\n      }),\n      z.any()\n    ),\n    use: [sessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the current user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The image of the user\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the update was successful\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const body = ctx.body;\n    if (body.email) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.EMAIL_CAN_NOT_BE_UPDATED\n      });\n    }\n    const { name, image, ...rest } = body;\n    const session = ctx.context.session;\n    if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {\n      return ctx.json({\n        status: true\n      });\n    }\n    const additionalFields = parseUserInput(\n      ctx.context.options,\n      rest,\n      \"update\"\n    );\n    const user = await ctx.context.internalAdapter.updateUser(\n      session.user.id,\n      {\n        name,\n        image,\n        ...additionalFields\n      },\n      ctx\n    );\n    await setSessionCookie(ctx, {\n      session: session.session,\n      user\n    });\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst changePassword = createAuthEndpoint(\n  \"/change-password\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The new password to set\n       */\n      newPassword: z.string().meta({\n        description: \"The new password to set\"\n      }),\n      /**\n       * The current password of the user\n       */\n      currentPassword: z.string().meta({\n        description: \"The current password is required\"\n      }),\n      /**\n       * revoke all sessions that are not the\n       * current one logged in by the user\n       */\n      revokeOtherSessions: z.boolean().meta({\n        description: \"Must be a boolean value\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Change the password of the user\",\n        responses: {\n          \"200\": {\n            description: \"Password successfully changed\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      // Only present if revokeOtherSessions is true\n                      description: \"New session token if other sessions were revoked\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { newPassword, currentPassword, revokeOtherSessions } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (!account || !account.password) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n      });\n    }\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    const verify = await ctx.context.password.verify({\n      hash: account.password,\n      password: currentPassword\n    });\n    if (!verify) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_PASSWORD\n      });\n    }\n    await ctx.context.internalAdapter.updateAccount(account.id, {\n      password: passwordHash\n    });\n    let token = null;\n    if (revokeOtherSessions) {\n      await ctx.context.internalAdapter.deleteSessions(session.user.id);\n      const newSession = await ctx.context.internalAdapter.createSession(\n        session.user.id,\n        ctx\n      );\n      if (!newSession) {\n        throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n        });\n      }\n      await setSessionCookie(ctx, {\n        session: newSession,\n        user: session.user\n      });\n      token = newSession.token;\n    }\n    return ctx.json({\n      token,\n      user: {\n        id: session.user.id,\n        email: session.user.email,\n        name: session.user.name,\n        image: session.user.image,\n        emailVerified: session.user.emailVerified,\n        createdAt: session.user.createdAt,\n        updatedAt: session.user.updatedAt\n      }\n    });\n  }\n);\nconst setPassword = createAuthEndpoint(\n  \"/set-password\",\n  {\n    method: \"POST\",\n    body: z.object({\n      /**\n       * The new password to set\n       */\n      newPassword: z.string().meta({\n        description: \"The new password to set is required\"\n      })\n    }),\n    metadata: {\n      SERVER_ONLY: true\n    },\n    use: [sessionMiddleware]\n  },\n  async (ctx) => {\n    const { newPassword } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    if (!account) {\n      await ctx.context.internalAdapter.linkAccount(\n        {\n          userId: session.user.id,\n          providerId: \"credential\",\n          accountId: session.user.id,\n          password: passwordHash\n        },\n        ctx\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"user already has a password\"\n    });\n  }\n);\nconst deleteUser = createAuthEndpoint(\n  \"/delete-user\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    body: z.object({\n      /**\n       * The callback URL to redirect to after the user is deleted\n       * this is only used on delete user callback\n       */\n      callbackURL: z.string().meta({\n        description: \"The callback URL to redirect to after the user is deleted\"\n      }).optional(),\n      /**\n       * The password of the user. If the password isn't provided, session freshness\n       * will be checked.\n       */\n      password: z.string().meta({\n        description: \"The password of the user is required to delete the user\"\n      }).optional(),\n      /**\n       * The token to delete the user. If the token is provided, the user will be deleted\n       */\n      token: z.string().meta({\n        description: \"The token to delete the user is required\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Delete the user\",\n        responses: {\n          \"200\": {\n            description: \"User deletion processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the operation was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\", \"Verification email sent\"],\n                      description: \"Status message of the deletion process\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\",\n        {\n          session: ctx.context.session\n        }\n      );\n      throw new APIError(\"NOT_FOUND\");\n    }\n    const session = ctx.context.session;\n    if (ctx.body.password) {\n      const accounts = await ctx.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const account = accounts.find(\n        (account2) => account2.providerId === \"credential\" && account2.password\n      );\n      if (!account || !account.password) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n        });\n      }\n      const verify = await ctx.context.password.verify({\n        hash: account.password,\n        password: ctx.body.password\n      });\n      if (!verify) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.INVALID_PASSWORD\n        });\n      }\n    }\n    if (ctx.body.token) {\n      await deleteUserCallback({\n        ...ctx,\n        query: {\n          token: ctx.body.token\n        }\n      });\n      return ctx.json({\n        success: true,\n        message: \"User deleted\"\n      });\n    }\n    if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {\n      const token = generateRandomString(32, \"0-9\", \"a-z\");\n      await ctx.context.internalAdapter.createVerificationValue(\n        {\n          value: session.user.id,\n          identifier: `delete-account-${token}`,\n          expiresAt: new Date(\n            Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3\n          )\n        },\n        ctx\n      );\n      const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(\n        {\n          user: session.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      return ctx.json({\n        success: true,\n        message: \"Verification email sent\"\n      });\n    }\n    if (!ctx.body.password && ctx.context.sessionConfig.freshAge !== 0) {\n      const currentAge = session.session.createdAt.getTime();\n      const freshAge = ctx.context.sessionConfig.freshAge * 1e3;\n      const now = Date.now();\n      if (now - currentAge > freshAge * 1e3) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.SESSION_EXPIRED\n        });\n      }\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    deleteSessionCookie(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst deleteUserCallback = createAuthEndpoint(\n  \"/delete-user/callback\",\n  {\n    method: \"GET\",\n    query: z.object({\n      token: z.string().meta({\n        description: \"The token to verify the deletion request\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after deletion\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Callback to complete user deletion with verification token\",\n        responses: {\n          \"200\": {\n            description: \"User successfully deleted\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the deletion was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\"],\n                      description: \"Confirmation message\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\"\n      );\n      throw new APIError(\"NOT_FOUND\");\n    }\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n      });\n    }\n    const token = await ctx.context.internalAdapter.findVerificationValue(\n      `delete-account-${ctx.query.token}`\n    );\n    if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    if (token.value !== session.user.id) {\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    await ctx.context.internalAdapter.deleteVerificationValue(token.id);\n    deleteSessionCookie(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL || \"/\");\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst changeEmail = createAuthEndpoint(\n  \"/change-email\",\n  {\n    method: \"POST\",\n    body: z.object({\n      newEmail: z.email().meta({\n        description: \"The new email address to set must be a valid email address\"\n      }),\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        responses: {\n          \"200\": {\n            description: \"Email change request processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the request was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"Email updated\", \"Verification email sent\"],\n                      description: \"Status message of the email change process\",\n                      nullable: true\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.changeEmail?.enabled) {\n      ctx.context.logger.error(\"Change email is disabled.\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Change email is disabled\"\n      });\n    }\n    const newEmail = ctx.body.newEmail.toLowerCase();\n    if (newEmail === ctx.context.session.user.email) {\n      ctx.context.logger.error(\"Email is the same\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Email is the same\"\n      });\n    }\n    const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n    if (existingUser) {\n      ctx.context.logger.error(\"Email already exists\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Couldn't update your email\"\n      });\n    }\n    if (ctx.context.session.user.emailVerified !== true) {\n      const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n      if (existing) {\n        throw new APIError(\"UNPROCESSABLE_ENTITY\", {\n          message: BASE_ERROR_CODES.USER_ALREADY_EXISTS\n        });\n      }\n      await ctx.context.internalAdapter.updateUserByEmail(\n        ctx.context.session.user.email,\n        {\n          email: newEmail\n        },\n        ctx\n      );\n      await setSessionCookie(ctx, {\n        session: ctx.context.session.session,\n        user: {\n          ...ctx.context.session.user,\n          email: newEmail\n        }\n      });\n      if (ctx.context.options.emailVerification?.sendVerificationEmail) {\n        const token2 = await createEmailVerificationToken(\n          ctx.context.secret,\n          newEmail,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: {\n              ...ctx.context.session.user,\n              email: newEmail\n            },\n            url: url2,\n            token: token2\n          },\n          ctx.request\n        );\n      }\n      return ctx.json({\n        status: true\n      });\n    }\n    if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const token = await createEmailVerificationToken(\n      ctx.context.secret,\n      ctx.context.session.user.email,\n      newEmail,\n      ctx.context.options.emailVerification?.expiresIn\n    );\n    const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n    await ctx.context.options.user.changeEmail.sendChangeEmailVerification(\n      {\n        user: ctx.context.session.user,\n        newEmail,\n        url,\n        token\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nfunction sanitize(input) {\n  return input.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n}\nconst html = (errorCode = \"Unknown\") => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Authentication Error</title>\n    <style>\n        :root {\n            --bg-color: #f8f9fa;\n            --text-color: #212529;\n            --accent-color: #000000;\n            --error-color: #dc3545;\n            --border-color: #e9ecef;\n        }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            line-height: 1.5;\n        }\n        .error-container {\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 2.5rem;\n            text-align: center;\n            max-width: 90%;\n            width: 400px;\n        }\n        h1 {\n            color: var(--error-color);\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            font-weight: 600;\n        }\n        p {\n            margin-bottom: 1.5rem;\n            color: #495057;\n        }\n        .btn {\n            background-color: var(--accent-color);\n            color: #ffffff;\n            text-decoration: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            transition: all 0.3s ease;\n            display: inline-block;\n            font-weight: 500;\n            border: 2px solid var(--accent-color);\n        }\n        .btn:hover {\n            background-color: #131721;\n        }\n        .error-code {\n            font-size: 0.875rem;\n            color: #6c757d;\n            margin-top: 1.5rem;\n            padding-top: 1.5rem;\n            border-top: 1px solid var(--border-color);\n        }\n        .icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <div class=\"icon\">\\u26A0\\uFE0F</div>\n        <h1>Better Auth Error</h1>\n        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>\n        <a href=\"/\" id=\"returnLink\" class=\"btn\">Return to Application</a>\n        <div class=\"error-code\">Error Code: <span id=\"errorCode\">${sanitize(\n  errorCode\n)}</span></div>\n    </div>\n</body>\n</html>`;\nconst error = createAuthEndpoint(\n  \"/error\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Displays an error page\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"text/html\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The HTML content of the error page\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const query = new URL(c.request?.url || \"\").searchParams.get(\"error\") || \"Unknown\";\n    return new Response(html(query), {\n      headers: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n);\n\nconst ok = createAuthEndpoint(\n  \"/ok\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Check if the API is working\",\n        responses: {\n          \"200\": {\n            description: \"API is working\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    ok: {\n                      type: \"boolean\",\n                      description: \"Indicates if the API is working\"\n                    }\n                  },\n                  required: [\"ok\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    return ctx.json({\n      ok: true\n    });\n  }\n);\n\nconst listUserAccounts = createAuthEndpoint(\n  \"/list-accounts\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all accounts linked to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      provider: {\n                        type: \"string\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      }\n                    },\n                    accountId: {\n                      type: \"string\"\n                    },\n                    scopes: {\n                      type: \"array\",\n                      items: {\n                        type: \"string\"\n                      }\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"provider\",\n                    \"createdAt\",\n                    \"updatedAt\",\n                    \"accountId\",\n                    \"scopes\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const accounts = await c.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    return c.json(\n      accounts.map((a) => ({\n        id: a.id,\n        provider: a.providerId,\n        createdAt: a.createdAt,\n        updatedAt: a.updatedAt,\n        accountId: a.accountId,\n        scopes: a.scope?.split(\",\") || []\n      }))\n    );\n  }\n);\nconst linkSocialAccount = createAuthEndpoint(\n  \"/link-social\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    body: z.object({\n      /**\n       * Callback URL to redirect to after the user has signed in.\n       */\n      callbackURL: z.string().meta({\n        description: \"The URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use\n       */\n      provider: SocialProviderListEnum,\n      /**\n       * ID Token for direct authentication without redirect\n       */\n      idToken: z.object({\n        token: z.string(),\n        nonce: z.string().optional(),\n        accessToken: z.string().optional(),\n        refreshToken: z.string().optional(),\n        scopes: z.array(z.string()).optional()\n      }).optional(),\n      /**\n       * Whether to allow sign up for new users\n       */\n      requestSignUp: z.boolean().optional(),\n      /**\n       * Additional scopes to request when linking the account.\n       * This is useful for requesting additional permissions when\n       * linking a social account compared to the initial authentication.\n       */\n      scopes: z.array(z.string()).meta({\n        description: \"Additional scopes to request from the provider\"\n      }).optional(),\n      /**\n       * The URL to redirect to if there is an error during the link process.\n       */\n      errorCallbackURL: z.string().meta({\n        description: \"The URL to redirect to if there is an error during the link process\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Link a social account to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    url: {\n                      type: \"string\",\n                      description: \"The authorization URL to redirect the user to\"\n                    },\n                    redirect: {\n                      type: \"boolean\",\n                      description: \"Indicates if the user should be redirected to the authorization URL\"\n                    },\n                    status: {\n                      type: \"boolean\"\n                    }\n                  },\n                  required: [\"redirect\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const linkingUserInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!linkingUserInfo || !linkingUserInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!linkingUserInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const existingAccounts = await c.context.internalAdapter.findAccounts(\n        session.user.id\n      );\n      const hasBeenLinked = existingAccounts.find(\n        (a) => a.providerId === provider.id && a.accountId === linkingUserInfo.user.id\n      );\n      if (hasBeenLinked) {\n        return c.json({\n          redirect: false,\n          url: \"\",\n          // this is for type inference\n          status: true\n        });\n      }\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(provider.id);\n      if (!isTrustedProvider && !linkingUserInfo.user.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - linking not allowed\"\n        });\n      }\n      if (linkingUserInfo.user.email !== session.user.email && c.context.options.account?.accountLinking?.allowDifferentEmails !== true) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: \"Account not linked - different emails not allowed\"\n        });\n      }\n      try {\n        await c.context.internalAdapter.createAccount(\n          {\n            userId: session.user.id,\n            providerId: provider.id,\n            accountId: linkingUserInfo.user.id.toString(),\n            accessToken: c.body.idToken.accessToken,\n            idToken: token,\n            refreshToken: c.body.idToken.refreshToken,\n            scope: c.body.idToken.scopes?.join(\",\")\n          },\n          c\n        );\n      } catch (e) {\n        throw new APIError(\"EXPECTATION_FAILED\", {\n          message: \"Account not linked - unable to create account\"\n        });\n      }\n      if (c.context.options.account?.accountLinking?.updateUserInfoOnLink === true) {\n        try {\n          await c.context.internalAdapter.updateUser(session.user.id, {\n            name: linkingUserInfo.user?.name,\n            image: linkingUserInfo.user?.image\n          });\n        } catch (e) {\n          console.warn(\"Could not update user - \" + e.toString());\n        }\n      }\n      return c.json({\n        redirect: false,\n        url: \"\",\n        // this is for type inference\n        status: true\n      });\n    }\n    const state = await generateState(c, {\n      userId: session.user.id,\n      email: session.user.email\n    });\n    const url = await provider.createAuthorizationURL({\n      state: state.state,\n      codeVerifier: state.codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: true\n    });\n  }\n);\nconst unlinkAccount = createAuthEndpoint(\n  \"/unlink-account\",\n  {\n    method: \"POST\",\n    body: z.object({\n      providerId: z.string(),\n      accountId: z.string().optional()\n    }),\n    use: [freshSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Unlink an account\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId } = ctx.body;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      ctx.context.session.user.id\n    );\n    if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_UNLINK_LAST_ACCOUNT\n      });\n    }\n    const accountExist = accounts.find(\n      (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId\n    );\n    if (!accountExist) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.ACCOUNT_NOT_FOUND\n      });\n    }\n    await ctx.context.internalAdapter.deleteAccount(accountExist.id);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst getAccessToken = createAuthEndpoint(\n  \"/get-access-token\",\n  {\n    method: \"POST\",\n    body: z.object({\n      providerId: z.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: z.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: z.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get a valid access token, doing a refresh if needed\",\n        responses: {\n          200: {\n            description: \"A Valid access token\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    try {\n      let newTokens = null;\n      const accessTokenExpired = account.accessTokenExpiresAt && new Date(account.accessTokenExpiresAt).getTime() - Date.now() < 5e3;\n      if (account.refreshToken && accessTokenExpired && provider.refreshAccessToken) {\n        newTokens = await provider.refreshAccessToken(\n          account.refreshToken\n        );\n        await ctx.context.internalAdapter.updateAccount(account.id, {\n          accessToken: await setTokenUtil(newTokens.accessToken, ctx.context),\n          accessTokenExpiresAt: newTokens.accessTokenExpiresAt,\n          refreshToken: await setTokenUtil(newTokens.refreshToken, ctx.context),\n          refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt\n        });\n      }\n      const tokens = {\n        accessToken: await decryptOAuthToken(\n          newTokens?.accessToken ?? account.accessToken ?? \"\",\n          ctx.context\n        ),\n        accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,\n        scopes: account.scope?.split(\",\") ?? [],\n        idToken: newTokens?.idToken ?? account.idToken ?? void 0\n      };\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Failed to get a valid access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst refreshToken = createAuthEndpoint(\n  \"/refresh-token\",\n  {\n    method: \"POST\",\n    body: z.object({\n      providerId: z.string().meta({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: z.string().meta({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: z.string().meta({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Refresh the access token using a refresh token\",\n        responses: {\n          200: {\n            description: \"Access token refreshed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    if (!provider.refreshAccessToken) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} does not support token refreshing.`\n      });\n    }\n    try {\n      const tokens = await provider.refreshAccessToken(\n        account.refreshToken\n      );\n      await ctx.context.internalAdapter.updateAccount(account.id, {\n        accessToken: await setTokenUtil(tokens.accessToken, ctx.context),\n        refreshToken: await setTokenUtil(tokens.refreshToken, ctx.context),\n        accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n        refreshTokenExpiresAt: tokens.refreshTokenExpiresAt\n      });\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Failed to refresh access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst accountInfo = createAuthEndpoint(\n  \"/account-info\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the account info provided by the provider\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        name: {\n                          type: \"string\"\n                        },\n                        email: {\n                          type: \"string\"\n                        },\n                        image: {\n                          type: \"string\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        }\n                      },\n                      required: [\"id\", \"emailVerified\"]\n                    },\n                    data: {\n                      type: \"object\",\n                      properties: {},\n                      additionalProperties: true\n                    }\n                  },\n                  required: [\"user\", \"data\"],\n                  additionalProperties: false\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    body: z.object({\n      accountId: z.string().meta({\n        description: \"The provider given account id for which to get the account info\"\n      })\n    })\n  },\n  async (ctx) => {\n    const account = await ctx.context.internalAdapter.findAccount(\n      ctx.body.accountId\n    );\n    if (!account || account.userId !== ctx.context.session.user.id) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === account.providerId\n    );\n    if (!provider) {\n      throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: `Provider account provider is ${account.providerId} but it is not configured`\n      });\n    }\n    const tokens = await getAccessToken({\n      ...ctx,\n      body: {\n        accountId: account.id,\n        providerId: account.providerId\n      },\n      returnHeaders: false\n    });\n    if (!tokens.accessToken) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Access token not found\"\n      });\n    }\n    const info = await provider.getUserInfo({\n      ...tokens,\n      accessToken: tokens.accessToken\n    });\n    return ctx.json(info);\n  }\n);\n\nexport { signOut as $, originCheckMiddleware as A, BASE_ERROR_CODES as B, error as C, ok as D, accountInfo as E, getAccessToken as F, refreshToken as G, HIDE_METADATA as H, unlinkAccount as I, deleteUserCallback as J, listUserAccounts as K, linkSocialAccount as L, revokeOtherSessions as M, revokeSessions as N, revokeSession as O, requestPasswordResetCallback as P, requestPasswordReset as Q, forgetPasswordCallback as R, deleteUser as S, setPassword as T, changePassword as U, changeEmail as V, sendVerificationEmail as W, verifyEmail as X, resetPassword as Y, forgetPassword as Z, signInEmail as _, validateToken as a, callbackOAuth as a0, signInSocial as a1, requestOnlySessionMiddleware as a2, socialProviderList as a3, SocialProviderListEnum as a4, apple as a5, getApplePublicKey as a6, discord as a7, dropbox as a8, facebook as a9, github as aa, linear as ab, linkedin as ac, gitlab as ad, google as ae, kick as af, microsoft as ag, notion as ah, reddit as ai, roblox as aj, spotify as ak, tiktok as al, twitch as am, twitter as an, LANG as ao, vk as ap, zoom as aq, huggingface as ar, slack as as, generateCodeChallenge as b, createAuthorizationURL as c, getOAuth2Tokens as d, encodeOAuthParameter as e, decryptOAuthToken as f, generateState as g, handleOAuthUserInfo as h, createAuthMiddleware as i, createAuthEndpoint as j, getSessionFromCtx as k, sessionMiddleware as l, getSession as m, freshSessionMiddleware as n, originCheck as o, parseState as p, optionsMiddleware as q, refreshAccessToken as r, setTokenUtil as s, socialProviders as t, sendVerificationEmailFn as u, validateAuthorizationCode as v, createEmailVerificationToken as w, wildcardMatch as x, listSessions as y, updateUser as z };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6226, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DcfNPS8q.mjs"],"sourcesContent":["import { i as isTest } from './better-auth.8zoxzg-F.mjs';\n\nfunction getIp(req, options) {\n  if (options.advanced?.ipAddress?.disableIpTracking) {\n    return null;\n  }\n  if (isTest) {\n    return \"127.0.0.1\";\n  }\n  const headers = \"headers\" in req ? req.headers : req;\n  const defaultHeaders = [\"x-forwarded-for\"];\n  const ipHeaders = options.advanced?.ipAddress?.ipAddressHeaders || defaultHeaders;\n  for (const key of ipHeaders) {\n    const value = \"get\" in headers ? headers.get(key) : headers[key];\n    if (typeof value === \"string\") {\n      const ip = value.split(\",\")[0].trim();\n      if (isValidIP(ip)) {\n        return ip;\n      }\n    }\n  }\n  return null;\n}\nfunction isValidIP(ip) {\n  const ipv4Regex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n  if (ipv4Regex.test(ip)) {\n    const parts = ip.split(\".\").map(Number);\n    return parts.every((part) => part >= 0 && part <= 255);\n  }\n  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n  return ipv6Regex.test(ip);\n}\n\nexport { getIp as g };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,MAAM,GAAG,EAAE,OAAO;IACzB,IAAI,QAAQ,QAAQ,EAAE,WAAW,mBAAmB;QAClD,OAAO;IACT;IACA,IAAI,4TAAA,CAAA,IAAM,EAAE;QACV,OAAO;IACT;IACA,MAAM,UAAU,aAAa,MAAM,IAAI,OAAO,GAAG;IACjD,MAAM,iBAAiB;QAAC;KAAkB;IAC1C,MAAM,YAAY,QAAQ,QAAQ,EAAE,WAAW,oBAAoB;IACnE,KAAK,MAAM,OAAO,UAAW;QAC3B,MAAM,QAAQ,SAAS,UAAU,QAAQ,GAAG,CAAC,OAAO,OAAO,CAAC,IAAI;QAChE,IAAI,OAAO,UAAU,UAAU;YAC7B,MAAM,KAAK,MAAM,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;YACnC,IAAI,UAAU,KAAK;gBACjB,OAAO;YACT;QACF;IACF;IACA,OAAO;AACT;AACA,SAAS,UAAU,EAAE;IACnB,MAAM,YAAY;IAClB,IAAI,UAAU,IAAI,CAAC,KAAK;QACtB,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC;QAChC,OAAO,MAAM,KAAK,CAAC,CAAC,OAAS,QAAQ,KAAK,QAAQ;IACpD;IACA,MAAM,YAAY;IAClB,OAAO,UAAU,IAAI,CAAC;AACxB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6268, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs"],"sourcesContent":["const getAuthTables = (options) => {\n  const pluginSchema = options.plugins?.reduce(\n    (acc, plugin) => {\n      const schema = plugin.schema;\n      if (!schema) return acc;\n      for (const [key, value] of Object.entries(schema)) {\n        acc[key] = {\n          fields: {\n            ...acc[key]?.fields,\n            ...value.fields\n          },\n          modelName: value.modelName || key\n        };\n      }\n      return acc;\n    },\n    {}\n  );\n  const shouldAddRateLimitTable = options.rateLimit?.storage === \"database\";\n  const rateLimitTable = {\n    rateLimit: {\n      modelName: options.rateLimit?.modelName || \"rateLimit\",\n      fields: {\n        key: {\n          type: \"string\",\n          fieldName: options.rateLimit?.fields?.key || \"key\"\n        },\n        count: {\n          type: \"number\",\n          fieldName: options.rateLimit?.fields?.count || \"count\"\n        },\n        lastRequest: {\n          type: \"number\",\n          bigint: true,\n          fieldName: options.rateLimit?.fields?.lastRequest || \"lastRequest\"\n        }\n      }\n    }\n  };\n  const { user, session, account, ...pluginTables } = pluginSchema || {};\n  const sessionTable = {\n    session: {\n      modelName: options.session?.modelName || \"session\",\n      fields: {\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.expiresAt || \"expiresAt\"\n        },\n        token: {\n          type: \"string\",\n          required: true,\n          fieldName: options.session?.fields?.token || \"token\",\n          unique: true\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.updatedAt || \"updatedAt\"\n        },\n        ipAddress: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.ipAddress || \"ipAddress\"\n        },\n        userAgent: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.userAgent || \"userAgent\"\n        },\n        userId: {\n          type: \"string\",\n          fieldName: options.session?.fields?.userId || \"userId\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true\n        },\n        ...session?.fields,\n        ...options.session?.additionalFields\n      },\n      order: 2\n    }\n  };\n  return {\n    user: {\n      modelName: options.user?.modelName || \"user\",\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options.user?.fields?.name || \"name\",\n          sortable: true\n        },\n        email: {\n          type: \"string\",\n          unique: true,\n          required: true,\n          fieldName: options.user?.fields?.email || \"email\",\n          sortable: true\n        },\n        emailVerified: {\n          type: \"boolean\",\n          defaultValue: () => false,\n          required: true,\n          fieldName: options.user?.fields?.emailVerified || \"emailVerified\"\n        },\n        image: {\n          type: \"string\",\n          required: false,\n          fieldName: options.user?.fields?.image || \"image\"\n        },\n        createdAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...user?.fields,\n        ...options.user?.additionalFields\n      },\n      order: 1\n    },\n    //only add session table if it's not stored in secondary storage\n    ...!options.secondaryStorage || options.session?.storeSessionInDatabase ? sessionTable : {},\n    account: {\n      modelName: options.account?.modelName || \"account\",\n      fields: {\n        accountId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.accountId || \"accountId\"\n        },\n        providerId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.providerId || \"providerId\"\n        },\n        userId: {\n          type: \"string\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true,\n          fieldName: options.account?.fields?.userId || \"userId\"\n        },\n        accessToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.accessToken || \"accessToken\"\n        },\n        refreshToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.refreshToken || \"refreshToken\"\n        },\n        idToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.idToken || \"idToken\"\n        },\n        accessTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"accessTokenExpiresAt\"\n        },\n        refreshTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"refreshTokenExpiresAt\"\n        },\n        scope: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.scope || \"scope\"\n        },\n        password: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.password || \"password\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...account?.fields\n      },\n      order: 3\n    },\n    verification: {\n      modelName: options.verification?.modelName || \"verification\",\n      fields: {\n        identifier: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.identifier || \"identifier\"\n        },\n        value: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.value || \"value\"\n        },\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.verification?.fields?.expiresAt || \"expiresAt\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.updatedAt || \"updatedAt\"\n        }\n      },\n      order: 4\n    },\n    ...pluginTables,\n    ...shouldAddRateLimitTable ? rateLimitTable : {}\n  };\n};\n\nexport { getAuthTables as g };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 6520, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.gBl3F_xa.mjs"],"sourcesContent":["import { s as safeJSONParse } from './better-auth.tB5eU6EY.mjs';\nimport { g as getAuthTables } from './better-auth.DORkW_Ge.mjs';\nimport { a as logger, g as generateId } from './better-auth.DBGfIDnh.mjs';\nimport 'zod/v4';\nimport 'better-call';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport '@better-auth/utils/base64';\nimport 'jose';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport './better-auth.B4Qoxdgc.mjs';\n\nfunction withApplyDefault(value, field, action) {\n  if (action === \"update\") {\n    return value;\n  }\n  if (value === void 0 || value === null) {\n    if (field.defaultValue !== void 0) {\n      if (typeof field.defaultValue === \"function\") {\n        return field.defaultValue();\n      }\n      return field.defaultValue;\n    }\n  }\n  return value;\n}\n\nlet debugLogs = [];\nlet transactionId = -1;\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    yellow: \"\\x1B[33m\",\n    magenta: \"\\x1B[35m\"},\n  bg: {\n    black: \"\\x1B[40m\"}\n};\nconst createAdapter = ({\n  adapter,\n  config: cfg\n}) => (options) => {\n  const config = {\n    ...cfg,\n    supportsBooleans: cfg.supportsBooleans ?? true,\n    supportsDates: cfg.supportsDates ?? true,\n    supportsJSON: cfg.supportsJSON ?? false,\n    adapterName: cfg.adapterName ?? cfg.adapterId,\n    supportsNumericIds: cfg.supportsNumericIds ?? true\n  };\n  if (options.advanced?.database?.useNumberId === true && config.supportsNumericIds === false) {\n    throw new Error(\n      `[${config.adapterName}] Your database or database adapter does not support numeric ids. Please disable \"useNumberId\" in your config.`\n    );\n  }\n  const schema = getAuthTables(options);\n  const getDefaultFieldName = ({\n    field,\n    model: unsafe_model\n  }) => {\n    if (field === \"id\" || field === \"_id\") {\n      return \"id\";\n    }\n    const model = getDefaultModelName(unsafe_model);\n    let f = schema[model]?.fields[field];\n    if (!f) {\n      f = Object.values(schema[model]?.fields).find(\n        (f2) => f2.fieldName === field\n      );\n    }\n    if (!f) {\n      debugLog(`Field ${field} not found in model ${model}`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Field ${field} not found in model ${model}`);\n    }\n    return field;\n  };\n  const getDefaultModelName = (model) => {\n    if (config.usePlural && model.charAt(model.length - 1) === \"s\") {\n      let pluralessModel = model.slice(0, -1);\n      let m2 = schema[pluralessModel] ? pluralessModel : void 0;\n      if (!m2) {\n        m2 = Object.entries(schema).find(\n          ([_, f]) => f.modelName === pluralessModel\n        )?.[0];\n      }\n      if (m2) {\n        return m2;\n      }\n    }\n    let m = schema[model] ? model : void 0;\n    if (!m) {\n      m = Object.entries(schema).find(([_, f]) => f.modelName === model)?.[0];\n    }\n    if (!m) {\n      debugLog(`Model \"${model}\" not found in schema`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Model \"${model}\" not found in schema`);\n    }\n    return m;\n  };\n  const getModelName = (model) => {\n    const defaultModelKey = getDefaultModelName(model);\n    const usePlural = config && config.usePlural;\n    const useCustomModelName = schema && schema[defaultModelKey] && schema[defaultModelKey].modelName !== model;\n    if (useCustomModelName) {\n      return usePlural ? `${schema[defaultModelKey].modelName}s` : schema[defaultModelKey].modelName;\n    }\n    return usePlural ? `${model}s` : model;\n  };\n  function getFieldName({\n    model: model_name,\n    field: field_name\n  }) {\n    const model = getDefaultModelName(model_name);\n    const field = getDefaultFieldName({ model, field: field_name });\n    return schema[model]?.fields[field]?.fieldName || field;\n  }\n  const debugLog = (...args) => {\n    if (config.debugLogs === true || typeof config.debugLogs === \"object\") {\n      if (typeof config.debugLogs === \"object\" && \"isRunningAdapterTests\" in config.debugLogs) {\n        if (config.debugLogs.isRunningAdapterTests) {\n          args.shift();\n          debugLogs.push(args);\n        }\n        return;\n      }\n      if (typeof config.debugLogs === \"object\" && config.debugLogs.logCondition && !config.debugLogs.logCondition?.()) {\n        return;\n      }\n      if (typeof args[0] === \"object\" && \"method\" in args[0]) {\n        const method = args.shift().method;\n        if (typeof config.debugLogs === \"object\") {\n          if (method === \"create\" && !config.debugLogs.create) {\n            return;\n          } else if (method === \"update\" && !config.debugLogs.update) {\n            return;\n          } else if (method === \"updateMany\" && !config.debugLogs.updateMany) {\n            return;\n          } else if (method === \"findOne\" && !config.debugLogs.findOne) {\n            return;\n          } else if (method === \"findMany\" && !config.debugLogs.findMany) {\n            return;\n          } else if (method === \"delete\" && !config.debugLogs.delete) {\n            return;\n          } else if (method === \"deleteMany\" && !config.debugLogs.deleteMany) {\n            return;\n          } else if (method === \"count\" && !config.debugLogs.count) {\n            return;\n          }\n        }\n        logger.info(`[${config.adapterName}]`, ...args);\n      } else {\n        logger.info(`[${config.adapterName}]`, ...args);\n      }\n    }\n  };\n  const idField = ({\n    customModelName,\n    forceAllowId\n  }) => {\n    const shouldGenerateId = !config.disableIdGeneration && !options.advanced?.database?.useNumberId && !forceAllowId;\n    const model = getDefaultModelName(customModelName ?? \"id\");\n    return {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\",\n      required: shouldGenerateId ? true : false,\n      ...shouldGenerateId ? {\n        defaultValue() {\n          if (config.disableIdGeneration) return void 0;\n          const useNumberId = options.advanced?.database?.useNumberId;\n          let generateId$1 = options.advanced?.database?.generateId;\n          if (options.advanced?.generateId !== void 0) {\n            logger.warn(\n              \"Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases.\"\n            );\n            generateId$1 = options.advanced?.generateId;\n          }\n          if (generateId$1 === false || useNumberId) return void 0;\n          if (generateId$1) {\n            return generateId$1({\n              model\n            });\n          }\n          if (config.customIdGenerator) {\n            return config.customIdGenerator({ model });\n          }\n          return generateId();\n        }\n      } : {}\n    };\n  };\n  const getFieldAttributes = ({\n    model,\n    field\n  }) => {\n    const defaultModelName = getDefaultModelName(model);\n    const defaultFieldName = getDefaultFieldName({\n      field,\n      model\n    });\n    const fields = schema[defaultModelName].fields;\n    fields.id = idField({ customModelName: defaultModelName });\n    return fields[defaultFieldName];\n  };\n  const adapterInstance = adapter({\n    options,\n    schema,\n    debugLog,\n    getFieldName,\n    getModelName,\n    getDefaultModelName,\n    getDefaultFieldName,\n    getFieldAttributes\n  });\n  const transformInput = async (data, unsafe_model, action, forceAllowId) => {\n    const transformedData = {};\n    const fields = schema[unsafe_model].fields;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    if (!config.disableIdGeneration && !options.advanced?.database?.useNumberId) {\n      fields.id = idField({\n        customModelName: unsafe_model,\n        forceAllowId: forceAllowId && \"id\" in data\n      });\n    }\n    for (const field in fields) {\n      const value = data[field];\n      const fieldAttributes = fields[field];\n      let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;\n      if (value === void 0 && (!fieldAttributes.defaultValue && !fieldAttributes.transform?.input || action === \"update\")) {\n        continue;\n      }\n      let newValue = withApplyDefault(value, fieldAttributes, action);\n      if (fieldAttributes.transform?.input) {\n        newValue = await fieldAttributes.transform.input(newValue);\n      }\n      if (fieldAttributes.references?.field === \"id\" && options.advanced?.database?.useNumberId) {\n        if (Array.isArray(newValue)) {\n          newValue = newValue.map(Number);\n        } else {\n          newValue = Number(newValue);\n        }\n      } else if (config.supportsJSON === false && typeof newValue === \"object\" && //@ts-expect-error -Future proofing\n      fieldAttributes.type === \"json\") {\n        newValue = JSON.stringify(newValue);\n      } else if (config.supportsDates === false && newValue instanceof Date && fieldAttributes.type === \"date\") {\n        newValue = newValue.toISOString();\n      } else if (config.supportsBooleans === false && typeof newValue === \"boolean\") {\n        newValue = newValue ? 1 : 0;\n      }\n      if (config.customTransformInput) {\n        newValue = config.customTransformInput({\n          data: newValue,\n          action,\n          field: newFieldName,\n          fieldAttributes,\n          model: unsafe_model,\n          schema,\n          options\n        });\n      }\n      transformedData[newFieldName] = newValue;\n    }\n    return transformedData;\n  };\n  const transformOutput = async (data, unsafe_model, select = []) => {\n    if (!data) return null;\n    const newMappedKeys = config.mapKeysTransformOutput ?? {};\n    const transformedData = {};\n    const tableSchema = schema[unsafe_model].fields;\n    const idKey = Object.entries(newMappedKeys).find(\n      ([_, v]) => v === \"id\"\n    )?.[0];\n    tableSchema[idKey ?? \"id\"] = {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\"\n    };\n    for (const key in tableSchema) {\n      if (select.length && !select.includes(key)) {\n        continue;\n      }\n      const field = tableSchema[key];\n      if (field) {\n        const originalKey = field.fieldName || key;\n        let newValue = data[Object.entries(newMappedKeys).find(\n          ([_, v]) => v === originalKey\n        )?.[0] || originalKey];\n        if (field.transform?.output) {\n          newValue = await field.transform.output(newValue);\n        }\n        let newFieldName = newMappedKeys[key] || key;\n        if (originalKey === \"id\" || field.references?.field === \"id\") {\n          if (typeof newValue !== \"undefined\") newValue = String(newValue);\n        } else if (config.supportsJSON === false && typeof newValue === \"string\" && //@ts-expect-error - Future proofing\n        field.type === \"json\") {\n          newValue = safeJSONParse(newValue);\n        } else if (config.supportsDates === false && typeof newValue === \"string\" && field.type === \"date\") {\n          newValue = new Date(newValue);\n        } else if (config.supportsBooleans === false && typeof newValue === \"number\" && field.type === \"boolean\") {\n          newValue = newValue === 1;\n        }\n        if (config.customTransformOutput) {\n          newValue = config.customTransformOutput({\n            data: newValue,\n            field: newFieldName,\n            fieldAttributes: field,\n            select,\n            model: unsafe_model,\n            schema,\n            options\n          });\n        }\n        transformedData[newFieldName] = newValue;\n      }\n    }\n    return transformedData;\n  };\n  const transformWhereClause = ({\n    model,\n    where\n  }) => {\n    if (!where) return void 0;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    return where.map((w) => {\n      const {\n        field: unsafe_field,\n        value,\n        operator = \"eq\",\n        connector = \"AND\"\n      } = w;\n      if (operator === \"in\") {\n        if (!Array.isArray(value)) {\n          throw new Error(\"Value must be an array\");\n        }\n      }\n      const defaultModelName = getDefaultModelName(model);\n      const defaultFieldName = getDefaultFieldName({\n        field: unsafe_field,\n        model\n      });\n      const fieldName = newMappedKeys[defaultFieldName] || getFieldName({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      const fieldAttr = getFieldAttributes({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      if (defaultFieldName === \"id\" || fieldAttr.references?.field === \"id\") {\n        if (options.advanced?.database?.useNumberId) {\n          if (Array.isArray(value)) {\n            return {\n              operator,\n              connector,\n              field: fieldName,\n              value: value.map(Number)\n            };\n          }\n          return {\n            operator,\n            connector,\n            field: fieldName,\n            value: Number(value)\n          };\n        }\n      }\n      return {\n        operator,\n        connector,\n        field: fieldName,\n        value\n      };\n    });\n  };\n  return {\n    create: async ({\n      data: unsafeData,\n      model: unsafeModel,\n      select,\n      forceAllowId = false\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      if (\"id\" in unsafeData && !forceAllowId) {\n        logger.warn(\n          `[${config.adapterName}] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the \\`forceAllowId\\` parameter. The id will be ignored.`\n        );\n        const err = new Error();\n        const stack = err.stack?.split(\"\\n\").filter((_, i) => i !== 1).join(\"\\n\").replace(\"Error:\", \"Create method with `id` being called at:\");\n        console.log(stack);\n        unsafeData.id = void 0;\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"create\",\n        forceAllowId\n      );\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.create({ data, model });\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"DB Result\")}:`,\n        { model, res }\n      );\n      const transformed = await transformOutput(res, unsafeModel, select);\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    update: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"update\"\n      );\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.update({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(res, unsafeModel);\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    updateMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(unsafeData, unsafeModel, \"update\");\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const updatedCount = await adapterInstance.updateMany({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: updatedCount }\n      );\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: updatedCount }\n      );\n      return updatedCount;\n    },\n    findOne: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      select\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findOne\")}:`,\n        { model, where, select }\n      );\n      const res = await adapterInstance.findOne({\n        model,\n        where,\n        select\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(\n        res,\n        unsafeModel,\n        select\n      );\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    findMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      limit: unsafeLimit,\n      sortBy,\n      offset\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const limit = unsafeLimit ?? options.advanced?.database?.defaultFindManyLimit ?? 100;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findMany\")}:`,\n        { model, where, limit, sortBy, offset }\n      );\n      const res = await adapterInstance.findMany({\n        model,\n        where,\n        limit,\n        sortBy,\n        offset\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await Promise.all(\n        res.map(async (r) => await transformOutput(r, unsafeModel))\n      );\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    delete: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"delete\")}:`,\n        { model, where }\n      );\n      await adapterInstance.delete({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"delete\")} ${formatAction(\"DB Result\")}:`,\n        { model }\n      );\n    },\n    deleteMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DeleteMany\")}:`,\n        { model, where }\n      );\n      const res = await adapterInstance.deleteMany({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      return res;\n    },\n    count: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          where\n        }\n      );\n      const res = await adapterInstance.count({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          data: res\n        }\n      );\n      return res;\n    },\n    createSchema: adapterInstance.createSchema ? async (_, file) => {\n      const tables = getAuthTables(options);\n      if (options.secondaryStorage && !options.session?.storeSessionInDatabase) {\n        delete tables.session;\n      }\n      if (options.rateLimit && options.rateLimit.storage === \"database\" && // rate-limit will default to enabled in production,\n      // and given storage is database, it will try to use the rate-limit table,\n      // so we should make sure to generate rate-limit table schema\n      (typeof options.rateLimit.enabled === \"undefined\" || // and of course if they forcefully set to true, then they want rate-limit,\n      // thus we should also generate rate-limit table schema\n      options.rateLimit.enabled === true)) {\n        tables.ratelimit = {\n          modelName: options.rateLimit.modelName ?? \"ratelimit\",\n          fields: {\n            key: {\n              type: \"string\",\n              unique: true,\n              required: true,\n              fieldName: options.rateLimit.fields?.key ?? \"key\"\n            },\n            count: {\n              type: \"number\",\n              required: true,\n              fieldName: options.rateLimit.fields?.count ?? \"count\"\n            },\n            lastRequest: {\n              type: \"number\",\n              required: true,\n              bigint: true,\n              defaultValue: () => Date.now(),\n              fieldName: options.rateLimit.fields?.lastRequest ?? \"lastRequest\"\n            }\n          }\n        };\n      }\n      return adapterInstance.createSchema({ file, tables });\n    } : void 0,\n    options: {\n      adapterConfig: config,\n      ...adapterInstance.options ?? {}\n    },\n    id: config.adapterId,\n    // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.\n    // This would then be used during our adapter-tests to help print debug logs if a test fails.\n    //@ts-expect-error - ^^\n    ...config.debugLogs?.isRunningAdapterTests ? {\n      adapterTestDebugLogs: {\n        resetDebugLogs() {\n          debugLogs = [];\n        },\n        printDebugLogs() {\n          const separator = `\\u2500`.repeat(80);\n          let log = debugLogs.reverse().map((log2) => {\n            log2[0] = `\n${log2[0]}`;\n            return [...log2, \"\\n\"];\n          }).reduce(\n            (prev, curr) => {\n              return [...curr, ...prev];\n            },\n            [`\n${separator}`]\n          );\n          console.log(...log);\n        }\n      }\n    } : {}\n  };\n};\nfunction formatTransactionId(transactionId2) {\n  return `${colors.fg.magenta}#${transactionId2}${colors.reset}`;\n}\nfunction formatStep(step, total) {\n  return `${colors.bg.black}${colors.fg.yellow}[${step}/${total}]${colors.reset}`;\n}\nfunction formatMethod(method) {\n  return `${colors.bright}${method}${colors.reset}`;\n}\nfunction formatAction(action) {\n  return `${colors.dim}(${action})${colors.reset}`;\n}\n\nexport { createAdapter as c };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7252, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DwzM-9N1.mjs"],"sourcesContent":["import { Kysely, SqliteDialect, MysqlDialect, PostgresDialect, MssqlDialect } from 'kysely';\nimport { c as createAdapter } from './better-auth.gBl3F_xa.mjs';\n\nfunction getDatabaseType(db) {\n  if (!db) {\n    return null;\n  }\n  if (\"dialect\" in db) {\n    return getDatabaseType(db.dialect);\n  }\n  if (\"createDriver\" in db) {\n    if (db instanceof SqliteDialect) {\n      return \"sqlite\";\n    }\n    if (db instanceof MysqlDialect) {\n      return \"mysql\";\n    }\n    if (db instanceof PostgresDialect) {\n      return \"postgres\";\n    }\n    if (db instanceof MssqlDialect) {\n      return \"mssql\";\n    }\n  }\n  if (\"aggregate\" in db) {\n    return \"sqlite\";\n  }\n  if (\"getConnection\" in db) {\n    return \"mysql\";\n  }\n  if (\"connect\" in db) {\n    return \"postgres\";\n  }\n  if (\"fileControl\" in db) {\n    return \"sqlite\";\n  }\n  return null;\n}\nconst createKyselyAdapter = async (config) => {\n  const db = config.database;\n  if (!db) {\n    return {\n      kysely: null,\n      databaseType: null\n    };\n  }\n  if (\"db\" in db) {\n    return {\n      kysely: db.db,\n      databaseType: db.type\n    };\n  }\n  if (\"dialect\" in db) {\n    return {\n      kysely: new Kysely({ dialect: db.dialect }),\n      databaseType: db.type\n    };\n  }\n  let dialect = void 0;\n  const databaseType = getDatabaseType(db);\n  if (\"createDriver\" in db) {\n    dialect = db;\n  }\n  if (\"aggregate\" in db) {\n    dialect = new SqliteDialect({\n      database: db\n    });\n  }\n  if (\"getConnection\" in db) {\n    dialect = new MysqlDialect(db);\n  }\n  if (\"connect\" in db) {\n    dialect = new PostgresDialect({\n      pool: db\n    });\n  }\n  if (\"fileControl\" in db) {\n    const { BunSqliteDialect } = await import('../chunks/bun-sqlite-dialect.mjs');\n    dialect = new BunSqliteDialect({\n      database: db\n    });\n  }\n  return {\n    kysely: dialect ? new Kysely({ dialect }) : null,\n    databaseType\n  };\n};\n\nconst kyselyAdapter = (db, config) => createAdapter({\n  config: {\n    adapterId: \"kysely\",\n    adapterName: \"Kysely Adapter\",\n    usePlural: config?.usePlural,\n    debugLogs: config?.debugLogs,\n    supportsBooleans: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsDates: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsJSON: false\n  },\n  adapter: ({ getFieldName, schema }) => {\n    const withReturning = async (values, builder, model, where) => {\n      let res;\n      if (config?.type === \"mysql\") {\n        await builder.execute();\n        const field = values.id ? \"id\" : where.length > 0 && where[0].field ? where[0].field : \"id\";\n        if (!values.id && where.length === 0) {\n          res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").limit(1).executeTakeFirst();\n          return res;\n        }\n        const value = values[field] || where[0].value;\n        res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").where(getFieldName({ model, field }), \"=\", value).limit(1).executeTakeFirst();\n        return res;\n      }\n      if (config?.type === \"mssql\") {\n        res = await builder.outputAll(\"inserted\").executeTakeFirst();\n        return res;\n      }\n      res = await builder.returningAll().executeTakeFirst();\n      return res;\n    };\n    function transformValueToDB(value, model, field) {\n      if (field === \"id\") {\n        return value;\n      }\n      const { type = \"sqlite\" } = config || {};\n      let f = schema[model]?.fields[field];\n      if (!f) {\n        f = Object.values(schema).find((f2) => f2.modelName === model);\n      }\n      if (f.type === \"boolean\" && (type === \"sqlite\" || type === \"mssql\") && value !== null && value !== void 0) {\n        return value ? 1 : 0;\n      }\n      if (f.type === \"date\" && value && value instanceof Date) {\n        return type === \"sqlite\" ? value.toISOString() : value;\n      }\n      return value;\n    }\n    function convertWhereClause(model, w) {\n      if (!w)\n        return {\n          and: null,\n          or: null\n        };\n      const conditions = {\n        and: [],\n        or: []\n      };\n      w.forEach((condition) => {\n        let {\n          field: _field,\n          value,\n          operator = \"=\",\n          connector = \"AND\"\n        } = condition;\n        const field = getFieldName({ model, field: _field });\n        value = transformValueToDB(value, model, _field);\n        const expr = (eb) => {\n          if (operator.toLowerCase() === \"in\") {\n            return eb(field, \"in\", Array.isArray(value) ? value : [value]);\n          }\n          if (operator === \"contains\") {\n            return eb(field, \"like\", `%${value}%`);\n          }\n          if (operator === \"starts_with\") {\n            return eb(field, \"like\", `${value}%`);\n          }\n          if (operator === \"ends_with\") {\n            return eb(field, \"like\", `%${value}`);\n          }\n          if (operator === \"eq\") {\n            return eb(field, \"=\", value);\n          }\n          if (operator === \"ne\") {\n            return eb(field, \"<>\", value);\n          }\n          if (operator === \"gt\") {\n            return eb(field, \">\", value);\n          }\n          if (operator === \"gte\") {\n            return eb(field, \">=\", value);\n          }\n          if (operator === \"lt\") {\n            return eb(field, \"<\", value);\n          }\n          if (operator === \"lte\") {\n            return eb(field, \"<=\", value);\n          }\n          return eb(field, operator, value);\n        };\n        if (connector === \"OR\") {\n          conditions.or.push(expr);\n        } else {\n          conditions.and.push(expr);\n        }\n      });\n      return {\n        and: conditions.and.length ? conditions.and : null,\n        or: conditions.or.length ? conditions.or : null\n      };\n    }\n    return {\n      async create({ data, model }) {\n        const builder = db.insertInto(model).values(data);\n        return await withReturning(data, builder, model, []);\n      },\n      async findOne({ model, where, select }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).selectAll();\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.executeTakeFirst();\n        if (!res) return null;\n        return res;\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        if (config?.type === \"mssql\") {\n          if (!offset) {\n            query = query.top(limit || 100);\n          }\n        } else {\n          query = query.limit(limit || 100);\n        }\n        if (sortBy) {\n          query = query.orderBy(\n            getFieldName({ model, field: sortBy.field }),\n            sortBy.direction\n          );\n        }\n        if (offset) {\n          if (config?.type === \"mssql\") {\n            if (!sortBy) {\n              query = query.orderBy(getFieldName({ model, field: \"id\" }));\n            }\n            query = query.offset(offset).fetch(limit || 100);\n          } else {\n            query = query.offset(offset);\n          }\n        }\n        const res = await query.selectAll().execute();\n        if (!res) return [];\n        return res;\n      },\n      async update({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return await withReturning(values, query, model, where);\n      },\n      async updateMany({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res.length;\n      },\n      async count({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).select(db.fn.count(\"id\").as(\"count\"));\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res[0].count;\n      },\n      async delete({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        await query.execute();\n      },\n      async deleteMany({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return (await query.execute()).length;\n      },\n      options: config\n    };\n  }\n});\n\nexport { createKyselyAdapter as c, kyselyAdapter as k };\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA,SAAS,gBAAgB,EAAE;IACzB,IAAI,CAAC,IAAI;QACP,OAAO;IACT;IACA,IAAI,aAAa,IAAI;QACnB,OAAO,gBAAgB,GAAG,OAAO;IACnC;IACA,IAAI,kBAAkB,IAAI;QACxB,IAAI,cAAc,qOAAA,CAAA,gBAAa,EAAE;YAC/B,OAAO;QACT;QACA,IAAI,cAAc,mOAAA,CAAA,eAAY,EAAE;YAC9B,OAAO;QACT;QACA,IAAI,cAAc,yOAAA,CAAA,kBAAe,EAAE;YACjC,OAAO;QACT;QACA,IAAI,cAAc,mOAAA,CAAA,eAAY,EAAE;YAC9B,OAAO;QACT;IACF;IACA,IAAI,eAAe,IAAI;QACrB,OAAO;IACT;IACA,IAAI,mBAAmB,IAAI;QACzB,OAAO;IACT;IACA,IAAI,aAAa,IAAI;QACnB,OAAO;IACT;IACA,IAAI,iBAAiB,IAAI;QACvB,OAAO;IACT;IACA,OAAO;AACT;AACA,MAAM,sBAAsB,OAAO;IACjC,MAAM,KAAK,OAAO,QAAQ;IAC1B,IAAI,CAAC,IAAI;QACP,OAAO;YACL,QAAQ;YACR,cAAc;QAChB;IACF;IACA,IAAI,QAAQ,IAAI;QACd,OAAO;YACL,QAAQ,GAAG,EAAE;YACb,cAAc,GAAG,IAAI;QACvB;IACF;IACA,IAAI,aAAa,IAAI;QACnB,OAAO;YACL,QAAQ,IAAI,qMAAA,CAAA,SAAM,CAAC;gBAAE,SAAS,GAAG,OAAO;YAAC;YACzC,cAAc,GAAG,IAAI;QACvB;IACF;IACA,IAAI,UAAU,KAAK;IACnB,MAAM,eAAe,gBAAgB;IACrC,IAAI,kBAAkB,IAAI;QACxB,UAAU;IACZ;IACA,IAAI,eAAe,IAAI;QACrB,UAAU,IAAI,qOAAA,CAAA,gBAAa,CAAC;YAC1B,UAAU;QACZ;IACF;IACA,IAAI,mBAAmB,IAAI;QACzB,UAAU,IAAI,mOAAA,CAAA,eAAY,CAAC;IAC7B;IACA,IAAI,aAAa,IAAI;QACnB,UAAU,IAAI,yOAAA,CAAA,kBAAe,CAAC;YAC5B,MAAM;QACR;IACF;IACA,IAAI,iBAAiB,IAAI;QACvB,MAAM,EAAE,gBAAgB,EAAE,GAAG;QAC7B,UAAU,IAAI,iBAAiB;YAC7B,UAAU;QACZ;IACF;IACA,OAAO;QACL,QAAQ,UAAU,IAAI,qMAAA,CAAA,SAAM,CAAC;YAAE;QAAQ,KAAK;QAC5C;IACF;AACF;AAEA,MAAM,gBAAgB,CAAC,IAAI,SAAW,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;QAClD,QAAQ;YACN,WAAW;YACX,aAAa;YACb,WAAW,QAAQ;YACnB,WAAW,QAAQ;YACnB,kBAAkB,QAAQ,SAAS,YAAY,QAAQ,SAAS,WAAW,CAAC,QAAQ,OAAO,QAAQ;YACnG,eAAe,QAAQ,SAAS,YAAY,QAAQ,SAAS,WAAW,CAAC,QAAQ,OAAO,QAAQ;YAChG,cAAc;QAChB;QACA,SAAS,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE;YAChC,MAAM,gBAAgB,OAAO,QAAQ,SAAS,OAAO;gBACnD,IAAI;gBACJ,IAAI,QAAQ,SAAS,SAAS;oBAC5B,MAAM,QAAQ,OAAO;oBACrB,MAAM,QAAQ,OAAO,EAAE,GAAG,OAAO,MAAM,MAAM,GAAG,KAAK,KAAK,CAAC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE,CAAC,KAAK,GAAG;oBACvF,IAAI,CAAC,OAAO,EAAE,IAAI,MAAM,MAAM,KAAK,GAAG;wBACpC,MAAM,MAAM,GAAG,UAAU,CAAC,OAAO,SAAS,GAAG,OAAO,CAAC,aAAa;4BAAE;4BAAO;wBAAM,IAAI,QAAQ,KAAK,CAAC,GAAG,gBAAgB;wBACtH,OAAO;oBACT;oBACA,MAAM,QAAQ,MAAM,CAAC,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,KAAK;oBAC7C,MAAM,MAAM,GAAG,UAAU,CAAC,OAAO,SAAS,GAAG,OAAO,CAAC,aAAa;wBAAE;wBAAO;oBAAM,IAAI,QAAQ,KAAK,CAAC,aAAa;wBAAE;wBAAO;oBAAM,IAAI,KAAK,OAAO,KAAK,CAAC,GAAG,gBAAgB;oBACxK,OAAO;gBACT;gBACA,IAAI,QAAQ,SAAS,SAAS;oBAC5B,MAAM,MAAM,QAAQ,SAAS,CAAC,YAAY,gBAAgB;oBAC1D,OAAO;gBACT;gBACA,MAAM,MAAM,QAAQ,YAAY,GAAG,gBAAgB;gBACnD,OAAO;YACT;YACA,SAAS,mBAAmB,KAAK,EAAE,KAAK,EAAE,KAAK;gBAC7C,IAAI,UAAU,MAAM;oBAClB,OAAO;gBACT;gBACA,MAAM,EAAE,OAAO,QAAQ,EAAE,GAAG,UAAU,CAAC;gBACvC,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM;gBACpC,IAAI,CAAC,GAAG;oBACN,IAAI,OAAO,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC,KAAO,GAAG,SAAS,KAAK;gBAC1D;gBACA,IAAI,EAAE,IAAI,KAAK,aAAa,CAAC,SAAS,YAAY,SAAS,OAAO,KAAK,UAAU,QAAQ,UAAU,KAAK,GAAG;oBACzG,OAAO,QAAQ,IAAI;gBACrB;gBACA,IAAI,EAAE,IAAI,KAAK,UAAU,SAAS,iBAAiB,MAAM;oBACvD,OAAO,SAAS,WAAW,MAAM,WAAW,KAAK;gBACnD;gBACA,OAAO;YACT;YACA,SAAS,mBAAmB,KAAK,EAAE,CAAC;gBAClC,IAAI,CAAC,GACH,OAAO;oBACL,KAAK;oBACL,IAAI;gBACN;gBACF,MAAM,aAAa;oBACjB,KAAK,EAAE;oBACP,IAAI,EAAE;gBACR;gBACA,EAAE,OAAO,CAAC,CAAC;oBACT,IAAI,EACF,OAAO,MAAM,EACb,KAAK,EACL,WAAW,GAAG,EACd,YAAY,KAAK,EAClB,GAAG;oBACJ,MAAM,QAAQ,aAAa;wBAAE;wBAAO,OAAO;oBAAO;oBAClD,QAAQ,mBAAmB,OAAO,OAAO;oBACzC,MAAM,OAAO,CAAC;wBACZ,IAAI,SAAS,WAAW,OAAO,MAAM;4BACnC,OAAO,GAAG,OAAO,MAAM,MAAM,OAAO,CAAC,SAAS,QAAQ;gCAAC;6BAAM;wBAC/D;wBACA,IAAI,aAAa,YAAY;4BAC3B,OAAO,GAAG,OAAO,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;wBACvC;wBACA,IAAI,aAAa,eAAe;4BAC9B,OAAO,GAAG,OAAO,QAAQ,GAAG,MAAM,CAAC,CAAC;wBACtC;wBACA,IAAI,aAAa,aAAa;4BAC5B,OAAO,GAAG,OAAO,QAAQ,CAAC,CAAC,EAAE,OAAO;wBACtC;wBACA,IAAI,aAAa,MAAM;4BACrB,OAAO,GAAG,OAAO,KAAK;wBACxB;wBACA,IAAI,aAAa,MAAM;4BACrB,OAAO,GAAG,OAAO,MAAM;wBACzB;wBACA,IAAI,aAAa,MAAM;4BACrB,OAAO,GAAG,OAAO,KAAK;wBACxB;wBACA,IAAI,aAAa,OAAO;4BACtB,OAAO,GAAG,OAAO,MAAM;wBACzB;wBACA,IAAI,aAAa,MAAM;4BACrB,OAAO,GAAG,OAAO,KAAK;wBACxB;wBACA,IAAI,aAAa,OAAO;4BACtB,OAAO,GAAG,OAAO,MAAM;wBACzB;wBACA,OAAO,GAAG,OAAO,UAAU;oBAC7B;oBACA,IAAI,cAAc,MAAM;wBACtB,WAAW,EAAE,CAAC,IAAI,CAAC;oBACrB,OAAO;wBACL,WAAW,GAAG,CAAC,IAAI,CAAC;oBACtB;gBACF;gBACA,OAAO;oBACL,KAAK,WAAW,GAAG,CAAC,MAAM,GAAG,WAAW,GAAG,GAAG;oBAC9C,IAAI,WAAW,EAAE,CAAC,MAAM,GAAG,WAAW,EAAE,GAAG;gBAC7C;YACF;YACA,OAAO;gBACL,MAAM,QAAO,EAAE,IAAI,EAAE,KAAK,EAAE;oBAC1B,MAAM,UAAU,GAAG,UAAU,CAAC,OAAO,MAAM,CAAC;oBAC5C,OAAO,MAAM,cAAc,MAAM,SAAS,OAAO,EAAE;gBACrD;gBACA,MAAM,SAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;oBACpC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,mBAAmB,OAAO;oBAC9C,IAAI,QAAQ,GAAG,UAAU,CAAC,OAAO,SAAS;oBAC1C,IAAI,KAAK;wBACP,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC5D;oBACA,IAAI,IAAI;wBACN,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC1D;oBACA,MAAM,MAAM,MAAM,MAAM,gBAAgB;oBACxC,IAAI,CAAC,KAAK,OAAO;oBACjB,OAAO;gBACT;gBACA,MAAM,UAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE;oBACpD,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,mBAAmB,OAAO;oBAC9C,IAAI,QAAQ,GAAG,UAAU,CAAC;oBAC1B,IAAI,KAAK;wBACP,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC5D;oBACA,IAAI,IAAI;wBACN,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC1D;oBACA,IAAI,QAAQ,SAAS,SAAS;wBAC5B,IAAI,CAAC,QAAQ;4BACX,QAAQ,MAAM,GAAG,CAAC,SAAS;wBAC7B;oBACF,OAAO;wBACL,QAAQ,MAAM,KAAK,CAAC,SAAS;oBAC/B;oBACA,IAAI,QAAQ;wBACV,QAAQ,MAAM,OAAO,CACnB,aAAa;4BAAE;4BAAO,OAAO,OAAO,KAAK;wBAAC,IAC1C,OAAO,SAAS;oBAEpB;oBACA,IAAI,QAAQ;wBACV,IAAI,QAAQ,SAAS,SAAS;4BAC5B,IAAI,CAAC,QAAQ;gCACX,QAAQ,MAAM,OAAO,CAAC,aAAa;oCAAE;oCAAO,OAAO;gCAAK;4BAC1D;4BACA,QAAQ,MAAM,MAAM,CAAC,QAAQ,KAAK,CAAC,SAAS;wBAC9C,OAAO;4BACL,QAAQ,MAAM,MAAM,CAAC;wBACvB;oBACF;oBACA,MAAM,MAAM,MAAM,MAAM,SAAS,GAAG,OAAO;oBAC3C,IAAI,CAAC,KAAK,OAAO,EAAE;oBACnB,OAAO;gBACT;gBACA,MAAM,QAAO,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,MAAM,EAAE;oBAC3C,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,mBAAmB,OAAO;oBAC9C,IAAI,QAAQ,GAAG,WAAW,CAAC,OAAO,GAAG,CAAC;oBACtC,IAAI,KAAK;wBACP,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC5D;oBACA,IAAI,IAAI;wBACN,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC1D;oBACA,OAAO,MAAM,cAAc,QAAQ,OAAO,OAAO;gBACnD;gBACA,MAAM,YAAW,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,MAAM,EAAE;oBAC/C,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,mBAAmB,OAAO;oBAC9C,IAAI,QAAQ,GAAG,WAAW,CAAC,OAAO,GAAG,CAAC;oBACtC,IAAI,KAAK;wBACP,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC5D;oBACA,IAAI,IAAI;wBACN,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC1D;oBACA,MAAM,MAAM,MAAM,MAAM,OAAO;oBAC/B,OAAO,IAAI,MAAM;gBACnB;gBACA,MAAM,OAAM,EAAE,KAAK,EAAE,KAAK,EAAE;oBAC1B,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,mBAAmB,OAAO;oBAC9C,IAAI,QAAQ,GAAG,UAAU,CAAC,OAAO,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;oBAC7D,IAAI,KAAK;wBACP,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC5D;oBACA,IAAI,IAAI;wBACN,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC1D;oBACA,MAAM,MAAM,MAAM,MAAM,OAAO;oBAC/B,OAAO,GAAG,CAAC,EAAE,CAAC,KAAK;gBACrB;gBACA,MAAM,QAAO,EAAE,KAAK,EAAE,KAAK,EAAE;oBAC3B,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,mBAAmB,OAAO;oBAC9C,IAAI,QAAQ,GAAG,UAAU,CAAC;oBAC1B,IAAI,KAAK;wBACP,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC5D;oBACA,IAAI,IAAI;wBACN,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC1D;oBACA,MAAM,MAAM,OAAO;gBACrB;gBACA,MAAM,YAAW,EAAE,KAAK,EAAE,KAAK,EAAE;oBAC/B,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,mBAAmB,OAAO;oBAC9C,IAAI,QAAQ,GAAG,UAAU,CAAC;oBAC1B,IAAI,KAAK;wBACP,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC5D;oBACA,IAAI,IAAI;wBACN,QAAQ,MAAM,KAAK,CAAC,CAAC,KAAO,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAS,KAAK;oBAC1D;oBACA,OAAO,CAAC,MAAM,MAAM,OAAO,EAAE,EAAE,MAAM;gBACvC;gBACA,SAAS;YACX;QACF;IACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7594, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DGpadpzN.mjs"],"sourcesContent":["import '@better-auth/utils/random';\nimport 'zod/v4';\nimport 'better-call';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport '@better-auth/utils/base64';\nimport 'jose';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport './better-auth.B4Qoxdgc.mjs';\nimport { a as logger } from './better-auth.DBGfIDnh.mjs';\nimport { c as createAdapter } from './better-auth.gBl3F_xa.mjs';\n\nconst memoryAdapter = (db, config) => createAdapter({\n  config: {\n    adapterId: \"memory\",\n    adapterName: \"Memory Adapter\",\n    usePlural: false,\n    debugLogs: config?.debugLogs || false,\n    customTransformInput(props) {\n      if (props.options.advanced?.database?.useNumberId && props.field === \"id\" && props.action === \"create\") {\n        return db[props.model].length + 1;\n      }\n      return props.data;\n    }\n  },\n  adapter: ({ getFieldName, options, debugLog }) => {\n    function convertWhereClause(where, model) {\n      const table = db[model];\n      if (!table) {\n        logger.error(\n          `[MemoryAdapter] Model ${model} not found in the DB`,\n          Object.keys(db)\n        );\n        throw new Error(`Model ${model} not found`);\n      }\n      return table.filter((record) => {\n        return where.every((clause) => {\n          let { field, value, operator } = clause;\n          if (operator === \"in\") {\n            if (!Array.isArray(value)) {\n              throw new Error(\"Value must be an array\");\n            }\n            return value.includes(record[field]);\n          } else if (operator === \"contains\") {\n            return record[field].includes(value);\n          } else if (operator === \"starts_with\") {\n            return record[field].startsWith(value);\n          } else if (operator === \"ends_with\") {\n            return record[field].endsWith(value);\n          } else {\n            return record[field] === value;\n          }\n        });\n      });\n    }\n    return {\n      create: async ({ model, data }) => {\n        if (options.advanced?.database?.useNumberId) {\n          data.id = db[model].length + 1;\n        }\n        if (!db[model]) {\n          db[model] = [];\n        }\n        db[model].push(data);\n        return data;\n      },\n      findOne: async ({ model, where }) => {\n        const res = convertWhereClause(where, model);\n        const record = res[0] || null;\n        return record;\n      },\n      findMany: async ({ model, where, sortBy, limit, offset }) => {\n        let table = db[model];\n        if (where) {\n          table = convertWhereClause(where, model);\n        }\n        if (sortBy) {\n          table = table.sort((a, b) => {\n            const field = getFieldName({ model, field: sortBy.field });\n            if (sortBy.direction === \"asc\") {\n              return a[field] > b[field] ? 1 : -1;\n            } else {\n              return a[field] < b[field] ? 1 : -1;\n            }\n          });\n        }\n        if (offset !== void 0) {\n          table = table.slice(offset);\n        }\n        if (limit !== void 0) {\n          table = table.slice(0, limit);\n        }\n        return table;\n      },\n      count: async ({ model }) => {\n        return db[model].length;\n      },\n      update: async ({ model, where, update }) => {\n        const res = convertWhereClause(where, model);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      },\n      delete: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, model);\n        db[model] = table.filter((record) => !res.includes(record));\n      },\n      deleteMany: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, model);\n        let count = 0;\n        db[model] = table.filter((record) => {\n          if (res.includes(record)) {\n            count++;\n            return false;\n          }\n          return !res.includes(record);\n        });\n        return count;\n      },\n      updateMany({ model, where, update }) {\n        const res = convertWhereClause(where, model);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      }\n    };\n  }\n});\n\nexport { memoryAdapter as m };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7747, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.ByruPN9q.mjs"],"sourcesContent":["import { g as getDate } from './better-auth.CW6D9eSx.mjs';\nimport { d as parseSessionOutput, b as parseUserOutput } from './better-auth.n2KFGwjY.mjs';\nimport { g as getIp } from './better-auth.DcfNPS8q.mjs';\nimport { s as safeJSONParse } from './better-auth.tB5eU6EY.mjs';\nimport { g as generateId, a as logger, c as createLogger } from './better-auth.DBGfIDnh.mjs';\nimport 'zod/v4';\nimport 'better-call';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport '@better-auth/utils/base64';\nimport 'jose';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport './better-auth.B4Qoxdgc.mjs';\nimport './better-auth.8zoxzg-F.mjs';\nimport '@better-auth/utils/random';\nimport { g as getAuthTables } from './better-auth.DORkW_Ge.mjs';\nimport { B as BetterAuthError } from './better-auth.DdzSJf-n.mjs';\nimport { c as createKyselyAdapter, k as kyselyAdapter } from './better-auth.DwzM-9N1.mjs';\nimport { m as memoryAdapter } from './better-auth.DGpadpzN.mjs';\nimport 'kysely';\n\nfunction getWithHooks(adapter, ctx) {\n  const hooks = ctx.hooks;\n  async function createWithHooks(data, model, customCreateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.before;\n      if (toRun) {\n        const result = await toRun(actualData, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\" && \"data\" in result;\n        if (isObject) {\n          actualData = {\n            ...actualData,\n            ...result.data\n          };\n        }\n      }\n    }\n    const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;\n    const created = !customCreateFn || customCreateFn.executeMainFn ? await adapter.create({\n      model,\n      data: actualData,\n      forceAllowId: true\n    }) : customCreated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.after;\n      if (toRun) {\n        await toRun(created, context);\n      }\n    }\n    return created;\n  }\n  async function updateWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.update({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  async function updateManyWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.updateMany({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  return {\n    createWithHooks,\n    updateWithHooks,\n    updateManyWithHooks\n  };\n}\n\nconst createInternalAdapter = (adapter, ctx) => {\n  const options = ctx.options;\n  const secondaryStorage = options.secondaryStorage;\n  const sessionExpiration = options.session?.expiresIn || 60 * 60 * 24 * 7;\n  const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);\n  return {\n    createOAuthUser: async (user, account, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...user\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      const createdAccount = await createWithHooks(\n        {\n          ...account,\n          userId: createdUser.id || user.id,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return {\n        user: createdUser,\n        account: createdAccount\n      };\n    },\n    createUser: async (user, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          emailVerified: false,\n          ...user,\n          email: user.email?.toLowerCase()\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      return createdUser;\n    },\n    createAccount: async (account, context) => {\n      const createdAccount = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...account\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return createdAccount;\n    },\n    listSessions: async (userId) => {\n      if (secondaryStorage) {\n        const currentList = await secondaryStorage.get(\n          `active-sessions-${userId}`\n        );\n        if (!currentList) return [];\n        const list = safeJSONParse(currentList) || [];\n        const now = Date.now();\n        const validSessions = list.filter((s) => s.expiresAt > now);\n        const sessions2 = [];\n        for (const session of validSessions) {\n          const sessionStringified = await secondaryStorage.get(session.token);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const parsedSession = parseSessionOutput(ctx.options, {\n              ...s.session,\n              expiresAt: new Date(s.session.expiresAt)\n            });\n            sessions2.push(parsedSession);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return sessions;\n    },\n    listUsers: async (limit, offset, sortBy, where) => {\n      const users = await adapter.findMany({\n        model: \"user\",\n        limit,\n        offset,\n        sortBy,\n        where\n      });\n      return users;\n    },\n    countTotalUsers: async (where) => {\n      const total = await adapter.count({\n        model: \"user\",\n        where\n      });\n      if (typeof total === \"string\") {\n        return parseInt(total);\n      }\n      return total;\n    },\n    deleteUser: async (userId) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(`active-sessions-${userId}`);\n      }\n      if (!secondaryStorage || options.session?.storeSessionInDatabase) {\n        await adapter.deleteMany({\n          model: \"session\",\n          where: [\n            {\n              field: \"userId\",\n              value: userId\n            }\n          ]\n        });\n      }\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n    },\n    createSession: async (userId, ctx2, dontRememberMe, override, overrideAll) => {\n      const headers = ctx2.headers || ctx2.request?.headers;\n      const { id: _, ...rest } = override || {};\n      const data = {\n        ipAddress: ctx2.request || ctx2.headers ? getIp(ctx2.request || ctx2.headers, ctx2.context.options) || \"\" : \"\",\n        userAgent: headers?.get(\"user-agent\") || \"\",\n        ...rest,\n        /**\n         * If the user doesn't want to be remembered\n         * set the session to expire in 1 day.\n         * The cookie will be set to expire at the end of the session\n         */\n        expiresAt: dontRememberMe ? getDate(60 * 60 * 24, \"sec\") : getDate(sessionExpiration, \"sec\"),\n        userId,\n        token: generateId(32),\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...overrideAll ? rest : {}\n      };\n      const res = await createWithHooks(\n        data,\n        \"session\",\n        secondaryStorage ? {\n          fn: async (sessionData) => {\n            const currentList = await secondaryStorage.get(\n              `active-sessions-${userId}`\n            );\n            let list = [];\n            const now = Date.now();\n            if (currentList) {\n              list = safeJSONParse(currentList) || [];\n              list = list.filter((session) => session.expiresAt > now);\n            }\n            list.push({\n              token: data.token,\n              expiresAt: now + sessionExpiration * 1e3\n            });\n            await secondaryStorage.set(\n              `active-sessions-${userId}`,\n              JSON.stringify(list),\n              sessionExpiration\n            );\n            return sessionData;\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        ctx2\n      );\n      return res;\n    },\n    findSession: async (token) => {\n      if (secondaryStorage) {\n        const sessionStringified = await secondaryStorage.get(token);\n        if (!sessionStringified && !options.session?.storeSessionInDatabase) {\n          return null;\n        }\n        if (sessionStringified) {\n          const s = JSON.parse(sessionStringified);\n          const parsedSession2 = parseSessionOutput(ctx.options, {\n            ...s.session,\n            expiresAt: new Date(s.session.expiresAt),\n            createdAt: new Date(s.session.createdAt),\n            updatedAt: new Date(s.session.updatedAt)\n          });\n          const parsedUser2 = parseUserOutput(ctx.options, {\n            ...s.user,\n            createdAt: new Date(s.user.createdAt),\n            updatedAt: new Date(s.user.updatedAt)\n          });\n          return {\n            session: parsedSession2,\n            user: parsedUser2\n          };\n        }\n      }\n      const session = await adapter.findOne({\n        model: \"session\",\n        where: [\n          {\n            value: token,\n            field: \"token\"\n          }\n        ]\n      });\n      if (!session) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: session.userId,\n            field: \"id\"\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const parsedSession = parseSessionOutput(ctx.options, session);\n      const parsedUser = parseUserOutput(ctx.options, user);\n      return {\n        session: parsedSession,\n        user: parsedUser\n      };\n    },\n    findSessions: async (sessionTokens) => {\n      if (secondaryStorage) {\n        const sessions2 = [];\n        for (const sessionToken of sessionTokens) {\n          const sessionStringified = await secondaryStorage.get(sessionToken);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const session = {\n              session: {\n                ...s.session,\n                expiresAt: new Date(s.session.expiresAt)\n              },\n              user: {\n                ...s.user,\n                createdAt: new Date(s.user.createdAt),\n                updatedAt: new Date(s.user.updatedAt)\n              }\n            };\n            sessions2.push(session);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: sessionTokens,\n            operator: \"in\"\n          }\n        ]\n      });\n      const userIds = sessions.map((session) => {\n        return session.userId;\n      });\n      if (!userIds.length) return [];\n      const users = await adapter.findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return sessions.map((session) => {\n        const user = users.find((u) => u.id === session.userId);\n        if (!user) return null;\n        return {\n          session,\n          user\n        };\n      });\n    },\n    updateSession: async (sessionToken, session, context) => {\n      const updatedSession = await updateWithHooks(\n        session,\n        [{ field: \"token\", value: sessionToken }],\n        \"session\",\n        secondaryStorage ? {\n          async fn(data) {\n            const currentSession = await secondaryStorage.get(sessionToken);\n            let updatedSession2 = null;\n            if (currentSession) {\n              const parsedSession = JSON.parse(currentSession);\n              updatedSession2 = {\n                ...parsedSession.session,\n                ...data\n              };\n              return updatedSession2;\n            } else {\n              return null;\n            }\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        context\n      );\n      return updatedSession;\n    },\n    deleteSession: async (token) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(token);\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.delete({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: token\n          }\n        ]\n      });\n    },\n    deleteAccounts: async (userId) => {\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n    },\n    deleteAccount: async (accountId) => {\n      await adapter.delete({\n        model: \"account\",\n        where: [\n          {\n            field: \"id\",\n            value: accountId\n          }\n        ]\n      });\n    },\n    deleteSessions: async (userIdOrSessionTokens) => {\n      if (secondaryStorage) {\n        if (typeof userIdOrSessionTokens === \"string\") {\n          const activeSession = await secondaryStorage.get(\n            `active-sessions-${userIdOrSessionTokens}`\n          );\n          const sessions = activeSession ? safeJSONParse(activeSession) : [];\n          if (!sessions) return;\n          for (const session of sessions) {\n            await secondaryStorage.delete(session.token);\n          }\n        } else {\n          for (const sessionToken of userIdOrSessionTokens) {\n            const session = await secondaryStorage.get(sessionToken);\n            if (session) {\n              await secondaryStorage.delete(sessionToken);\n            }\n          }\n        }\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.deleteMany({\n        model: \"session\",\n        where: [\n          {\n            field: Array.isArray(userIdOrSessionTokens) ? \"token\" : \"userId\",\n            value: userIdOrSessionTokens,\n            operator: Array.isArray(userIdOrSessionTokens) ? \"in\" : void 0\n          }\n        ]\n      });\n    },\n    findOAuthUser: async (email, accountId, providerId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            value: accountId,\n            field: \"accountId\"\n          }\n        ]\n      }).then((accounts) => {\n        return accounts.find((a) => a.providerId === providerId);\n      });\n      if (account) {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: account.userId,\n              field: \"id\"\n            }\n          ]\n        });\n        if (user) {\n          return {\n            user,\n            accounts: [account]\n          };\n        } else {\n          const user2 = await adapter.findOne({\n            model: \"user\",\n            where: [\n              {\n                value: email.toLowerCase(),\n                field: \"email\"\n              }\n            ]\n          });\n          if (user2) {\n            return {\n              user: user2,\n              accounts: [account]\n            };\n          }\n          return null;\n        }\n      } else {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: email.toLowerCase(),\n              field: \"email\"\n            }\n          ]\n        });\n        if (user) {\n          const accounts = await adapter.findMany({\n            model: \"account\",\n            where: [\n              {\n                value: user.id,\n                field: \"userId\"\n              }\n            ]\n          });\n          return {\n            user,\n            accounts: accounts || []\n          };\n        } else {\n          return null;\n        }\n      }\n    },\n    findUserByEmail: async (email, options2) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: email.toLowerCase(),\n            field: \"email\"\n          }\n        ]\n      });\n      if (!user) return null;\n      if (options2?.includeAccounts) {\n        const accounts = await adapter.findMany({\n          model: \"account\",\n          where: [\n            {\n              value: user.id,\n              field: \"userId\"\n            }\n          ]\n        });\n        return {\n          user,\n          accounts\n        };\n      }\n      return {\n        user,\n        accounts: []\n      };\n    },\n    findUserById: async (userId) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n      return user;\n    },\n    linkAccount: async (account, context) => {\n      const _account = await createWithHooks(\n        {\n          ...account,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return _account;\n    },\n    updateUser: async (userId, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      if (secondaryStorage && user) {\n        const listRaw = await secondaryStorage.get(`active-sessions-${userId}`);\n        if (listRaw) {\n          const now = Date.now();\n          const list = safeJSONParse(listRaw) || [];\n          const validSessions = list.filter((s) => s.expiresAt > now);\n          await Promise.all(\n            validSessions.map(async ({ token }) => {\n              const cached = await secondaryStorage.get(token);\n              if (!cached) return;\n              const parsed = safeJSONParse(cached);\n              if (!parsed) return;\n              const sessionTTL = Math.max(\n                Math.floor(\n                  (new Date(parsed.session.expiresAt).getTime() - now) / 1e3\n                ),\n                0\n              );\n              await secondaryStorage.set(\n                token,\n                JSON.stringify({\n                  session: parsed.session,\n                  user\n                }),\n                sessionTTL\n              );\n            })\n          );\n        }\n      }\n      return user;\n    },\n    updateUserByEmail: async (email, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"email\",\n            value: email.toLowerCase()\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      return user;\n    },\n    updatePassword: async (userId, password, context) => {\n      await updateManyWithHooks(\n        {\n          password\n        },\n        [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"providerId\",\n            value: \"credential\"\n          }\n        ],\n        \"account\",\n        void 0,\n        context\n      );\n    },\n    findAccounts: async (userId) => {\n      const accounts = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return accounts;\n    },\n    findAccount: async (accountId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByProviderId: async (accountId, providerId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          },\n          {\n            field: \"providerId\",\n            value: providerId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByUserId: async (userId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return account;\n    },\n    updateAccount: async (id, data, context) => {\n      const account = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"account\",\n        void 0,\n        context\n      );\n      return account;\n    },\n    createVerificationValue: async (data, context) => {\n      const verification = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...data\n        },\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    },\n    findVerificationValue: async (identifier) => {\n      const verification = await adapter.findMany({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ],\n        sortBy: {\n          field: \"createdAt\",\n          direction: \"desc\"\n        },\n        limit: 1\n      });\n      if (!options.verification?.disableCleanup) {\n        await adapter.deleteMany({\n          model: \"verification\",\n          where: [\n            {\n              field: \"expiresAt\",\n              value: /* @__PURE__ */ new Date(),\n              operator: \"lt\"\n            }\n          ]\n        });\n      }\n      const lastVerification = verification[0];\n      return lastVerification;\n    },\n    deleteVerificationValue: async (id) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n    },\n    deleteVerificationByIdentifier: async (identifier) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ]\n      });\n    },\n    updateVerificationValue: async (id, data, context) => {\n      const verification = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    }\n  };\n};\n\nasync function getAdapter(options) {\n  if (!options.database) {\n    const tables = getAuthTables(options);\n    const memoryDB = Object.keys(tables).reduce((acc, key) => {\n      acc[key] = [];\n      return acc;\n    }, {});\n    logger.warn(\n      \"No database configuration provided. Using memory adapter in development\"\n    );\n    return memoryAdapter(memoryDB)(options);\n  }\n  if (typeof options.database === \"function\") {\n    return options.database(options);\n  }\n  const { kysely, databaseType } = await createKyselyAdapter(options);\n  if (!kysely) {\n    throw new BetterAuthError(\"Failed to initialize database adapter\");\n  }\n  return kyselyAdapter(kysely, {\n    type: databaseType || \"sqlite\",\n    debugLogs: \"debugLogs\" in options.database ? options.database.debugLogs : false\n  })(options);\n}\nfunction convertToDB(fields, values) {\n  let result = values.id ? {\n    id: values.id\n  } : {};\n  for (const key in fields) {\n    const field = fields[key];\n    const value = values[key];\n    if (value === void 0) {\n      continue;\n    }\n    result[field.fieldName || key] = value;\n  }\n  return result;\n}\nfunction convertFromDB(fields, values) {\n  if (!values) {\n    return null;\n  }\n  let result = {\n    id: values.id\n  };\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = values[value.fieldName || key];\n  }\n  return result;\n}\n\nfunction getSchema(config) {\n  const tables = getAuthTables(config);\n  let schema = {};\n  for (const key in tables) {\n    const table = tables[key];\n    const fields = table.fields;\n    let actualFields = {};\n    Object.entries(fields).forEach(([key2, field]) => {\n      actualFields[field.fieldName || key2] = field;\n      if (field.references) {\n        const refTable = tables[field.references.model];\n        if (refTable) {\n          actualFields[field.fieldName || key2].references = {\n            model: refTable.modelName,\n            field: field.references.field\n          };\n        }\n      }\n    });\n    if (schema[table.modelName]) {\n      schema[table.modelName].fields = {\n        ...schema[table.modelName].fields,\n        ...actualFields\n      };\n      continue;\n    }\n    schema[table.modelName] = {\n      fields: actualFields,\n      order: table.order || Infinity\n    };\n  }\n  return schema;\n}\n\nconst postgresMap = {\n  string: [\"character varying\", \"varchar\", \"text\"],\n  number: [\n    \"int4\",\n    \"integer\",\n    \"bigint\",\n    \"smallint\",\n    \"numeric\",\n    \"real\",\n    \"double precision\"\n  ],\n  boolean: [\"bool\", \"boolean\"],\n  date: [\"timestamp\", \"date\"]\n};\nconst mysqlMap = {\n  string: [\"varchar\", \"text\"],\n  number: [\n    \"integer\",\n    \"int\",\n    \"bigint\",\n    \"smallint\",\n    \"decimal\",\n    \"float\",\n    \"double\"\n  ],\n  boolean: [\"boolean\", \"tinyint\"],\n  date: [\"timestamp\", \"datetime\", \"date\"]\n};\nconst sqliteMap = {\n  string: [\"TEXT\"],\n  number: [\"INTEGER\", \"REAL\"],\n  boolean: [\"INTEGER\", \"BOOLEAN\"],\n  // 0 or 1\n  date: [\"DATE\", \"INTEGER\"]\n};\nconst mssqlMap = {\n  string: [\"text\", \"varchar\"],\n  number: [\"int\", \"bigint\", \"smallint\", \"decimal\", \"float\", \"double\"],\n  boolean: [\"bit\", \"smallint\"],\n  date: [\"datetime\", \"date\"]\n};\nconst map = {\n  postgres: postgresMap,\n  mysql: mysqlMap,\n  sqlite: sqliteMap,\n  mssql: mssqlMap\n};\nfunction matchType(columnDataType, fieldType, dbType) {\n  function normalize(type) {\n    return type.toLowerCase().split(\"(\")[0].trim();\n  }\n  if (fieldType === \"string[]\" || fieldType === \"number[]\") {\n    return columnDataType.toLowerCase().includes(\"json\");\n  }\n  const types = map[dbType];\n  const expected = Array.isArray(fieldType) ? types[\"string\"].map((t) => t.toLowerCase()) : types[fieldType].map((t) => t.toLowerCase());\n  return expected.includes(normalize(columnDataType));\n}\nasync function getMigrations(config) {\n  const betterAuthSchema = getSchema(config);\n  const logger = createLogger(config.logger);\n  let { kysely: db, databaseType: dbType } = await createKyselyAdapter(config);\n  if (!dbType) {\n    logger.warn(\n      \"Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this.\"\n    );\n    dbType = \"sqlite\";\n  }\n  if (!db) {\n    logger.error(\n      \"Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter.\"\n    );\n    process.exit(1);\n  }\n  const tableMetadata = await db.introspection.getTables();\n  const toBeCreated = [];\n  const toBeAdded = [];\n  for (const [key, value] of Object.entries(betterAuthSchema)) {\n    const table = tableMetadata.find((t) => t.name === key);\n    if (!table) {\n      const tIndex = toBeCreated.findIndex((t) => t.table === key);\n      const tableData = {\n        table: key,\n        fields: value.fields,\n        order: value.order || Infinity\n      };\n      const insertIndex = toBeCreated.findIndex(\n        (t) => (t.order || Infinity) > tableData.order\n      );\n      if (insertIndex === -1) {\n        if (tIndex === -1) {\n          toBeCreated.push(tableData);\n        } else {\n          toBeCreated[tIndex].fields = {\n            ...toBeCreated[tIndex].fields,\n            ...value.fields\n          };\n        }\n      } else {\n        toBeCreated.splice(insertIndex, 0, tableData);\n      }\n      continue;\n    }\n    let toBeAddedFields = {};\n    for (const [fieldName, field] of Object.entries(value.fields)) {\n      const column = table.columns.find((c) => c.name === fieldName);\n      if (!column) {\n        toBeAddedFields[fieldName] = field;\n        continue;\n      }\n      if (matchType(column.dataType, field.type, dbType)) {\n        continue;\n      } else {\n        logger.warn(\n          `Field ${fieldName} in table ${key} has a different type in the database. Expected ${field.type} but got ${column.dataType}.`\n        );\n      }\n    }\n    if (Object.keys(toBeAddedFields).length > 0) {\n      toBeAdded.push({\n        table: key,\n        fields: toBeAddedFields,\n        order: value.order || Infinity\n      });\n    }\n  }\n  const migrations = [];\n  function getType(field, fieldName) {\n    const type = field.type;\n    const typeMap = {\n      string: {\n        sqlite: \"text\",\n        postgres: \"text\",\n        mysql: field.unique ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\",\n        mssql: field.unique || field.sortable ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\"\n      },\n      boolean: {\n        sqlite: \"integer\",\n        postgres: \"boolean\",\n        mysql: \"boolean\",\n        mssql: \"smallint\"\n      },\n      number: {\n        sqlite: field.bigint ? \"bigint\" : \"integer\",\n        postgres: field.bigint ? \"bigint\" : \"integer\",\n        mysql: field.bigint ? \"bigint\" : \"integer\",\n        mssql: field.bigint ? \"bigint\" : \"integer\"\n      },\n      date: {\n        sqlite: \"date\",\n        postgres: \"timestamp\",\n        mysql: \"datetime\",\n        mssql: \"datetime\"\n      },\n      id: {\n        postgres: config.advanced?.database?.useNumberId ? \"serial\" : \"text\",\n        mysql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        mssql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        sqlite: config.advanced?.database?.useNumberId ? \"integer\" : \"text\"\n      }\n    };\n    if (fieldName === \"id\" || field.references?.field === \"id\") {\n      return typeMap.id[dbType];\n    }\n    if (dbType === \"sqlite\" && (type === \"string[]\" || type === \"number[]\")) {\n      return \"text\";\n    }\n    if (type === \"string[]\" || type === \"number[]\") {\n      return \"jsonb\";\n    }\n    if (Array.isArray(type)) {\n      return \"text\";\n    }\n    return typeMap[type][dbType || \"sqlite\"];\n  }\n  if (toBeAdded.length) {\n    for (const table of toBeAdded) {\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n        migrations.push(exec);\n      }\n    }\n  }\n  if (toBeCreated.length) {\n    for (const table of toBeCreated) {\n      let dbT = db.schema.createTable(table.table).addColumn(\n        \"id\",\n        config.advanced?.database?.useNumberId ? dbType === \"postgres\" ? \"serial\" : \"integer\" : dbType === \"mysql\" || dbType === \"mssql\" ? \"varchar(36)\" : \"text\",\n        (col) => {\n          if (config.advanced?.database?.useNumberId) {\n            if (dbType === \"postgres\") {\n              return col.primaryKey().notNull();\n            }\n            return col.autoIncrement().primaryKey().notNull();\n          }\n          return col.primaryKey().notNull();\n        }\n      );\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        dbT = dbT.addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n      }\n      migrations.push(dbT);\n    }\n  }\n  async function runMigrations() {\n    for (const migration of migrations) {\n      await migration.execute();\n    }\n  }\n  async function compileMigrations() {\n    const compiled = migrations.map((m) => m.compile().sql);\n    return compiled.join(\";\\n\\n\") + \";\";\n  }\n  return { toBeCreated, toBeAdded, runMigrations, compileMigrations };\n}\n\nexport { getAdapter as a, convertToDB as b, createInternalAdapter as c, convertFromDB as d, getMigrations as e, getSchema as f, getWithHooks as g, matchType as m };\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,aAAa,OAAO,EAAE,GAAG;IAChC,MAAM,QAAQ,IAAI,KAAK;IACvB,eAAe,gBAAgB,IAAI,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO;QACjE,IAAI,aAAa;QACjB,KAAK,MAAM,QAAQ,SAAS,EAAE,CAAE;YAC9B,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ;YACnC,IAAI,OAAO;gBACT,MAAM,SAAS,MAAM,MAAM,YAAY;gBACvC,IAAI,WAAW,OAAO;oBACpB,OAAO;gBACT;gBACA,MAAM,WAAW,OAAO,WAAW,YAAY,UAAU;gBACzD,IAAI,UAAU;oBACZ,aAAa;wBACX,GAAG,UAAU;wBACb,GAAG,OAAO,IAAI;oBAChB;gBACF;YACF;QACF;QACA,MAAM,gBAAgB,iBAAiB,MAAM,eAAe,EAAE,CAAC,cAAc;QAC7E,MAAM,UAAU,CAAC,kBAAkB,eAAe,aAAa,GAAG,MAAM,QAAQ,MAAM,CAAC;YACrF;YACA,MAAM;YACN,cAAc;QAChB,KAAK;QACL,KAAK,MAAM,QAAQ,SAAS,EAAE,CAAE;YAC9B,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ;YACnC,IAAI,OAAO;gBACT,MAAM,MAAM,SAAS;YACvB;QACF;QACA,OAAO;IACT;IACA,eAAe,gBAAgB,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO;QACxE,IAAI,aAAa;QACjB,KAAK,MAAM,QAAQ,SAAS,EAAE,CAAE;YAC9B,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ;YACnC,IAAI,OAAO;gBACT,MAAM,SAAS,MAAM,MAAM,MAAM;gBACjC,IAAI,WAAW,OAAO;oBACpB,OAAO;gBACT;gBACA,MAAM,WAAW,OAAO,WAAW;gBACnC,aAAa,WAAW,OAAO,IAAI,GAAG;YACxC;QACF;QACA,MAAM,gBAAgB,iBAAiB,MAAM,eAAe,EAAE,CAAC,cAAc;QAC7E,MAAM,UAAU,CAAC,kBAAkB,eAAe,aAAa,GAAG,MAAM,QAAQ,MAAM,CAAC;YACrF;YACA,QAAQ;YACR;QACF,KAAK;QACL,KAAK,MAAM,QAAQ,SAAS,EAAE,CAAE;YAC9B,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ;YACnC,IAAI,OAAO;gBACT,MAAM,MAAM,SAAS;YACvB;QACF;QACA,OAAO;IACT;IACA,eAAe,oBAAoB,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,OAAO;QAC5E,IAAI,aAAa;QACjB,KAAK,MAAM,QAAQ,SAAS,EAAE,CAAE;YAC9B,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ;YACnC,IAAI,OAAO;gBACT,MAAM,SAAS,MAAM,MAAM,MAAM;gBACjC,IAAI,WAAW,OAAO;oBACpB,OAAO;gBACT;gBACA,MAAM,WAAW,OAAO,WAAW;gBACnC,aAAa,WAAW,OAAO,IAAI,GAAG;YACxC;QACF;QACA,MAAM,gBAAgB,iBAAiB,MAAM,eAAe,EAAE,CAAC,cAAc;QAC7E,MAAM,UAAU,CAAC,kBAAkB,eAAe,aAAa,GAAG,MAAM,QAAQ,UAAU,CAAC;YACzF;YACA,QAAQ;YACR;QACF,KAAK;QACL,KAAK,MAAM,QAAQ,SAAS,EAAE,CAAE;YAC9B,MAAM,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ;YACnC,IAAI,OAAO;gBACT,MAAM,MAAM,SAAS;YACvB;QACF;QACA,OAAO;IACT;IACA,OAAO;QACL;QACA;QACA;IACF;AACF;AAEA,MAAM,wBAAwB,CAAC,SAAS;IACtC,MAAM,UAAU,IAAI,OAAO;IAC3B,MAAM,mBAAmB,QAAQ,gBAAgB;IACjD,MAAM,oBAAoB,QAAQ,OAAO,EAAE,aAAa,KAAK,KAAK,KAAK;IACvE,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE,mBAAmB,EAAE,GAAG,aAAa,SAAS;IACxF,OAAO;QACL,iBAAiB,OAAO,MAAM,SAAS;YACrC,MAAM,cAAc,MAAM,gBACxB;gBACE,WAAW,aAAa,GAAG,IAAI;gBAC/B,WAAW,aAAa,GAAG,IAAI;gBAC/B,GAAG,IAAI;YACT,GACA,QACA,KAAK,GACL;YAEF,MAAM,iBAAiB,MAAM,gBAC3B;gBACE,GAAG,OAAO;gBACV,QAAQ,YAAY,EAAE,IAAI,KAAK,EAAE;gBACjC,WAAW,aAAa,GAAG,IAAI;gBAC/B,WAAW,aAAa,GAAG,IAAI;YACjC,GACA,WACA,KAAK,GACL;YAEF,OAAO;gBACL,MAAM;gBACN,SAAS;YACX;QACF;QACA,YAAY,OAAO,MAAM;YACvB,MAAM,cAAc,MAAM,gBACxB;gBACE,WAAW,aAAa,GAAG,IAAI;gBAC/B,WAAW,aAAa,GAAG,IAAI;gBAC/B,eAAe;gBACf,GAAG,IAAI;gBACP,OAAO,KAAK,KAAK,EAAE;YACrB,GACA,QACA,KAAK,GACL;YAEF,OAAO;QACT;QACA,eAAe,OAAO,SAAS;YAC7B,MAAM,iBAAiB,MAAM,gBAC3B;gBACE,WAAW,aAAa,GAAG,IAAI;gBAC/B,WAAW,aAAa,GAAG,IAAI;gBAC/B,GAAG,OAAO;YACZ,GACA,WACA,KAAK,GACL;YAEF,OAAO;QACT;QACA,cAAc,OAAO;YACnB,IAAI,kBAAkB;gBACpB,MAAM,cAAc,MAAM,iBAAiB,GAAG,CAC5C,CAAC,gBAAgB,EAAE,QAAQ;gBAE7B,IAAI,CAAC,aAAa,OAAO,EAAE;gBAC3B,MAAM,OAAO,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE,gBAAgB,EAAE;gBAC7C,MAAM,MAAM,KAAK,GAAG;gBACpB,MAAM,gBAAgB,KAAK,MAAM,CAAC,CAAC,IAAM,EAAE,SAAS,GAAG;gBACvD,MAAM,YAAY,EAAE;gBACpB,KAAK,MAAM,WAAW,cAAe;oBACnC,MAAM,qBAAqB,MAAM,iBAAiB,GAAG,CAAC,QAAQ,KAAK;oBACnE,IAAI,oBAAoB;wBACtB,MAAM,IAAI,KAAK,KAAK,CAAC;wBACrB,MAAM,gBAAgB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAAE,IAAI,OAAO,EAAE;4BACpD,GAAG,EAAE,OAAO;4BACZ,WAAW,IAAI,KAAK,EAAE,OAAO,CAAC,SAAS;wBACzC;wBACA,UAAU,IAAI,CAAC;oBACjB;gBACF;gBACA,OAAO;YACT;YACA,MAAM,WAAW,MAAM,QAAQ,QAAQ,CAAC;gBACtC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,OAAO;QACT;QACA,WAAW,OAAO,OAAO,QAAQ,QAAQ;YACvC,MAAM,QAAQ,MAAM,QAAQ,QAAQ,CAAC;gBACnC,OAAO;gBACP;gBACA;gBACA;gBACA;YACF;YACA,OAAO;QACT;QACA,iBAAiB,OAAO;YACtB,MAAM,QAAQ,MAAM,QAAQ,KAAK,CAAC;gBAChC,OAAO;gBACP;YACF;YACA,IAAI,OAAO,UAAU,UAAU;gBAC7B,OAAO,SAAS;YAClB;YACA,OAAO;QACT;QACA,YAAY,OAAO;YACjB,IAAI,kBAAkB;gBACpB,MAAM,iBAAiB,MAAM,CAAC,CAAC,gBAAgB,EAAE,QAAQ;YAC3D;YACA,IAAI,CAAC,oBAAoB,QAAQ,OAAO,EAAE,wBAAwB;gBAChE,MAAM,QAAQ,UAAU,CAAC;oBACvB,OAAO;oBACP,OAAO;wBACL;4BACE,OAAO;4BACP,OAAO;wBACT;qBACD;gBACH;YACF;YACA,MAAM,QAAQ,UAAU,CAAC;gBACvB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,MAAM,QAAQ,MAAM,CAAC;gBACnB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;QACF;QACA,eAAe,OAAO,QAAQ,MAAM,gBAAgB,UAAU;YAC5D,MAAM,UAAU,KAAK,OAAO,IAAI,KAAK,OAAO,EAAE;YAC9C,MAAM,EAAE,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG,YAAY,CAAC;YACxC,MAAM,OAAO;gBACX,WAAW,KAAK,OAAO,IAAI,KAAK,OAAO,GAAG,CAAA,GAAA,yTAAA,CAAA,IAAK,AAAD,EAAE,KAAK,OAAO,IAAI,KAAK,OAAO,EAAE,KAAK,OAAO,CAAC,OAAO,KAAK,KAAK;gBAC5G,WAAW,SAAS,IAAI,iBAAiB;gBACzC,GAAG,IAAI;gBACP;;;;SAIC,GACD,WAAW,iBAAiB,CAAA,GAAA,yTAAA,CAAA,IAAO,AAAD,EAAE,KAAK,KAAK,IAAI,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAO,AAAD,EAAE,mBAAmB;gBACtF;gBACA,OAAO,CAAA,GAAA,yTAAA,CAAA,IAAU,AAAD,EAAE;gBAClB,WAAW,aAAa,GAAG,IAAI;gBAC/B,WAAW,aAAa,GAAG,IAAI;gBAC/B,GAAG,cAAc,OAAO,CAAC,CAAC;YAC5B;YACA,MAAM,MAAM,MAAM,gBAChB,MACA,WACA,mBAAmB;gBACjB,IAAI,OAAO;oBACT,MAAM,cAAc,MAAM,iBAAiB,GAAG,CAC5C,CAAC,gBAAgB,EAAE,QAAQ;oBAE7B,IAAI,OAAO,EAAE;oBACb,MAAM,MAAM,KAAK,GAAG;oBACpB,IAAI,aAAa;wBACf,OAAO,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE,gBAAgB,EAAE;wBACvC,OAAO,KAAK,MAAM,CAAC,CAAC,UAAY,QAAQ,SAAS,GAAG;oBACtD;oBACA,KAAK,IAAI,CAAC;wBACR,OAAO,KAAK,KAAK;wBACjB,WAAW,MAAM,oBAAoB;oBACvC;oBACA,MAAM,iBAAiB,GAAG,CACxB,CAAC,gBAAgB,EAAE,QAAQ,EAC3B,KAAK,SAAS,CAAC,OACf;oBAEF,OAAO;gBACT;gBACA,eAAe,QAAQ,OAAO,EAAE;YAClC,IAAI,KAAK,GACT;YAEF,OAAO;QACT;QACA,aAAa,OAAO;YAClB,IAAI,kBAAkB;gBACpB,MAAM,qBAAqB,MAAM,iBAAiB,GAAG,CAAC;gBACtD,IAAI,CAAC,sBAAsB,CAAC,QAAQ,OAAO,EAAE,wBAAwB;oBACnE,OAAO;gBACT;gBACA,IAAI,oBAAoB;oBACtB,MAAM,IAAI,KAAK,KAAK,CAAC;oBACrB,MAAM,iBAAiB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAAE,IAAI,OAAO,EAAE;wBACrD,GAAG,EAAE,OAAO;wBACZ,WAAW,IAAI,KAAK,EAAE,OAAO,CAAC,SAAS;wBACvC,WAAW,IAAI,KAAK,EAAE,OAAO,CAAC,SAAS;wBACvC,WAAW,IAAI,KAAK,EAAE,OAAO,CAAC,SAAS;oBACzC;oBACA,MAAM,cAAc,CAAA,GAAA,yTAAA,CAAA,IAAe,AAAD,EAAE,IAAI,OAAO,EAAE;wBAC/C,GAAG,EAAE,IAAI;wBACT,WAAW,IAAI,KAAK,EAAE,IAAI,CAAC,SAAS;wBACpC,WAAW,IAAI,KAAK,EAAE,IAAI,CAAC,SAAS;oBACtC;oBACA,OAAO;wBACL,SAAS;wBACT,MAAM;oBACR;gBACF;YACF;YACA,MAAM,UAAU,MAAM,QAAQ,OAAO,CAAC;gBACpC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,IAAI,CAAC,SAAS;gBACZ,OAAO;YACT;YACA,MAAM,OAAO,MAAM,QAAQ,OAAO,CAAC;gBACjC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO,QAAQ,MAAM;wBACrB,OAAO;oBACT;iBACD;YACH;YACA,IAAI,CAAC,MAAM;gBACT,OAAO;YACT;YACA,MAAM,gBAAgB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAAE,IAAI,OAAO,EAAE;YACtD,MAAM,aAAa,CAAA,GAAA,yTAAA,CAAA,IAAe,AAAD,EAAE,IAAI,OAAO,EAAE;YAChD,OAAO;gBACL,SAAS;gBACT,MAAM;YACR;QACF;QACA,cAAc,OAAO;YACnB,IAAI,kBAAkB;gBACpB,MAAM,YAAY,EAAE;gBACpB,KAAK,MAAM,gBAAgB,cAAe;oBACxC,MAAM,qBAAqB,MAAM,iBAAiB,GAAG,CAAC;oBACtD,IAAI,oBAAoB;wBACtB,MAAM,IAAI,KAAK,KAAK,CAAC;wBACrB,MAAM,UAAU;4BACd,SAAS;gCACP,GAAG,EAAE,OAAO;gCACZ,WAAW,IAAI,KAAK,EAAE,OAAO,CAAC,SAAS;4BACzC;4BACA,MAAM;gCACJ,GAAG,EAAE,IAAI;gCACT,WAAW,IAAI,KAAK,EAAE,IAAI,CAAC,SAAS;gCACpC,WAAW,IAAI,KAAK,EAAE,IAAI,CAAC,SAAS;4BACtC;wBACF;wBACA,UAAU,IAAI,CAAC;oBACjB;gBACF;gBACA,OAAO;YACT;YACA,MAAM,WAAW,MAAM,QAAQ,QAAQ,CAAC;gBACtC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;wBACP,UAAU;oBACZ;iBACD;YACH;YACA,MAAM,UAAU,SAAS,GAAG,CAAC,CAAC;gBAC5B,OAAO,QAAQ,MAAM;YACvB;YACA,IAAI,CAAC,QAAQ,MAAM,EAAE,OAAO,EAAE;YAC9B,MAAM,QAAQ,MAAM,QAAQ,QAAQ,CAAC;gBACnC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;wBACP,UAAU;oBACZ;iBACD;YACH;YACA,OAAO,SAAS,GAAG,CAAC,CAAC;gBACnB,MAAM,OAAO,MAAM,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK,QAAQ,MAAM;gBACtD,IAAI,CAAC,MAAM,OAAO;gBAClB,OAAO;oBACL;oBACA;gBACF;YACF;QACF;QACA,eAAe,OAAO,cAAc,SAAS;YAC3C,MAAM,iBAAiB,MAAM,gBAC3B,SACA;gBAAC;oBAAE,OAAO;oBAAS,OAAO;gBAAa;aAAE,EACzC,WACA,mBAAmB;gBACjB,MAAM,IAAG,IAAI;oBACX,MAAM,iBAAiB,MAAM,iBAAiB,GAAG,CAAC;oBAClD,IAAI,kBAAkB;oBACtB,IAAI,gBAAgB;wBAClB,MAAM,gBAAgB,KAAK,KAAK,CAAC;wBACjC,kBAAkB;4BAChB,GAAG,cAAc,OAAO;4BACxB,GAAG,IAAI;wBACT;wBACA,OAAO;oBACT,OAAO;wBACL,OAAO;oBACT;gBACF;gBACA,eAAe,QAAQ,OAAO,EAAE;YAClC,IAAI,KAAK,GACT;YAEF,OAAO;QACT;QACA,eAAe,OAAO;YACpB,IAAI,kBAAkB;gBACpB,MAAM,iBAAiB,MAAM,CAAC;gBAC9B,IAAI,CAAC,QAAQ,OAAO,EAAE,0BAA0B,IAAI,OAAO,CAAC,OAAO,EAAE,2BAA2B;oBAC9F;gBACF;YACF;YACA,MAAM,QAAQ,MAAM,CAAC;gBACnB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;QACF;QACA,gBAAgB,OAAO;YACrB,MAAM,QAAQ,UAAU,CAAC;gBACvB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;QACF;QACA,eAAe,OAAO;YACpB,MAAM,QAAQ,MAAM,CAAC;gBACnB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;QACF;QACA,gBAAgB,OAAO;YACrB,IAAI,kBAAkB;gBACpB,IAAI,OAAO,0BAA0B,UAAU;oBAC7C,MAAM,gBAAgB,MAAM,iBAAiB,GAAG,CAC9C,CAAC,gBAAgB,EAAE,uBAAuB;oBAE5C,MAAM,WAAW,gBAAgB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE,iBAAiB,EAAE;oBAClE,IAAI,CAAC,UAAU;oBACf,KAAK,MAAM,WAAW,SAAU;wBAC9B,MAAM,iBAAiB,MAAM,CAAC,QAAQ,KAAK;oBAC7C;gBACF,OAAO;oBACL,KAAK,MAAM,gBAAgB,sBAAuB;wBAChD,MAAM,UAAU,MAAM,iBAAiB,GAAG,CAAC;wBAC3C,IAAI,SAAS;4BACX,MAAM,iBAAiB,MAAM,CAAC;wBAChC;oBACF;gBACF;gBACA,IAAI,CAAC,QAAQ,OAAO,EAAE,0BAA0B,IAAI,OAAO,CAAC,OAAO,EAAE,2BAA2B;oBAC9F;gBACF;YACF;YACA,MAAM,QAAQ,UAAU,CAAC;gBACvB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO,MAAM,OAAO,CAAC,yBAAyB,UAAU;wBACxD,OAAO;wBACP,UAAU,MAAM,OAAO,CAAC,yBAAyB,OAAO,KAAK;oBAC/D;iBACD;YACH;QACF;QACA,eAAe,OAAO,OAAO,WAAW;YACtC,MAAM,UAAU,MAAM,QAAQ,QAAQ,CAAC;gBACrC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH,GAAG,IAAI,CAAC,CAAC;gBACP,OAAO,SAAS,IAAI,CAAC,CAAC,IAAM,EAAE,UAAU,KAAK;YAC/C;YACA,IAAI,SAAS;gBACX,MAAM,OAAO,MAAM,QAAQ,OAAO,CAAC;oBACjC,OAAO;oBACP,OAAO;wBACL;4BACE,OAAO,QAAQ,MAAM;4BACrB,OAAO;wBACT;qBACD;gBACH;gBACA,IAAI,MAAM;oBACR,OAAO;wBACL;wBACA,UAAU;4BAAC;yBAAQ;oBACrB;gBACF,OAAO;oBACL,MAAM,QAAQ,MAAM,QAAQ,OAAO,CAAC;wBAClC,OAAO;wBACP,OAAO;4BACL;gCACE,OAAO,MAAM,WAAW;gCACxB,OAAO;4BACT;yBACD;oBACH;oBACA,IAAI,OAAO;wBACT,OAAO;4BACL,MAAM;4BACN,UAAU;gCAAC;6BAAQ;wBACrB;oBACF;oBACA,OAAO;gBACT;YACF,OAAO;gBACL,MAAM,OAAO,MAAM,QAAQ,OAAO,CAAC;oBACjC,OAAO;oBACP,OAAO;wBACL;4BACE,OAAO,MAAM,WAAW;4BACxB,OAAO;wBACT;qBACD;gBACH;gBACA,IAAI,MAAM;oBACR,MAAM,WAAW,MAAM,QAAQ,QAAQ,CAAC;wBACtC,OAAO;wBACP,OAAO;4BACL;gCACE,OAAO,KAAK,EAAE;gCACd,OAAO;4BACT;yBACD;oBACH;oBACA,OAAO;wBACL;wBACA,UAAU,YAAY,EAAE;oBAC1B;gBACF,OAAO;oBACL,OAAO;gBACT;YACF;QACF;QACA,iBAAiB,OAAO,OAAO;YAC7B,MAAM,OAAO,MAAM,QAAQ,OAAO,CAAC;gBACjC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO,MAAM,WAAW;wBACxB,OAAO;oBACT;iBACD;YACH;YACA,IAAI,CAAC,MAAM,OAAO;YAClB,IAAI,UAAU,iBAAiB;gBAC7B,MAAM,WAAW,MAAM,QAAQ,QAAQ,CAAC;oBACtC,OAAO;oBACP,OAAO;wBACL;4BACE,OAAO,KAAK,EAAE;4BACd,OAAO;wBACT;qBACD;gBACH;gBACA,OAAO;oBACL;oBACA;gBACF;YACF;YACA,OAAO;gBACL;gBACA,UAAU,EAAE;YACd;QACF;QACA,cAAc,OAAO;YACnB,MAAM,OAAO,MAAM,QAAQ,OAAO,CAAC;gBACjC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,OAAO;QACT;QACA,aAAa,OAAO,SAAS;YAC3B,MAAM,WAAW,MAAM,gBACrB;gBACE,GAAG,OAAO;gBACV,WAAW,aAAa,GAAG,IAAI;gBAC/B,WAAW,aAAa,GAAG,IAAI;YACjC,GACA,WACA,KAAK,GACL;YAEF,OAAO;QACT;QACA,YAAY,OAAO,QAAQ,MAAM;YAC/B,MAAM,OAAO,MAAM,gBACjB,MACA;gBACE;oBACE,OAAO;oBACP,OAAO;gBACT;aACD,EACD,QACA,KAAK,GACL;YAEF,IAAI,oBAAoB,MAAM;gBAC5B,MAAM,UAAU,MAAM,iBAAiB,GAAG,CAAC,CAAC,gBAAgB,EAAE,QAAQ;gBACtE,IAAI,SAAS;oBACX,MAAM,MAAM,KAAK,GAAG;oBACpB,MAAM,OAAO,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE,YAAY,EAAE;oBACzC,MAAM,gBAAgB,KAAK,MAAM,CAAC,CAAC,IAAM,EAAE,SAAS,GAAG;oBACvD,MAAM,QAAQ,GAAG,CACf,cAAc,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE;wBAChC,MAAM,SAAS,MAAM,iBAAiB,GAAG,CAAC;wBAC1C,IAAI,CAAC,QAAQ;wBACb,MAAM,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;wBAC7B,IAAI,CAAC,QAAQ;wBACb,MAAM,aAAa,KAAK,GAAG,CACzB,KAAK,KAAK,CACR,CAAC,IAAI,KAAK,OAAO,OAAO,CAAC,SAAS,EAAE,OAAO,KAAK,GAAG,IAAI,MAEzD;wBAEF,MAAM,iBAAiB,GAAG,CACxB,OACA,KAAK,SAAS,CAAC;4BACb,SAAS,OAAO,OAAO;4BACvB;wBACF,IACA;oBAEJ;gBAEJ;YACF;YACA,OAAO;QACT;QACA,mBAAmB,OAAO,OAAO,MAAM;YACrC,MAAM,OAAO,MAAM,gBACjB,MACA;gBACE;oBACE,OAAO;oBACP,OAAO,MAAM,WAAW;gBAC1B;aACD,EACD,QACA,KAAK,GACL;YAEF,OAAO;QACT;QACA,gBAAgB,OAAO,QAAQ,UAAU;YACvC,MAAM,oBACJ;gBACE;YACF,GACA;gBACE;oBACE,OAAO;oBACP,OAAO;gBACT;gBACA;oBACE,OAAO;oBACP,OAAO;gBACT;aACD,EACD,WACA,KAAK,GACL;QAEJ;QACA,cAAc,OAAO;YACnB,MAAM,WAAW,MAAM,QAAQ,QAAQ,CAAC;gBACtC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,OAAO;QACT;QACA,aAAa,OAAO;YAClB,MAAM,UAAU,MAAM,QAAQ,OAAO,CAAC;gBACpC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,OAAO;QACT;QACA,yBAAyB,OAAO,WAAW;YACzC,MAAM,UAAU,MAAM,QAAQ,OAAO,CAAC;gBACpC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;oBACA;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,OAAO;QACT;QACA,qBAAqB,OAAO;YAC1B,MAAM,UAAU,MAAM,QAAQ,QAAQ,CAAC;gBACrC,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;YACA,OAAO;QACT;QACA,eAAe,OAAO,IAAI,MAAM;YAC9B,MAAM,UAAU,MAAM,gBACpB,MACA;gBAAC;oBAAE,OAAO;oBAAM,OAAO;gBAAG;aAAE,EAC5B,WACA,KAAK,GACL;YAEF,OAAO;QACT;QACA,yBAAyB,OAAO,MAAM;YACpC,MAAM,eAAe,MAAM,gBACzB;gBACE,WAAW,aAAa,GAAG,IAAI;gBAC/B,WAAW,aAAa,GAAG,IAAI;gBAC/B,GAAG,IAAI;YACT,GACA,gBACA,KAAK,GACL;YAEF,OAAO;QACT;QACA,uBAAuB,OAAO;YAC5B,MAAM,eAAe,MAAM,QAAQ,QAAQ,CAAC;gBAC1C,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;gBACD,QAAQ;oBACN,OAAO;oBACP,WAAW;gBACb;gBACA,OAAO;YACT;YACA,IAAI,CAAC,QAAQ,YAAY,EAAE,gBAAgB;gBACzC,MAAM,QAAQ,UAAU,CAAC;oBACvB,OAAO;oBACP,OAAO;wBACL;4BACE,OAAO;4BACP,OAAO,aAAa,GAAG,IAAI;4BAC3B,UAAU;wBACZ;qBACD;gBACH;YACF;YACA,MAAM,mBAAmB,YAAY,CAAC,EAAE;YACxC,OAAO;QACT;QACA,yBAAyB,OAAO;YAC9B,MAAM,QAAQ,MAAM,CAAC;gBACnB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;QACF;QACA,gCAAgC,OAAO;YACrC,MAAM,QAAQ,MAAM,CAAC;gBACnB,OAAO;gBACP,OAAO;oBACL;wBACE,OAAO;wBACP,OAAO;oBACT;iBACD;YACH;QACF;QACA,yBAAyB,OAAO,IAAI,MAAM;YACxC,MAAM,eAAe,MAAM,gBACzB,MACA;gBAAC;oBAAE,OAAO;oBAAM,OAAO;gBAAG;aAAE,EAC5B,gBACA,KAAK,GACL;YAEF,OAAO;QACT;IACF;AACF;AAEA,eAAe,WAAW,OAAO;IAC/B,IAAI,CAAC,QAAQ,QAAQ,EAAE;QACrB,MAAM,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;QAC7B,MAAM,WAAW,OAAO,IAAI,CAAC,QAAQ,MAAM,CAAC,CAAC,KAAK;YAChD,GAAG,CAAC,IAAI,GAAG,EAAE;YACb,OAAO;QACT,GAAG,CAAC;QACJ,yTAAA,CAAA,IAAM,CAAC,IAAI,CACT;QAEF,OAAO,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE,UAAU;IACjC;IACA,IAAI,OAAO,QAAQ,QAAQ,KAAK,YAAY;QAC1C,OAAO,QAAQ,QAAQ,CAAC;IAC1B;IACA,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,CAAA,GAAA,4TAAA,CAAA,IAAmB,AAAD,EAAE;IAC3D,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,4TAAA,CAAA,IAAe,CAAC;IAC5B;IACA,OAAO,CAAA,GAAA,4TAAA,CAAA,IAAa,AAAD,EAAE,QAAQ;QAC3B,MAAM,gBAAgB;QACtB,WAAW,eAAe,QAAQ,QAAQ,GAAG,QAAQ,QAAQ,CAAC,SAAS,GAAG;IAC5E,GAAG;AACL;AACA,SAAS,YAAY,MAAM,EAAE,MAAM;IACjC,IAAI,SAAS,OAAO,EAAE,GAAG;QACvB,IAAI,OAAO,EAAE;IACf,IAAI,CAAC;IACL,IAAK,MAAM,OAAO,OAAQ;QACxB,MAAM,QAAQ,MAAM,CAAC,IAAI;QACzB,MAAM,QAAQ,MAAM,CAAC,IAAI;QACzB,IAAI,UAAU,KAAK,GAAG;YACpB;QACF;QACA,MAAM,CAAC,MAAM,SAAS,IAAI,IAAI,GAAG;IACnC;IACA,OAAO;AACT;AACA,SAAS,cAAc,MAAM,EAAE,MAAM;IACnC,IAAI,CAAC,QAAQ;QACX,OAAO;IACT;IACA,IAAI,SAAS;QACX,IAAI,OAAO,EAAE;IACf;IACA,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,QAAS;QACjD,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,SAAS,IAAI,IAAI;IAC9C;IACA,OAAO;AACT;AAEA,SAAS,UAAU,MAAM;IACvB,MAAM,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;IAC7B,IAAI,SAAS,CAAC;IACd,IAAK,MAAM,OAAO,OAAQ;QACxB,MAAM,QAAQ,MAAM,CAAC,IAAI;QACzB,MAAM,SAAS,MAAM,MAAM;QAC3B,IAAI,eAAe,CAAC;QACpB,OAAO,OAAO,CAAC,QAAQ,OAAO,CAAC,CAAC,CAAC,MAAM,MAAM;YAC3C,YAAY,CAAC,MAAM,SAAS,IAAI,KAAK,GAAG;YACxC,IAAI,MAAM,UAAU,EAAE;gBACpB,MAAM,WAAW,MAAM,CAAC,MAAM,UAAU,CAAC,KAAK,CAAC;gBAC/C,IAAI,UAAU;oBACZ,YAAY,CAAC,MAAM,SAAS,IAAI,KAAK,CAAC,UAAU,GAAG;wBACjD,OAAO,SAAS,SAAS;wBACzB,OAAO,MAAM,UAAU,CAAC,KAAK;oBAC/B;gBACF;YACF;QACF;QACA,IAAI,MAAM,CAAC,MAAM,SAAS,CAAC,EAAE;YAC3B,MAAM,CAAC,MAAM,SAAS,CAAC,CAAC,MAAM,GAAG;gBAC/B,GAAG,MAAM,CAAC,MAAM,SAAS,CAAC,CAAC,MAAM;gBACjC,GAAG,YAAY;YACjB;YACA;QACF;QACA,MAAM,CAAC,MAAM,SAAS,CAAC,GAAG;YACxB,QAAQ;YACR,OAAO,MAAM,KAAK,IAAI;QACxB;IACF;IACA,OAAO;AACT;AAEA,MAAM,cAAc;IAClB,QAAQ;QAAC;QAAqB;QAAW;KAAO;IAChD,QAAQ;QACN;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,SAAS;QAAC;QAAQ;KAAU;IAC5B,MAAM;QAAC;QAAa;KAAO;AAC7B;AACA,MAAM,WAAW;IACf,QAAQ;QAAC;QAAW;KAAO;IAC3B,QAAQ;QACN;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IACD,SAAS;QAAC;QAAW;KAAU;IAC/B,MAAM;QAAC;QAAa;QAAY;KAAO;AACzC;AACA,MAAM,YAAY;IAChB,QAAQ;QAAC;KAAO;IAChB,QAAQ;QAAC;QAAW;KAAO;IAC3B,SAAS;QAAC;QAAW;KAAU;IAC/B,SAAS;IACT,MAAM;QAAC;QAAQ;KAAU;AAC3B;AACA,MAAM,WAAW;IACf,QAAQ;QAAC;QAAQ;KAAU;IAC3B,QAAQ;QAAC;QAAO;QAAU;QAAY;QAAW;QAAS;KAAS;IACnE,SAAS;QAAC;QAAO;KAAW;IAC5B,MAAM;QAAC;QAAY;KAAO;AAC5B;AACA,MAAM,MAAM;IACV,UAAU;IACV,OAAO;IACP,QAAQ;IACR,OAAO;AACT;AACA,SAAS,UAAU,cAAc,EAAE,SAAS,EAAE,MAAM;IAClD,SAAS,UAAU,IAAI;QACrB,OAAO,KAAK,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI;IAC9C;IACA,IAAI,cAAc,cAAc,cAAc,YAAY;QACxD,OAAO,eAAe,WAAW,GAAG,QAAQ,CAAC;IAC/C;IACA,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,WAAW,MAAM,OAAO,CAAC,aAAa,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAM,EAAE,WAAW,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAM,EAAE,WAAW;IACnI,OAAO,SAAS,QAAQ,CAAC,UAAU;AACrC;AACA,eAAe,cAAc,MAAM;IACjC,MAAM,mBAAmB,UAAU;IACnC,MAAM,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAY,AAAD,EAAE,OAAO,MAAM;IACzC,IAAI,EAAE,QAAQ,EAAE,EAAE,cAAc,MAAM,EAAE,GAAG,MAAM,CAAA,GAAA,4TAAA,CAAA,IAAmB,AAAD,EAAE;IACrE,IAAI,CAAC,QAAQ;QACX,OAAO,IAAI,CACT;QAEF,SAAS;IACX;IACA,IAAI,CAAC,IAAI;QACP,OAAO,KAAK,CACV;QAEF,QAAQ,IAAI,CAAC;IACf;IACA,MAAM,gBAAgB,MAAM,GAAG,aAAa,CAAC,SAAS;IACtD,MAAM,cAAc,EAAE;IACtB,MAAM,YAAY,EAAE;IACpB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,OAAO,OAAO,CAAC,kBAAmB;QAC3D,MAAM,QAAQ,cAAc,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK;QACnD,IAAI,CAAC,OAAO;YACV,MAAM,SAAS,YAAY,SAAS,CAAC,CAAC,IAAM,EAAE,KAAK,KAAK;YACxD,MAAM,YAAY;gBAChB,OAAO;gBACP,QAAQ,MAAM,MAAM;gBACpB,OAAO,MAAM,KAAK,IAAI;YACxB;YACA,MAAM,cAAc,YAAY,SAAS,CACvC,CAAC,IAAM,CAAC,EAAE,KAAK,IAAI,QAAQ,IAAI,UAAU,KAAK;YAEhD,IAAI,gBAAgB,CAAC,GAAG;gBACtB,IAAI,WAAW,CAAC,GAAG;oBACjB,YAAY,IAAI,CAAC;gBACnB,OAAO;oBACL,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG;wBAC3B,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM;wBAC7B,GAAG,MAAM,MAAM;oBACjB;gBACF;YACF,OAAO;gBACL,YAAY,MAAM,CAAC,aAAa,GAAG;YACrC;YACA;QACF;QACA,IAAI,kBAAkB,CAAC;QACvB,KAAK,MAAM,CAAC,WAAW,MAAM,IAAI,OAAO,OAAO,CAAC,MAAM,MAAM,EAAG;YAC7D,MAAM,SAAS,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK;YACpD,IAAI,CAAC,QAAQ;gBACX,eAAe,CAAC,UAAU,GAAG;gBAC7B;YACF;YACA,IAAI,UAAU,OAAO,QAAQ,EAAE,MAAM,IAAI,EAAE,SAAS;gBAClD;YACF,OAAO;gBACL,OAAO,IAAI,CACT,CAAC,MAAM,EAAE,UAAU,UAAU,EAAE,IAAI,gDAAgD,EAAE,MAAM,IAAI,CAAC,SAAS,EAAE,OAAO,QAAQ,CAAC,CAAC,CAAC;YAEjI;QACF;QACA,IAAI,OAAO,IAAI,CAAC,iBAAiB,MAAM,GAAG,GAAG;YAC3C,UAAU,IAAI,CAAC;gBACb,OAAO;gBACP,QAAQ;gBACR,OAAO,MAAM,KAAK,IAAI;YACxB;QACF;IACF;IACA,MAAM,aAAa,EAAE;IACrB,SAAS,QAAQ,KAAK,EAAE,SAAS;QAC/B,MAAM,OAAO,MAAM,IAAI;QACvB,MAAM,UAAU;YACd,QAAQ;gBACN,QAAQ;gBACR,UAAU;gBACV,OAAO,MAAM,MAAM,GAAG,iBAAiB,MAAM,UAAU,GAAG,gBAAgB;gBAC1E,OAAO,MAAM,MAAM,IAAI,MAAM,QAAQ,GAAG,iBAAiB,MAAM,UAAU,GAAG,gBAAgB;YAC9F;YACA,SAAS;gBACP,QAAQ;gBACR,UAAU;gBACV,OAAO;gBACP,OAAO;YACT;YACA,QAAQ;gBACN,QAAQ,MAAM,MAAM,GAAG,WAAW;gBAClC,UAAU,MAAM,MAAM,GAAG,WAAW;gBACpC,OAAO,MAAM,MAAM,GAAG,WAAW;gBACjC,OAAO,MAAM,MAAM,GAAG,WAAW;YACnC;YACA,MAAM;gBACJ,QAAQ;gBACR,UAAU;gBACV,OAAO;gBACP,OAAO;YACT;YACA,IAAI;gBACF,UAAU,OAAO,QAAQ,EAAE,UAAU,cAAc,WAAW;gBAC9D,OAAO,OAAO,QAAQ,EAAE,UAAU,cAAc,YAAY;gBAC5D,OAAO,OAAO,QAAQ,EAAE,UAAU,cAAc,YAAY;gBAC5D,QAAQ,OAAO,QAAQ,EAAE,UAAU,cAAc,YAAY;YAC/D;QACF;QACA,IAAI,cAAc,QAAQ,MAAM,UAAU,EAAE,UAAU,MAAM;YAC1D,OAAO,QAAQ,EAAE,CAAC,OAAO;QAC3B;QACA,IAAI,WAAW,YAAY,CAAC,SAAS,cAAc,SAAS,UAAU,GAAG;YACvE,OAAO;QACT;QACA,IAAI,SAAS,cAAc,SAAS,YAAY;YAC9C,OAAO;QACT;QACA,IAAI,MAAM,OAAO,CAAC,OAAO;YACvB,OAAO;QACT;QACA,OAAO,OAAO,CAAC,KAAK,CAAC,UAAU,SAAS;IAC1C;IACA,IAAI,UAAU,MAAM,EAAE;QACpB,KAAK,MAAM,SAAS,UAAW;YAC7B,KAAK,MAAM,CAAC,WAAW,MAAM,IAAI,OAAO,OAAO,CAAC,MAAM,MAAM,EAAG;gBAC7D,MAAM,OAAO,QAAQ,OAAO;gBAC5B,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,KAAK,EAAE,SAAS,CAAC,WAAW,MAAM,CAAC;oBACzE,MAAM,MAAM,QAAQ,KAAK,QAAQ,IAAI,OAAO,KAAK;oBACjD,IAAI,MAAM,UAAU,EAAE;wBACpB,MAAM,IAAI,UAAU,CAClB,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,UAAU,CAAC,KAAK,EAAE;oBAEzD;oBACA,IAAI,MAAM,MAAM,EAAE;wBAChB,MAAM,IAAI,MAAM;oBAClB;oBACA,OAAO;gBACT;gBACA,WAAW,IAAI,CAAC;YAClB;QACF;IACF;IACA,IAAI,YAAY,MAAM,EAAE;QACtB,KAAK,MAAM,SAAS,YAAa;YAC/B,IAAI,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,EAAE,SAAS,CACpD,MACA,OAAO,QAAQ,EAAE,UAAU,cAAc,WAAW,aAAa,WAAW,YAAY,WAAW,WAAW,WAAW,UAAU,gBAAgB,QACnJ,CAAC;gBACC,IAAI,OAAO,QAAQ,EAAE,UAAU,aAAa;oBAC1C,IAAI,WAAW,YAAY;wBACzB,OAAO,IAAI,UAAU,GAAG,OAAO;oBACjC;oBACA,OAAO,IAAI,aAAa,GAAG,UAAU,GAAG,OAAO;gBACjD;gBACA,OAAO,IAAI,UAAU,GAAG,OAAO;YACjC;YAEF,KAAK,MAAM,CAAC,WAAW,MAAM,IAAI,OAAO,OAAO,CAAC,MAAM,MAAM,EAAG;gBAC7D,MAAM,OAAO,QAAQ,OAAO;gBAC5B,MAAM,IAAI,SAAS,CAAC,WAAW,MAAM,CAAC;oBACpC,MAAM,MAAM,QAAQ,KAAK,QAAQ,IAAI,OAAO,KAAK;oBACjD,IAAI,MAAM,UAAU,EAAE;wBACpB,MAAM,IAAI,UAAU,CAClB,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,UAAU,CAAC,KAAK,EAAE;oBAEzD;oBACA,IAAI,MAAM,MAAM,EAAE;wBAChB,MAAM,IAAI,MAAM;oBAClB;oBACA,OAAO;gBACT;YACF;YACA,WAAW,IAAI,CAAC;QAClB;IACF;IACA,eAAe;QACb,KAAK,MAAM,aAAa,WAAY;YAClC,MAAM,UAAU,OAAO;QACzB;IACF;IACA,eAAe;QACb,MAAM,WAAW,WAAW,GAAG,CAAC,CAAC,IAAM,EAAE,OAAO,GAAG,GAAG;QACtD,OAAO,SAAS,IAAI,CAAC,WAAW;IAClC;IACA,OAAO;QAAE;QAAa;QAAW;QAAe;IAAkB;AACpE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8939, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs"],"sourcesContent":["import { APIError } from 'better-call';\n\nasync function validatePassword(ctx, data) {\n  const accounts = await ctx.context.internalAdapter.findAccounts(data.userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword) {\n    return false;\n  }\n  const compare = await ctx.context.password.verify({\n    hash: currentPassword,\n    password: data.password\n  });\n  return compare;\n}\nasync function checkPassword(userId, c) {\n  const accounts = await c.context.internalAdapter.findAccounts(userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword || !c.body.password) {\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"No password credential found\"\n    });\n  }\n  const compare = await c.context.password.verify({\n    hash: currentPassword,\n    password: c.body.password\n  });\n  if (!compare) {\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"Invalid password\"\n    });\n  }\n  return true;\n}\n\nexport { checkPassword as c, validatePassword as v };\n"],"names":[],"mappings":";;;;AAAA;;AAEA,eAAe,iBAAiB,GAAG,EAAE,IAAI;IACvC,MAAM,WAAW,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,MAAM;IAC3E,MAAM,oBAAoB,UAAU,KAClC,CAAC,UAAY,QAAQ,UAAU,KAAK;IAEtC,MAAM,kBAAkB,mBAAmB;IAC3C,IAAI,CAAC,qBAAqB,CAAC,iBAAiB;QAC1C,OAAO;IACT;IACA,MAAM,UAAU,MAAM,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;QAChD,MAAM;QACN,UAAU,KAAK,QAAQ;IACzB;IACA,OAAO;AACT;AACA,eAAe,cAAc,MAAM,EAAE,CAAC;IACpC,MAAM,WAAW,MAAM,EAAE,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC;IAC9D,MAAM,oBAAoB,UAAU,KAClC,CAAC,UAAY,QAAQ,UAAU,KAAK;IAEtC,MAAM,kBAAkB,mBAAmB;IAC3C,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE;QAC9D,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;YAChC,SAAS;QACX;IACF;IACA,MAAM,UAAU,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC9C,MAAM;QACN,UAAU,EAAE,IAAI,CAAC,QAAQ;IAC3B;IACA,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;YAChC,SAAS;QACX;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8983, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.Cbhy6WDJ.mjs"],"sourcesContent":["import { getEndpoints, router } from '../api/index.mjs';\nimport { defu } from 'defu';\nimport { verifyPassword, hashPassword } from '../crypto/index.mjs';\nimport { a as getAdapter, c as createInternalAdapter, e as getMigrations } from './better-auth.ByruPN9q.mjs';\nimport { g as getAuthTables } from './better-auth.DORkW_Ge.mjs';\nimport 'zod/v4';\nimport './better-auth.n2KFGwjY.mjs';\nimport { getCookies, createCookieGetter } from '../cookies/index.mjs';\nimport { c as createLogger, g as generateId } from './better-auth.DBGfIDnh.mjs';\nimport { t as socialProviders, B as BASE_ERROR_CODES } from './better-auth.z3dsxLxE.mjs';\nimport 'better-call';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport '@better-auth/utils/base64';\nimport 'jose';\nimport './better-auth.B4Qoxdgc.mjs';\nimport { e as env, a as isProduction } from './better-auth.8zoxzg-F.mjs';\nimport { c as checkPassword } from './better-auth.YwDQhoPc.mjs';\nimport { a as getBaseURL, g as getOrigin } from './better-auth.VTXNLFMT.mjs';\nimport { B as BetterAuthError } from './better-auth.DdzSJf-n.mjs';\n\nconst DEFAULT_SECRET = \"better-auth-secret-123456789\";\n\nconst init = async (options) => {\n  const adapter = await getAdapter(options);\n  const plugins = options.plugins || [];\n  const internalPlugins = getInternalPlugins(options);\n  const logger = createLogger(options.logger);\n  const baseURL = getBaseURL(options.baseURL, options.basePath);\n  const secret = options.secret || env.BETTER_AUTH_SECRET || env.AUTH_SECRET || DEFAULT_SECRET;\n  if (secret === DEFAULT_SECRET) {\n    if (isProduction) {\n      logger.error(\n        \"You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config.\"\n      );\n    }\n  }\n  options = {\n    ...options,\n    secret,\n    baseURL: baseURL ? new URL(baseURL).origin : \"\",\n    basePath: options.basePath || \"/api/auth\",\n    plugins: plugins.concat(internalPlugins)\n  };\n  const cookies = getCookies(options);\n  const tables = getAuthTables(options);\n  const providers = Object.keys(options.socialProviders || {}).map((key) => {\n    const value = options.socialProviders?.[key];\n    if (!value || value.enabled === false) {\n      return null;\n    }\n    if (!value.clientId) {\n      logger.warn(\n        `Social provider ${key} is missing clientId or clientSecret`\n      );\n    }\n    const provider = socialProviders[key](\n      value\n      // TODO: fix this\n    );\n    provider.disableImplicitSignUp = value.disableImplicitSignUp;\n    return provider;\n  }).filter((x) => x !== null);\n  const generateIdFunc = ({ model, size }) => {\n    if (typeof options.advanced?.generateId === \"function\") {\n      return options.advanced.generateId({ model, size });\n    }\n    if (typeof options?.advanced?.database?.generateId === \"function\") {\n      return options.advanced.database.generateId({ model, size });\n    }\n    return generateId(size);\n  };\n  const ctx = {\n    appName: options.appName || \"Better Auth\",\n    socialProviders: providers,\n    options,\n    tables,\n    trustedOrigins: getTrustedOrigins(options),\n    baseURL: baseURL || \"\",\n    sessionConfig: {\n      updateAge: options.session?.updateAge !== void 0 ? options.session.updateAge : 24 * 60 * 60,\n      // 24 hours\n      expiresIn: options.session?.expiresIn || 60 * 60 * 24 * 7,\n      // 7 days\n      freshAge: options.session?.freshAge === void 0 ? 60 * 60 * 24 : options.session.freshAge\n    },\n    secret,\n    rateLimit: {\n      ...options.rateLimit,\n      enabled: options.rateLimit?.enabled ?? isProduction,\n      window: options.rateLimit?.window || 10,\n      max: options.rateLimit?.max || 100,\n      storage: options.rateLimit?.storage || (options.secondaryStorage ? \"secondary-storage\" : \"memory\")\n    },\n    authCookies: cookies,\n    logger,\n    generateId: generateIdFunc,\n    session: null,\n    secondaryStorage: options.secondaryStorage,\n    password: {\n      hash: options.emailAndPassword?.password?.hash || hashPassword,\n      verify: options.emailAndPassword?.password?.verify || verifyPassword,\n      config: {\n        minPasswordLength: options.emailAndPassword?.minPasswordLength || 8,\n        maxPasswordLength: options.emailAndPassword?.maxPasswordLength || 128\n      },\n      checkPassword\n    },\n    setNewSession(session) {\n      this.newSession = session;\n    },\n    newSession: null,\n    adapter,\n    internalAdapter: createInternalAdapter(adapter, {\n      options,\n      hooks: options.databaseHooks ? [options.databaseHooks] : []}),\n    createAuthCookie: createCookieGetter(options),\n    async runMigrations() {\n      if (!options.database || \"updateMany\" in options.database) {\n        throw new BetterAuthError(\n          \"Database is not provided or it's an adapter. Migrations are only supported with a database instance.\"\n        );\n      }\n      const { runMigrations } = await getMigrations(options);\n      await runMigrations();\n    }\n  };\n  let { context } = runPluginInit(ctx);\n  return context;\n};\nfunction runPluginInit(ctx) {\n  let options = ctx.options;\n  const plugins = options.plugins || [];\n  let context = ctx;\n  const dbHooks = [];\n  for (const plugin of plugins) {\n    if (plugin.init) {\n      const result = plugin.init(context);\n      if (typeof result === \"object\") {\n        if (result.options) {\n          const { databaseHooks, ...restOpts } = result.options;\n          if (databaseHooks) {\n            dbHooks.push(databaseHooks);\n          }\n          options = defu(options, restOpts);\n        }\n        if (result.context) {\n          context = {\n            ...context,\n            ...result.context\n          };\n        }\n      }\n    }\n  }\n  dbHooks.push(options.databaseHooks);\n  context.internalAdapter = createInternalAdapter(ctx.adapter, {\n    options,\n    hooks: dbHooks.filter((u) => u !== void 0),\n    generateId: ctx.generateId\n  });\n  context.options = options;\n  return { context };\n}\nfunction getInternalPlugins(options) {\n  const plugins = [];\n  if (options.advanced?.crossSubDomainCookies?.enabled) ;\n  return plugins;\n}\nfunction getTrustedOrigins(options) {\n  const baseURL = getBaseURL(options.baseURL, options.basePath);\n  if (!baseURL) {\n    return [];\n  }\n  const trustedOrigins = [new URL(baseURL).origin];\n  if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {\n    trustedOrigins.push(...options.trustedOrigins);\n  }\n  const envTrustedOrigins = env.BETTER_AUTH_TRUSTED_ORIGINS;\n  if (envTrustedOrigins) {\n    trustedOrigins.push(...envTrustedOrigins.split(\",\"));\n  }\n  if (trustedOrigins.filter((x) => !x).length) {\n    throw new BetterAuthError(\n      \"A provided trusted origin is invalid, make sure your trusted origins list is properly defined.\"\n    );\n  }\n  return trustedOrigins;\n}\n\nconst betterAuth = (options) => {\n  const authContext = init(options);\n  const { api } = getEndpoints(authContext, options);\n  const errorCodes = options.plugins?.reduce((acc, plugin) => {\n    if (plugin.$ERROR_CODES) {\n      return {\n        ...acc,\n        ...plugin.$ERROR_CODES\n      };\n    }\n    return acc;\n  }, {});\n  return {\n    handler: async (request) => {\n      const ctx = await authContext;\n      const basePath = ctx.options.basePath || \"/api/auth\";\n      if (!ctx.options.baseURL) {\n        const baseURL = getBaseURL(void 0, basePath, request);\n        if (baseURL) {\n          ctx.baseURL = baseURL;\n          ctx.options.baseURL = getOrigin(ctx.baseURL) || void 0;\n        } else {\n          throw new BetterAuthError(\n            \"Could not get base URL from request. Please provide a valid base URL.\"\n          );\n        }\n      }\n      ctx.trustedOrigins = [\n        ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],\n        ctx.options.baseURL\n      ];\n      const { handler } = router(ctx, options);\n      return handler(request);\n    },\n    api,\n    options,\n    $context: authContext,\n    $Infer: {},\n    $ERROR_CODES: {\n      ...errorCodes,\n      ...BASE_ERROR_CODES\n    }\n  };\n};\n\nexport { betterAuth as b };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9243, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs"],"sourcesContent":["function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport { capitalizeFirstLetter as c };\n"],"names":[],"mappings":";;;AAAA,SAAS,sBAAsB,GAAG;IAChC,OAAO,IAAI,MAAM,CAAC,GAAG,WAAW,KAAK,IAAI,KAAK,CAAC;AACjD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9262, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.ffWeg50w.mjs"],"sourcesContent":["const PROTO_POLLUTION_PATTERNS = {\n  proto: /\"(?:_|\\\\u0{2}5[Ff]){2}(?:p|\\\\u0{2}70)(?:r|\\\\u0{2}72)(?:o|\\\\u0{2}6[Ff])(?:t|\\\\u0{2}74)(?:o|\\\\u0{2}6[Ff])(?:_|\\\\u0{2}5[Ff]){2}\"\\s*:/,\n  constructor: /\"(?:c|\\\\u0063)(?:o|\\\\u006[Ff])(?:n|\\\\u006[Ee])(?:s|\\\\u0073)(?:t|\\\\u0074)(?:r|\\\\u0072)(?:u|\\\\u0075)(?:c|\\\\u0063)(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:r|\\\\u0072)\"\\s*:/,\n  protoShort: /\"__proto__\"\\s*:/,\n  constructorShort: /\"constructor\"\\s*:/\n};\nconst JSON_SIGNATURE = /^\\s*[\"[{]|^\\s*-?\\d{1,16}(\\.\\d{1,17})?([Ee][+-]?\\d+)?\\s*$/;\nconst SPECIAL_VALUES = {\n  true: true,\n  false: false,\n  null: null,\n  undefined: void 0,\n  nan: Number.NaN,\n  infinity: Number.POSITIVE_INFINITY,\n  \"-infinity\": Number.NEGATIVE_INFINITY\n};\nconst ISO_DATE_REGEX = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{1,7}))?(?:Z|([+-])(\\d{2}):(\\d{2}))$/;\nfunction isValidDate(date) {\n  return date instanceof Date && !isNaN(date.getTime());\n}\nfunction parseISODate(value) {\n  const match = ISO_DATE_REGEX.exec(value);\n  if (!match) return null;\n  const [\n    ,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    ms,\n    offsetSign,\n    offsetHour,\n    offsetMinute\n  ] = match;\n  let date = new Date(\n    Date.UTC(\n      parseInt(year, 10),\n      parseInt(month, 10) - 1,\n      parseInt(day, 10),\n      parseInt(hour, 10),\n      parseInt(minute, 10),\n      parseInt(second, 10),\n      ms ? parseInt(ms.padEnd(3, \"0\"), 10) : 0\n    )\n  );\n  if (offsetSign) {\n    const offset = (parseInt(offsetHour, 10) * 60 + parseInt(offsetMinute, 10)) * (offsetSign === \"+\" ? -1 : 1);\n    date.setUTCMinutes(date.getUTCMinutes() + offset);\n  }\n  return isValidDate(date) ? date : null;\n}\nfunction betterJSONParse(value, options = {}) {\n  const {\n    strict = false,\n    warnings = false,\n    reviver,\n    parseDates = true\n  } = options;\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  const trimmed = value.trim();\n  if (trimmed[0] === '\"' && trimmed.endsWith('\"') && !trimmed.slice(1, -1).includes('\"')) {\n    return trimmed.slice(1, -1);\n  }\n  const lowerValue = trimmed.toLowerCase();\n  if (lowerValue.length <= 9 && lowerValue in SPECIAL_VALUES) {\n    return SPECIAL_VALUES[lowerValue];\n  }\n  if (!JSON_SIGNATURE.test(trimmed)) {\n    if (strict) {\n      throw new SyntaxError(\"[better-json] Invalid JSON\");\n    }\n    return value;\n  }\n  const hasProtoPattern = Object.entries(PROTO_POLLUTION_PATTERNS).some(\n    ([key, pattern]) => {\n      const matches = pattern.test(trimmed);\n      if (matches && warnings) {\n        console.warn(\n          `[better-json] Detected potential prototype pollution attempt using ${key} pattern`\n        );\n      }\n      return matches;\n    }\n  );\n  if (hasProtoPattern && strict) {\n    throw new Error(\n      \"[better-json] Potential prototype pollution attempt detected\"\n    );\n  }\n  try {\n    const secureReviver = (key, value2) => {\n      if (key === \"__proto__\" || key === \"constructor\" && value2 && typeof value2 === \"object\" && \"prototype\" in value2) {\n        if (warnings) {\n          console.warn(\n            `[better-json] Dropping \"${key}\" key to prevent prototype pollution`\n          );\n        }\n        return void 0;\n      }\n      if (parseDates && typeof value2 === \"string\") {\n        const date = parseISODate(value2);\n        if (date) {\n          return date;\n        }\n      }\n      return reviver ? reviver(key, value2) : value2;\n    };\n    return JSON.parse(trimmed, secureReviver);\n  } catch (error) {\n    if (strict) {\n      throw error;\n    }\n    return value;\n  }\n}\nfunction parseJSON(value, options = { strict: true }) {\n  return betterJSONParse(value, options);\n}\n\nexport { parseJSON as p };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9359, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DbQJKdHV.mjs"],"sourcesContent":["import { i as createAuthMiddleware, l as sessionMiddleware } from './better-auth.z3dsxLxE.mjs';\nimport 'better-call';\nimport * as z from 'zod/v4';\nimport './better-auth.8zoxzg-F.mjs';\nimport '@better-auth/utils/base64';\nimport '@better-auth/utils/hmac';\nimport '@better-auth/utils/binary';\nimport './better-auth.n2KFGwjY.mjs';\nimport { g as generateId } from './better-auth.DBGfIDnh.mjs';\nimport 'defu';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport 'jose';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport './better-auth.B4Qoxdgc.mjs';\n\nconst orgMiddleware = createAuthMiddleware(async () => {\n  return {};\n});\nconst orgSessionMiddleware = createAuthMiddleware(\n  {\n    use: [sessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    return {\n      session\n    };\n  }\n);\n\nconst role = z.string();\nconst invitationStatus = z.enum([\"pending\", \"accepted\", \"rejected\", \"canceled\"]).default(\"pending\");\nz.object({\n  id: z.string().default(generateId),\n  name: z.string(),\n  slug: z.string(),\n  logo: z.string().nullish().optional(),\n  metadata: z.record(z.string(), z.unknown()).or(z.string().transform((v) => JSON.parse(v))).optional(),\n  createdAt: z.date()\n});\nz.object({\n  id: z.string().default(generateId),\n  organizationId: z.string(),\n  userId: z.coerce.string(),\n  role,\n  createdAt: z.date().default(() => /* @__PURE__ */ new Date())\n});\nz.object({\n  id: z.string().default(generateId),\n  organizationId: z.string(),\n  email: z.string(),\n  role,\n  status: invitationStatus,\n  teamId: z.string().optional(),\n  inviterId: z.string(),\n  expiresAt: z.date()\n});\nconst teamSchema = z.object({\n  id: z.string().default(generateId),\n  name: z.string().min(1),\n  organizationId: z.string(),\n  createdAt: z.date(),\n  updatedAt: z.date().optional()\n});\nz.object({\n  id: z.string().default(generateId),\n  teamId: z.string(),\n  userId: z.string(),\n  createdAt: z.date().default(() => /* @__PURE__ */ new Date())\n});\nconst defaultRoles = [\"admin\", \"member\", \"owner\"];\nz.union([\n  z.enum(defaultRoles),\n  z.array(z.enum(defaultRoles))\n]);\n\nexport { orgSessionMiddleware as a, orgMiddleware as o, teamSchema as t };\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,yTAAA,CAAA,IAAoB,AAAD,EAAE;IACzC,OAAO,CAAC;AACV;AACA,MAAM,uBAAuB,CAAA,GAAA,yTAAA,CAAA,IAAoB,AAAD,EAC9C;IACE,KAAK;QAAC,yTAAA,CAAA,IAAiB;KAAC;AAC1B,GACA,OAAO;IACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;IACnC,OAAO;QACL;IACF;AACF;AAGF,MAAM,OAAO,kMAAA,CAAA,SAAQ;AACrB,MAAM,mBAAmB,kMAAA,CAAA,OAAM,CAAC;IAAC;IAAW;IAAY;IAAY;CAAW,EAAE,OAAO,CAAC;AACzF,kMAAA,CAAA,SAAQ,CAAC;IACP,IAAI,kMAAA,CAAA,SAAQ,GAAG,OAAO,CAAC,yTAAA,CAAA,IAAU;IACjC,MAAM,kMAAA,CAAA,SAAQ;IACd,MAAM,kMAAA,CAAA,SAAQ;IACd,MAAM,kMAAA,CAAA,SAAQ,GAAG,OAAO,GAAG,QAAQ;IACnC,UAAU,kMAAA,CAAA,SAAQ,CAAC,kMAAA,CAAA,SAAQ,IAAI,kMAAA,CAAA,UAAS,IAAI,EAAE,CAAC,kMAAA,CAAA,SAAQ,GAAG,SAAS,CAAC,CAAC,IAAM,KAAK,KAAK,CAAC,KAAK,QAAQ;IACnG,WAAW,kMAAA,CAAA,OAAM;AACnB;AACA,kMAAA,CAAA,SAAQ,CAAC;IACP,IAAI,kMAAA,CAAA,SAAQ,GAAG,OAAO,CAAC,yTAAA,CAAA,IAAU;IACjC,gBAAgB,kMAAA,CAAA,SAAQ;IACxB,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM;IACvB;IACA,WAAW,kMAAA,CAAA,OAAM,GAAG,OAAO,CAAC,IAAM,aAAa,GAAG,IAAI;AACxD;AACA,kMAAA,CAAA,SAAQ,CAAC;IACP,IAAI,kMAAA,CAAA,SAAQ,GAAG,OAAO,CAAC,yTAAA,CAAA,IAAU;IACjC,gBAAgB,kMAAA,CAAA,SAAQ;IACxB,OAAO,kMAAA,CAAA,SAAQ;IACf;IACA,QAAQ;IACR,QAAQ,kMAAA,CAAA,SAAQ,GAAG,QAAQ;IAC3B,WAAW,kMAAA,CAAA,SAAQ;IACnB,WAAW,kMAAA,CAAA,OAAM;AACnB;AACA,MAAM,aAAa,kMAAA,CAAA,SAAQ,CAAC;IAC1B,IAAI,kMAAA,CAAA,SAAQ,GAAG,OAAO,CAAC,yTAAA,CAAA,IAAU;IACjC,MAAM,kMAAA,CAAA,SAAQ,GAAG,GAAG,CAAC;IACrB,gBAAgB,kMAAA,CAAA,SAAQ;IACxB,WAAW,kMAAA,CAAA,OAAM;IACjB,WAAW,kMAAA,CAAA,OAAM,GAAG,QAAQ;AAC9B;AACA,kMAAA,CAAA,SAAQ,CAAC;IACP,IAAI,kMAAA,CAAA,SAAQ,GAAG,OAAO,CAAC,yTAAA,CAAA,IAAU;IACjC,QAAQ,kMAAA,CAAA,SAAQ;IAChB,QAAQ,kMAAA,CAAA,SAAQ;IAChB,WAAW,kMAAA,CAAA,OAAM,GAAG,OAAO,CAAC,IAAM,aAAa,GAAG,IAAI;AACxD;AACA,MAAM,eAAe;IAAC;IAAS;IAAU;CAAQ;AACjD,kMAAA,CAAA,QAAO,CAAC;IACN,kMAAA,CAAA,OAAM,CAAC;IACP,kMAAA,CAAA,QAAO,CAAC,kMAAA,CAAA,OAAM,CAAC;CAChB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9471, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.Dt0CvI2z.mjs"],"sourcesContent":["import { defaultRoles } from '../plugins/organization/access/index.mjs';\n\nconst hasPermission = (input) => {\n  if (!input.permissions && !input.permission) {\n    return false;\n  }\n  const roles = input.role.split(\",\");\n  const acRoles = input.options.roles || defaultRoles;\n  const creatorRole = input.options.creatorRole || \"owner\";\n  const isCreator = roles.includes(creatorRole);\n  const allowCreatorsAllPermissions = input.allowCreatorAllPermissions || false;\n  if (isCreator && allowCreatorsAllPermissions) return true;\n  for (const role of roles) {\n    const _role = acRoles[role];\n    const result = _role?.authorize(input.permissions ?? input.permission);\n    if (result?.success) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport { hasPermission as h };\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,CAAC;IACrB,IAAI,CAAC,MAAM,WAAW,IAAI,CAAC,MAAM,UAAU,EAAE;QAC3C,OAAO;IACT;IACA,MAAM,QAAQ,MAAM,IAAI,CAAC,KAAK,CAAC;IAC/B,MAAM,UAAU,MAAM,OAAO,CAAC,KAAK,IAAI,+TAAA,CAAA,eAAY;IACnD,MAAM,cAAc,MAAM,OAAO,CAAC,WAAW,IAAI;IACjD,MAAM,YAAY,MAAM,QAAQ,CAAC;IACjC,MAAM,8BAA8B,MAAM,0BAA0B,IAAI;IACxE,IAAI,aAAa,6BAA6B,OAAO;IACrD,KAAK,MAAM,QAAQ,MAAO;QACxB,MAAM,QAAQ,OAAO,CAAC,KAAK;QAC3B,MAAM,SAAS,OAAO,UAAU,MAAM,WAAW,IAAI,MAAM,UAAU;QACrE,IAAI,QAAQ,SAAS;YACnB,OAAO;QACT;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9500, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DXqcUO8W.mjs"],"sourcesContent":["import * as z from 'zod/v4';\n\nfunction toZodSchema({\n  fields,\n  isClientSide\n}) {\n  const zodFields = Object.keys(fields).reduce((acc, key) => {\n    const field = fields[key];\n    if (!field) {\n      return acc;\n    }\n    if (isClientSide && field.input === false) {\n      return acc;\n    }\n    if (field.type === \"string[]\" || field.type === \"number[]\") {\n      return {\n        ...acc,\n        [key]: z.array(field.type === \"string[]\" ? z.string() : z.number())\n      };\n    }\n    if (Array.isArray(field.type)) {\n      return {\n        ...acc,\n        [key]: z.any()\n      };\n    }\n    let schema2 = z[field.type]();\n    if (field?.required === false) {\n      schema2 = schema2.optional();\n    }\n    if (field?.returned === false) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: schema2\n    };\n  }, {});\n  const schema = z.object(zodFields);\n  return schema;\n}\n\nexport { toZodSchema as t };\n"],"names":[],"mappings":";;;AAAA;;AAEA,SAAS,YAAY,EACnB,MAAM,EACN,YAAY,EACb;IACC,MAAM,YAAY,OAAO,IAAI,CAAC,QAAQ,MAAM,CAAC,CAAC,KAAK;QACjD,MAAM,QAAQ,MAAM,CAAC,IAAI;QACzB,IAAI,CAAC,OAAO;YACV,OAAO;QACT;QACA,IAAI,gBAAgB,MAAM,KAAK,KAAK,OAAO;YACzC,OAAO;QACT;QACA,IAAI,MAAM,IAAI,KAAK,cAAc,MAAM,IAAI,KAAK,YAAY;YAC1D,OAAO;gBACL,GAAG,GAAG;gBACN,CAAC,IAAI,EAAE,sLAAE,KAAK,CAAC,MAAM,IAAI,KAAK,aAAa,sLAAE,MAAM,KAAK,sLAAE,MAAM;YAClE;QACF;QACA,IAAI,MAAM,OAAO,CAAC,MAAM,IAAI,GAAG;YAC7B,OAAO;gBACL,GAAG,GAAG;gBACN,CAAC,IAAI,EAAE,sLAAE,GAAG;YACd;QACF;QACA,IAAI,UAAU,qLAAC,CAAC,MAAM,IAAI,CAAC;QAC3B,IAAI,OAAO,aAAa,OAAO;YAC7B,UAAU,QAAQ,QAAQ;QAC5B;QACA,IAAI,OAAO,aAAa,OAAO;YAC7B,OAAO;QACT;QACA,OAAO;YACL,GAAG,GAAG;YACN,CAAC,IAAI,EAAE;QACT;IACF,GAAG,CAAC;IACJ,MAAM,SAAS,sLAAE,MAAM,CAAC;IACxB,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9546, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.CXlGSHh_.mjs"],"sourcesContent":["import { APIError } from 'better-call';\nimport * as z from 'zod/v4';\nimport { j as createAuthEndpoint, k as getSessionFromCtx, l as sessionMiddleware, B as BASE_ERROR_CODES, a2 as requestOnlySessionMiddleware } from './better-auth.z3dsxLxE.mjs';\nimport './better-auth.8zoxzg-F.mjs';\nimport '@better-auth/utils/base64';\nimport '@better-auth/utils/hmac';\nimport '@better-auth/utils/binary';\nimport './better-auth.n2KFGwjY.mjs';\nimport { g as getDate } from './better-auth.CW6D9eSx.mjs';\nimport { B as BetterAuthError } from './better-auth.DdzSJf-n.mjs';\nimport { p as parseJSON } from './better-auth.ffWeg50w.mjs';\nimport { o as orgMiddleware, a as orgSessionMiddleware, t as teamSchema } from './better-auth.DbQJKdHV.mjs';\nimport { setSessionCookie } from '../cookies/index.mjs';\nimport './better-auth.DBGfIDnh.mjs';\nimport 'defu';\nimport { h as hasPermission } from './better-auth.Dt0CvI2z.mjs';\nimport { t as toZodSchema } from './better-auth.DXqcUO8W.mjs';\nimport '@better-auth/utils/random';\nimport '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport 'jose';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport './better-auth.B4Qoxdgc.mjs';\nimport 'kysely';\nimport { defaultRoles } from '../plugins/organization/access/index.mjs';\n\nconst shimContext = (originalObject, newContext) => {\n  const shimmedObj = {};\n  for (const [key, value] of Object.entries(originalObject)) {\n    shimmedObj[key] = (ctx) => {\n      return value({\n        ...ctx,\n        context: {\n          ...newContext,\n          ...ctx.context\n        }\n      });\n    };\n    shimmedObj[key].path = value.path;\n    shimmedObj[key].method = value.method;\n    shimmedObj[key].options = value.options;\n    shimmedObj[key].headers = value.headers;\n  }\n  return shimmedObj;\n};\n\nconst getOrgAdapter = (context, options) => {\n  const adapter = context.adapter;\n  return {\n    findOrganizationBySlug: async (slug) => {\n      const organization = await adapter.findOne({\n        model: \"organization\",\n        where: [\n          {\n            field: \"slug\",\n            value: slug\n          }\n        ]\n      });\n      return organization;\n    },\n    createOrganization: async (data) => {\n      const organization = await adapter.create({\n        model: \"organization\",\n        data: {\n          ...data.organization,\n          metadata: data.organization.metadata ? JSON.stringify(data.organization.metadata) : void 0\n        }\n      });\n      return {\n        ...organization,\n        metadata: organization.metadata && typeof organization.metadata === \"string\" ? JSON.parse(organization.metadata) : void 0\n      };\n    },\n    findMemberByEmail: async (data) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"email\",\n            value: data.email\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"userId\",\n            value: user.id\n          }\n        ]\n      });\n      if (!member) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    listMembers: async (data) => {\n      const members = await Promise.all([\n        adapter.findMany({\n          model: \"member\",\n          where: [\n            { field: \"organizationId\", value: data.organizationId },\n            ...data.filter?.field ? [\n              {\n                field: data.filter?.field,\n                value: data.filter?.value\n              }\n            ] : []\n          ],\n          limit: data.limit || options?.membershipLimit || 100,\n          offset: data.offset || 0,\n          sortBy: data.sortBy ? { field: data.sortBy, direction: data.sortOrder || \"asc\" } : void 0\n        }),\n        adapter.count({\n          model: \"member\",\n          where: [\n            { field: \"organizationId\", value: data.organizationId },\n            ...data.filter?.field ? [\n              {\n                field: data.filter?.field,\n                value: data.filter?.value\n              }\n            ] : []\n          ]\n        })\n      ]);\n      const users = await adapter.findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: members[0].map((member) => member.userId),\n            operator: \"in\"\n          }\n        ]\n      });\n      return {\n        members: members[0].map((member) => {\n          const user = users.find((user2) => user2.id === member.userId);\n          if (!user) {\n            throw new BetterAuthError(\n              \"Unexpected error: User not found for member\"\n            );\n          }\n          return {\n            ...member,\n            user: {\n              id: user.id,\n              name: user.name,\n              email: user.email,\n              image: user.image\n            }\n          };\n        }),\n        total: members[1]\n      };\n    },\n    findMemberByOrgId: async (data) => {\n      const [member, user] = await Promise.all([\n        await adapter.findOne({\n          model: \"member\",\n          where: [\n            {\n              field: \"userId\",\n              value: data.userId\n            },\n            {\n              field: \"organizationId\",\n              value: data.organizationId\n            }\n          ]\n        }),\n        await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              field: \"id\",\n              value: data.userId\n            }\n          ]\n        })\n      ]);\n      if (!user || !member) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    findMemberById: async (memberId) => {\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ]\n      });\n      if (!member) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: member.userId\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      return {\n        ...member,\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image\n        }\n      };\n    },\n    createMember: async (data) => {\n      const member = await adapter.create({\n        model: \"member\",\n        data: {\n          ...data,\n          createdAt: /* @__PURE__ */ new Date()\n        }\n      });\n      return member;\n    },\n    updateMember: async (memberId, role) => {\n      const member = await adapter.update({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ],\n        update: {\n          role\n        }\n      });\n      return member;\n    },\n    deleteMember: async (memberId) => {\n      const member = await adapter.delete({\n        model: \"member\",\n        where: [\n          {\n            field: \"id\",\n            value: memberId\n          }\n        ]\n      });\n      return member;\n    },\n    updateOrganization: async (organizationId, data) => {\n      const organization = await adapter.update({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ],\n        update: {\n          ...data,\n          metadata: typeof data.metadata === \"object\" ? JSON.stringify(data.metadata) : data.metadata\n        }\n      });\n      if (!organization) {\n        return null;\n      }\n      return {\n        ...organization,\n        metadata: organization.metadata ? parseJSON(organization.metadata) : void 0\n      };\n    },\n    deleteOrganization: async (organizationId) => {\n      await adapter.delete({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ]\n      });\n      return organizationId;\n    },\n    setActiveOrganization: async (sessionToken, organizationId) => {\n      const session = await context.internalAdapter.updateSession(\n        sessionToken,\n        {\n          activeOrganizationId: organizationId\n        }\n      );\n      return session;\n    },\n    findOrganizationById: async (organizationId) => {\n      const organization = await adapter.findOne({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationId\n          }\n        ]\n      });\n      return organization;\n    },\n    checkMembership: async ({\n      userId,\n      organizationId\n    }) => {\n      const member = await adapter.findOne({\n        model: \"member\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      return member;\n    },\n    /**\n     * @requires db\n     */\n    findFullOrganization: async ({\n      organizationId,\n      isSlug,\n      includeTeams,\n      membersLimit\n    }) => {\n      const org = await adapter.findOne({\n        model: \"organization\",\n        where: [{ field: isSlug ? \"slug\" : \"id\", value: organizationId }]\n      });\n      if (!org) {\n        return null;\n      }\n      const [invitations, members, teams] = await Promise.all([\n        adapter.findMany({\n          model: \"invitation\",\n          where: [{ field: \"organizationId\", value: org.id }]\n        }),\n        adapter.findMany({\n          model: \"member\",\n          where: [{ field: \"organizationId\", value: org.id }],\n          limit: membersLimit ?? options?.membershipLimit ?? 100\n        }),\n        includeTeams ? adapter.findMany({\n          model: \"team\",\n          where: [{ field: \"organizationId\", value: org.id }]\n        }) : null\n      ]);\n      if (!org) return null;\n      const userIds = members.map((member) => member.userId);\n      const users = userIds.length > 0 ? await adapter.findMany({\n        model: \"user\",\n        where: [{ field: \"id\", value: userIds, operator: \"in\" }],\n        limit: options?.membershipLimit || 100\n      }) : [];\n      const userMap = new Map(users.map((user) => [user.id, user]));\n      const membersWithUsers = members.map((member) => {\n        const user = userMap.get(member.userId);\n        if (!user) {\n          throw new BetterAuthError(\n            \"Unexpected error: User not found for member\"\n          );\n        }\n        return {\n          ...member,\n          user: {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            image: user.image\n          }\n        };\n      });\n      return {\n        ...org,\n        invitations,\n        members: membersWithUsers,\n        teams\n      };\n    },\n    listOrganizations: async (userId) => {\n      const members = await adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      if (!members || members.length === 0) {\n        return [];\n      }\n      const organizationIds = members.map((member) => member.organizationId);\n      const organizations = await adapter.findMany({\n        model: \"organization\",\n        where: [\n          {\n            field: \"id\",\n            value: organizationIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return organizations;\n    },\n    createTeam: async (data) => {\n      const team = await adapter.create({\n        model: \"team\",\n        data\n      });\n      return team;\n    },\n    findTeamById: async ({\n      teamId,\n      organizationId,\n      includeTeamMembers\n    }) => {\n      const team = await adapter.findOne({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          },\n          ...organizationId ? [\n            {\n              field: \"organizationId\",\n              value: organizationId\n            }\n          ] : []\n        ]\n      });\n      if (!team) {\n        return null;\n      }\n      let members = [];\n      if (includeTeamMembers) {\n        members = await adapter.findMany({\n          model: \"teamMember\",\n          where: [\n            {\n              field: \"teamId\",\n              value: teamId\n            }\n          ],\n          limit: options?.membershipLimit || 100\n        });\n        return {\n          ...team,\n          members\n        };\n      }\n      return team;\n    },\n    updateTeam: async (teamId, data) => {\n      if (\"id\" in data) data.id = void 0;\n      const team = await adapter.update({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          }\n        ],\n        update: {\n          ...data\n        }\n      });\n      return team;\n    },\n    deleteTeam: async (teamId) => {\n      const team = await adapter.delete({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            value: teamId\n          }\n        ]\n      });\n      return team;\n    },\n    listTeams: async (organizationId) => {\n      const teams = await adapter.findMany({\n        model: \"team\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: organizationId\n          }\n        ]\n      });\n      return teams;\n    },\n    createTeamInvitation: async ({\n      email,\n      role,\n      teamId,\n      organizationId,\n      inviterId,\n      expiresIn = 1e3 * 60 * 60 * 48\n      // Default expiration: 48 hours\n    }) => {\n      const expiresAt = getDate(expiresIn);\n      const invitation = await adapter.create({\n        model: \"invitation\",\n        data: {\n          email,\n          role,\n          organizationId,\n          teamId,\n          inviterId,\n          status: \"pending\",\n          expiresAt\n        }\n      });\n      return invitation;\n    },\n    setActiveTeam: async (sessionToken, teamId) => {\n      const session = await context.internalAdapter.updateSession(\n        sessionToken,\n        {\n          activeTeamId: teamId\n        }\n      );\n      return session;\n    },\n    listTeamMembers: async (data) => {\n      const members = await adapter.findMany({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          }\n        ]\n      });\n      return members;\n    },\n    countTeamMembers: async (data) => {\n      const count = await adapter.count({\n        model: \"teamMember\",\n        where: [{ field: \"teamId\", value: data.teamId }]\n      });\n      return count;\n    },\n    countMembers: async (data) => {\n      const count = await adapter.count({\n        model: \"member\",\n        where: [{ field: \"organizationId\", value: data.organizationId }]\n      });\n      return count;\n    },\n    listTeamsByUser: async (data) => {\n      const members = await adapter.findMany({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n      const teams = await adapter.findMany({\n        model: \"team\",\n        where: [\n          {\n            field: \"id\",\n            operator: \"in\",\n            value: members.map((m) => m.teamId)\n          }\n        ]\n      });\n      return teams;\n    },\n    findTeamMember: async (data) => {\n      const member = await adapter.findOne({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          },\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n      return member;\n    },\n    findOrCreateTeamMember: async (data) => {\n      const member = await adapter.findOne({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          },\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n      if (member) return member;\n      return await adapter.create({\n        model: \"teamMember\",\n        data: {\n          teamId: data.teamId,\n          userId: data.userId,\n          createdAt: /* @__PURE__ */ new Date()\n        }\n      });\n    },\n    removeTeamMember: async (data) => {\n      await adapter.delete({\n        model: \"teamMember\",\n        where: [\n          {\n            field: \"teamId\",\n            value: data.teamId\n          },\n          {\n            field: \"userId\",\n            value: data.userId\n          }\n        ]\n      });\n    },\n    findInvitationsByTeamId: async (teamId) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"teamId\",\n            value: teamId\n          }\n        ]\n      });\n      return invitations;\n    },\n    listUserInvitations: async (email) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [{ field: \"email\", value: email }]\n      });\n      return invitations;\n    },\n    createInvitation: async ({\n      invitation,\n      user\n    }) => {\n      const defaultExpiration = 60 * 60 * 48;\n      const expiresAt = getDate(\n        options?.invitationExpiresIn || defaultExpiration,\n        \"sec\"\n      );\n      const invite = await adapter.create({\n        model: \"invitation\",\n        data: {\n          status: \"pending\",\n          expiresAt,\n          inviterId: user.id,\n          ...invitation,\n          teamId: invitation.teamIds.join(\",\")\n        }\n      });\n      return invite;\n    },\n    findInvitationById: async (id) => {\n      const invitation = await adapter.findOne({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n      return invitation;\n    },\n    findPendingInvitation: async (data) => {\n      const invitation = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"email\",\n            value: data.email\n          },\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"status\",\n            value: \"pending\"\n          }\n        ]\n      });\n      return invitation.filter(\n        (invite) => new Date(invite.expiresAt) > /* @__PURE__ */ new Date()\n      );\n    },\n    findPendingInvitations: async (data) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          },\n          {\n            field: \"status\",\n            value: \"pending\"\n          }\n        ]\n      });\n      return invitations.filter(\n        (invite) => new Date(invite.expiresAt) > /* @__PURE__ */ new Date()\n      );\n    },\n    listInvitations: async (data) => {\n      const invitations = await adapter.findMany({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: data.organizationId\n          }\n        ]\n      });\n      return invitations;\n    },\n    updateInvitation: async (data) => {\n      const invitation = await adapter.update({\n        model: \"invitation\",\n        where: [\n          {\n            field: \"id\",\n            value: data.invitationId\n          }\n        ],\n        update: {\n          status: data.status\n        }\n      });\n      return invitation;\n    }\n  };\n};\n\nconst ORGANIZATION_ERROR_CODES = {\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION: \"You are not allowed to create a new organization\",\n  YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS: \"You have reached the maximum number of organizations\",\n  ORGANIZATION_ALREADY_EXISTS: \"Organization already exists\",\n  ORGANIZATION_NOT_FOUND: \"Organization not found\",\n  USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION: \"User is not a member of the organization\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION: \"You are not allowed to update this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION: \"You are not allowed to delete this organization\",\n  NO_ACTIVE_ORGANIZATION: \"No active organization\",\n  USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION: \"User is already a member of this organization\",\n  MEMBER_NOT_FOUND: \"Member not found\",\n  ROLE_NOT_FOUND: \"Role not found\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM: \"You are not allowed to create a new team\",\n  TEAM_ALREADY_EXISTS: \"Team already exists\",\n  TEAM_NOT_FOUND: \"Team not found\",\n  YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER: \"You cannot leave the organization as the only owner\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER: \"You are not allowed to delete this member\",\n  YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION: \"You are not allowed to invite users to this organization\",\n  USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION: \"User is already invited to this organization\",\n  INVITATION_NOT_FOUND: \"Invitation not found\",\n  YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION: \"You are not the recipient of the invitation\",\n  YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION: \"You are not allowed to cancel this invitation\",\n  INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION: \"Inviter is no longer a member of the organization\",\n  YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE: \"you are not allowed to invite user with this role\",\n  FAILED_TO_RETRIEVE_INVITATION: \"Failed to retrieve invitation\",\n  YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS: \"You have reached the maximum number of teams\",\n  UNABLE_TO_REMOVE_LAST_TEAM: \"Unable to remove last team\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER: \"You are not allowed to update this member\",\n  ORGANIZATION_MEMBERSHIP_LIMIT_REACHED: \"Organization membership limit reached\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION: \"You are not allowed to create teams in this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION: \"You are not allowed to delete teams in this organization\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM: \"You are not allowed to update this team\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM: \"You are not allowed to delete this team\",\n  INVITATION_LIMIT_REACHED: \"Invitation limit reached\",\n  TEAM_MEMBER_LIMIT_REACHED: \"Team member limit reached\",\n  USER_IS_NOT_A_MEMBER_OF_THE_TEAM: \"User is not a member of the team\",\n  YOU_CAN_NOT_ACCESS_THE_MEMBERS_OF_THIS_TEAM: \"You are not allowed to list the members of this team\",\n  YOU_DO_NOT_HAVE_AN_ACTIVE_TEAM: \"You do not have an active team\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM_MEMBER: \"You are not allowed to create a new member\",\n  YOU_ARE_NOT_ALLOWED_TO_REMOVE_A_TEAM_MEMBER: \"You are not allowed to remove a team member\",\n  YOU_ARE_NOT_ALLOWED_TO_ACCESS_THIS_ORGANIZATION: \"You are not allowed to access this organization as an owner\",\n  YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION: \"You are not a member of this organization\"\n};\n\nconst createInvitation = (option) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: option?.schema?.invitation?.additionalFields || {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    email: z.string().meta({\n      description: \"The email address of the user to invite\"\n    }),\n    role: z.union([\n      z.string().meta({\n        description: \"The role to assign to the user\"\n      }),\n      z.array(\n        z.string().meta({\n          description: \"The roles to assign to the user\"\n        })\n      )\n    ]).meta({\n      description: 'The role(s) to assign to the user. It can be `admin`, `member`, or `guest`. Eg: \"member\"'\n    }),\n    organizationId: z.string().meta({\n      description: \"The organization ID to invite the user to\"\n    }).optional(),\n    resend: z.boolean().meta({\n      description: \"Resend the invitation email, if the user is already invited. Eg: true\"\n    }).optional(),\n    teamId: z.union([\n      z.string().meta({\n        description: \"The team ID to invite the user to\"\n      }).optional(),\n      z.array(\n        z.string().meta({\n          description: \"The team ID to invite the user to\"\n        })\n      ).optional()\n    ])\n  });\n  return createAuthEndpoint(\n    \"/organization/invite-member\",\n    {\n      method: \"POST\",\n      use: [orgMiddleware, orgSessionMiddleware],\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Invite a user to an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      email: {\n                        type: \"string\"\n                      },\n                      role: {\n                        type: \"string\"\n                      },\n                      organizationId: {\n                        type: \"string\"\n                      },\n                      inviterId: {\n                        type: \"string\"\n                      },\n                      status: {\n                        type: \"string\"\n                      },\n                      expiresAt: {\n                        type: \"string\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"email\",\n                      \"role\",\n                      \"organizationId\",\n                      \"inviterId\",\n                      \"status\",\n                      \"expiresAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = ctx.context.session;\n      const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n      if (!organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, option);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n        });\n      }\n      const canInvite = hasPermission({\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          invitation: [\"create\"]\n        }\n      });\n      if (!canInvite) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION\n        });\n      }\n      const creatorRole = ctx.context.orgOptions.creatorRole || \"owner\";\n      const roles = parseRoles(ctx.body.role);\n      if (member.role !== creatorRole && roles.split(\",\").includes(creatorRole)) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE\n        });\n      }\n      const alreadyMember = await adapter.findMemberByEmail({\n        email: ctx.body.email,\n        organizationId\n      });\n      if (alreadyMember) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      const alreadyInvited = await adapter.findPendingInvitation({\n        email: ctx.body.email,\n        organizationId\n      });\n      if (alreadyInvited.length && !ctx.body.resend) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION\n        });\n      }\n      if (alreadyInvited.length && ctx.context.orgOptions.cancelPendingInvitationsOnReInvite) {\n        await adapter.updateInvitation({\n          invitationId: alreadyInvited[0].id,\n          status: \"canceled\"\n        });\n      }\n      const organization = await adapter.findOrganizationById(organizationId);\n      if (!organization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const invitationLimit = typeof ctx.context.orgOptions.invitationLimit === \"function\" ? await ctx.context.orgOptions.invitationLimit(\n        {\n          user: session.user,\n          organization,\n          member\n        },\n        ctx.context\n      ) : ctx.context.orgOptions.invitationLimit ?? 100;\n      const pendingInvitations = await adapter.findPendingInvitations({\n        organizationId\n      });\n      if (pendingInvitations.length >= invitationLimit) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.INVITATION_LIMIT_REACHED\n        });\n      }\n      if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== \"undefined\" && \"teamId\" in ctx.body && ctx.body.teamId) {\n        const teamIds2 = typeof ctx.body.teamId === \"string\" ? [ctx.body.teamId] : ctx.body.teamId;\n        for (const teamId of teamIds2) {\n          const team = await adapter.findTeamById({\n            teamId,\n            organizationId,\n            includeTeamMembers: true\n          });\n          if (!team) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n            });\n          }\n          const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === \"function\" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({\n            teamId,\n            session,\n            organizationId\n          }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;\n          if (team.members.length >= maximumMembersPerTeam) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED\n            });\n          }\n        }\n      }\n      const teamIds = \"teamId\" in ctx.body ? typeof ctx.body.teamId === \"string\" ? [ctx.body.teamId] : ctx.body.teamId ?? [] : [];\n      const {\n        email: _,\n        role: __,\n        organizationId: ___,\n        resend: ____,\n        ...additionalFields\n      } = ctx.body;\n      const invitation = await adapter.createInvitation({\n        invitation: {\n          role: roles,\n          email: ctx.body.email.toLowerCase(),\n          organizationId,\n          teamIds,\n          ...additionalFields ? additionalFields : {}\n        },\n        user: session.user\n      });\n      await ctx.context.orgOptions.sendInvitationEmail?.(\n        {\n          id: invitation.id,\n          role: invitation.role,\n          email: invitation.email.toLowerCase(),\n          organization,\n          inviter: {\n            ...member,\n            user: session.user\n          },\n          //@ts-expect-error\n          invitation\n        },\n        ctx.request\n      );\n      return ctx.json(invitation);\n    }\n  );\n};\nconst acceptInvitation = (options) => createAuthEndpoint(\n  \"/organization/accept-invitation\",\n  {\n    method: \"POST\",\n    body: z.object({\n      invitationId: z.string().meta({\n        description: \"The ID of the invitation to accept\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Accept an invitation to an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    invitation: {\n                      type: \"object\"\n                    },\n                    member: {\n                      type: \"object\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitation = await adapter.findInvitationById(\n      ctx.body.invitationId\n    );\n    if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== \"pending\") {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    const membershipLimit = ctx.context.orgOptions?.membershipLimit || 100;\n    const membersCount = await adapter.countMembers({\n      organizationId: invitation.organizationId\n    });\n    if (membersCount >= membershipLimit) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED\n      });\n    }\n    const acceptedI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"accepted\"\n    });\n    if (!acceptedI) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.FAILED_TO_RETRIEVE_INVITATION\n      });\n    }\n    if (ctx.context.orgOptions.teams && ctx.context.orgOptions.teams.enabled && \"teamId\" in acceptedI && acceptedI.teamId) {\n      const teamIds = acceptedI.teamId.split(\",\");\n      const onlyOne = teamIds.length === 1;\n      for (const teamId of teamIds) {\n        await adapter.findOrCreateTeamMember({\n          teamId,\n          userId: session.user.id\n        });\n        if (typeof ctx.context.orgOptions.teams.maximumMembersPerTeam !== \"undefined\") {\n          const members = await adapter.countTeamMembers({ teamId });\n          const maximumMembersPerTeam = typeof ctx.context.orgOptions.teams.maximumMembersPerTeam === \"function\" ? await ctx.context.orgOptions.teams.maximumMembersPerTeam({\n            teamId,\n            session,\n            organizationId: invitation.organizationId\n          }) : ctx.context.orgOptions.teams.maximumMembersPerTeam;\n          if (members >= maximumMembersPerTeam) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ORGANIZATION_ERROR_CODES.TEAM_MEMBER_LIMIT_REACHED\n            });\n          }\n        }\n      }\n      if (onlyOne) {\n        const teamId = teamIds[0];\n        const updatedSession = await adapter.setActiveTeam(\n          session.session.token,\n          teamId\n        );\n        await setSessionCookie(ctx, {\n          session: updatedSession,\n          user: session.user\n        });\n      }\n    }\n    const member = await adapter.createMember({\n      organizationId: invitation.organizationId,\n      userId: session.user.id,\n      role: invitation.role,\n      createdAt: /* @__PURE__ */ new Date()\n    });\n    await adapter.setActiveOrganization(\n      session.session.token,\n      invitation.organizationId\n    );\n    if (!acceptedI) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n        }\n      });\n    }\n    return ctx.json({\n      invitation: acceptedI,\n      member\n    });\n  }\n);\nconst rejectInvitation = (options) => createAuthEndpoint(\n  \"/organization/reject-invitation\",\n  {\n    method: \"POST\",\n    body: z.object({\n      invitationId: z.string().meta({\n        description: \"The ID of the invitation to reject\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Reject an invitation to an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    invitation: {\n                      type: \"object\"\n                    },\n                    member: {\n                      type: \"null\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const invitation = await adapter.findInvitationById(\n      ctx.body.invitationId\n    );\n    if (!invitation || invitation.expiresAt < /* @__PURE__ */ new Date() || invitation.status !== \"pending\") {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Invitation not found!\"\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    const rejectedI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"rejected\"\n    });\n    return ctx.json({\n      invitation: rejectedI,\n      member: null\n    });\n  }\n);\nconst cancelInvitation = (options) => createAuthEndpoint(\n  \"/organization/cancel-invitation\",\n  {\n    method: \"POST\",\n    body: z.object({\n      invitationId: z.string().meta({\n        description: \"The ID of the invitation to cancel\"\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    openapi: {\n      description: \"Cancel an invitation to an organization\",\n      responses: {\n        \"200\": {\n          description: \"Success\",\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  invitation: {\n                    type: \"object\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitation = await adapter.findInvitationById(\n      ctx.body.invitationId\n    );\n    if (!invitation) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITATION_NOT_FOUND\n      });\n    }\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: invitation.organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const canCancel = hasPermission({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        invitation: [\"cancel\"]\n      }\n    });\n    if (!canCancel) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION\n      });\n    }\n    const canceledI = await adapter.updateInvitation({\n      invitationId: ctx.body.invitationId,\n      status: \"canceled\"\n    });\n    return ctx.json(canceledI);\n  }\n);\nconst getInvitation = (options) => createAuthEndpoint(\n  \"/organization/get-invitation\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware],\n    requireHeaders: true,\n    query: z.object({\n      id: z.string().meta({\n        description: \"The ID of the invitation to get\"\n      })\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get an invitation by ID\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\"\n                    },\n                    email: {\n                      type: \"string\"\n                    },\n                    role: {\n                      type: \"string\"\n                    },\n                    organizationId: {\n                      type: \"string\"\n                    },\n                    inviterId: {\n                      type: \"string\"\n                    },\n                    status: {\n                      type: \"string\"\n                    },\n                    expiresAt: {\n                      type: \"string\"\n                    },\n                    organizationName: {\n                      type: \"string\"\n                    },\n                    organizationSlug: {\n                      type: \"string\"\n                    },\n                    inviterEmail: {\n                      type: \"string\"\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"email\",\n                    \"role\",\n                    \"organizationId\",\n                    \"inviterId\",\n                    \"status\",\n                    \"expiresAt\",\n                    \"organizationName\",\n                    \"organizationSlug\",\n                    \"inviterEmail\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: \"Not authenticated\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitation = await adapter.findInvitationById(ctx.query.id);\n    if (!invitation || invitation.status !== \"pending\" || invitation.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Invitation not found!\"\n      });\n    }\n    if (invitation.email.toLowerCase() !== session.user.email.toLowerCase()) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION\n      });\n    }\n    const organization = await adapter.findOrganizationById(\n      invitation.organizationId\n    );\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const member = await adapter.findMemberByOrgId({\n      userId: invitation.inviterId,\n      organizationId: invitation.organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    return ctx.json({\n      ...invitation,\n      organizationName: organization.name,\n      organizationSlug: organization.slug,\n      inviterEmail: member.user.email\n    });\n  }\n);\nconst listInvitations = (options) => createAuthEndpoint(\n  \"/organization/list-invitations\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    query: z.object({\n      organizationId: z.string().meta({\n        description: \"The ID of the organization to list invitations for\"\n      }).optional()\n    }).optional()\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: \"Not authenticated\"\n      });\n    }\n    const orgId = ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!orgId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Organization ID is required\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const isMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: orgId\n    });\n    if (!isMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: \"You are not a member of this organization\"\n      });\n    }\n    const invitations = await adapter.listInvitations({\n      organizationId: orgId\n    });\n    return ctx.json(invitations);\n  }\n);\nconst listUserInvitations = (options) => createAuthEndpoint(\n  \"/organization/list-user-invitations\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware],\n    query: z.object({\n      email: z.string().meta({\n        description: \"The email of the user to list invitations for. This only works for server side API calls.\"\n      }).optional()\n    }).optional()\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (ctx.request && ctx.query?.email) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"User email cannot be passed for client side API calls.\"\n      });\n    }\n    const userEmail = session?.user.email || ctx.query?.email;\n    if (!userEmail) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: \"Missing session headers, or email query parameter.\"\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const invitations = await adapter.listUserInvitations(userEmail);\n    return ctx.json(invitations);\n  }\n);\n\nconst addMember = (option) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: option?.schema?.member?.additionalFields || {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    userId: z.coerce.string().meta({\n      description: 'The user Id which represents the user to be added as a member. If `null` is provided, then it\\'s expected to provide session headers. Eg: \"user-id\"'\n    }),\n    role: z.union([z.string(), z.array(z.string())]).meta({\n      description: 'The role(s) to assign to the new member. Eg: [\"admin\", \"sale\"]'\n    }),\n    organizationId: z.string().meta({\n      description: `An optional organization ID to pass. If not provided, will default to the user's active organization. Eg: \"org-id\"`\n    }).optional(),\n    teamId: z.string().meta({\n      description: 'An optional team ID to add the member to. Eg: \"team-id\"'\n    }).optional()\n  });\n  return createAuthEndpoint(\n    \"/organization/add-member\",\n    {\n      method: \"POST\",\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      use: [orgMiddleware],\n      metadata: {\n        SERVER_ONLY: true,\n        $Infer: {\n          body: {}\n        }\n      }\n    },\n    async (ctx) => {\n      const session = ctx.body.userId ? await getSessionFromCtx(ctx).catch((e) => null) : null;\n      const orgId = ctx.body.organizationId || session?.session.activeOrganizationId;\n      if (!orgId) {\n        return ctx.json(null, {\n          status: 400,\n          body: {\n            message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n          }\n        });\n      }\n      const teamId = \"teamId\" in ctx.body ? ctx.body.teamId : void 0;\n      if (teamId && !ctx.context.orgOptions.teams?.enabled) {\n        ctx.context.logger.error(\"Teams are not enabled\");\n        throw new APIError(\"BAD_REQUEST\", {\n          message: \"Teams are not enabled\"\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, option);\n      const user = await ctx.context.internalAdapter.findUserById(\n        ctx.body.userId\n      );\n      if (!user) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.USER_NOT_FOUND\n        });\n      }\n      const alreadyMember = await adapter.findMemberByEmail({\n        email: user.email,\n        organizationId: orgId\n      });\n      if (alreadyMember) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION\n        });\n      }\n      if (teamId) {\n        const team = await adapter.findTeamById({\n          teamId,\n          organizationId: orgId\n        });\n        if (!team || team.organizationId !== orgId) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n          });\n        }\n      }\n      const membershipLimit = ctx.context.orgOptions?.membershipLimit || 100;\n      const count = await adapter.countMembers({ organizationId: orgId });\n      if (count >= membershipLimit) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_MEMBERSHIP_LIMIT_REACHED\n        });\n      }\n      const {\n        role: _,\n        userId: __,\n        organizationId: ___,\n        ...additionalFields\n      } = ctx.body;\n      const createdMember = await adapter.createMember({\n        organizationId: orgId,\n        userId: user.id,\n        role: parseRoles(ctx.body.role),\n        createdAt: /* @__PURE__ */ new Date(),\n        ...additionalFields ? additionalFields : {}\n      });\n      if (teamId) {\n        await adapter.findOrCreateTeamMember({\n          userId: user.id,\n          teamId\n        });\n      }\n      return ctx.json(createdMember);\n    }\n  );\n};\nconst removeMember = (options) => createAuthEndpoint(\n  \"/organization/remove-member\",\n  {\n    method: \"POST\",\n    body: z.object({\n      memberIdOrEmail: z.string().meta({\n        description: \"The ID or email of the member to remove\"\n      }),\n      /**\n       * If not provided, the active organization will be used\n       */\n      organizationId: z.string().meta({\n        description: 'The ID of the organization to remove the member from. If not provided, the active organization will be used. Eg: \"org-id\"'\n      })\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Remove a member from an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    member: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        userId: {\n                          type: \"string\"\n                        },\n                        organizationId: {\n                          type: \"string\"\n                        },\n                        role: {\n                          type: \"string\"\n                        }\n                      },\n                      required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                    }\n                  },\n                  required: [\"member\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    let toBeRemovedMember = null;\n    if (ctx.body.memberIdOrEmail.includes(\"@\")) {\n      toBeRemovedMember = await adapter.findMemberByEmail({\n        email: ctx.body.memberIdOrEmail,\n        organizationId\n      });\n    } else {\n      toBeRemovedMember = await adapter.findMemberById(\n        ctx.body.memberIdOrEmail\n      );\n    }\n    if (!toBeRemovedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const roles = toBeRemovedMember.role.split(\",\");\n    const creatorRole = ctx.context.orgOptions?.creatorRole || \"owner\";\n    const isOwner = roles.includes(creatorRole);\n    if (isOwner) {\n      if (member.role !== creatorRole) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n      const { members } = await adapter.listMembers({\n        organizationId\n      });\n      const owners = members.filter((member2) => {\n        const roles2 = member2.role.split(\",\");\n        return roles2.includes(creatorRole);\n      });\n      if (owners.length <= 1) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n    }\n    const canDeleteMember = hasPermission({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        member: [\"delete\"]\n      }\n    });\n    if (!canDeleteMember) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER\n      });\n    }\n    if (toBeRemovedMember?.organizationId !== organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    await adapter.deleteMember(toBeRemovedMember.id);\n    if (session.user.id === toBeRemovedMember.userId && session.session.activeOrganizationId === toBeRemovedMember.organizationId) {\n      await adapter.setActiveOrganization(session.session.token, null);\n    }\n    return ctx.json({\n      member: toBeRemovedMember\n    });\n  }\n);\nconst updateMemberRole = (option) => createAuthEndpoint(\n  \"/organization/update-member-role\",\n  {\n    method: \"POST\",\n    body: z.object({\n      role: z.union([z.string(), z.array(z.string())]).meta({\n        description: 'The new role to be applied. This can be a string or array of strings representing the roles. Eg: [\"admin\", \"sale\"]'\n      }),\n      memberId: z.string().meta({\n        description: 'The member id to apply the role update to. Eg: \"member-id\"'\n      }),\n      organizationId: z.string().meta({\n        description: 'An optional organization ID which the member is a part of to apply the role update. If not provided, you must provide session headers to get the active organization. Eg: \"organization-id\"'\n      }).optional()\n    }),\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the role of a member in an organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    member: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        userId: {\n                          type: \"string\"\n                        },\n                        organizationId: {\n                          type: \"string\"\n                        },\n                        role: {\n                          type: \"string\"\n                        }\n                      },\n                      required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                    }\n                  },\n                  required: [\"member\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!ctx.body.role) {\n      throw new APIError(\"BAD_REQUEST\");\n    }\n    const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const roleToSet = Array.isArray(ctx.body.role) ? ctx.body.role : ctx.body.role ? [ctx.body.role] : [];\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const toBeUpdatedMember = member.id !== ctx.body.memberId ? await adapter.findMemberById(ctx.body.memberId) : member;\n    if (!toBeUpdatedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const creatorRole = ctx.context.orgOptions?.creatorRole || \"owner\";\n    const updatingMemberRoles = member.role.split(\",\");\n    const toBeUpdatedMemberRoles = toBeUpdatedMember.role.split(\",\");\n    const isUpdatingCreator = toBeUpdatedMemberRoles.includes(creatorRole);\n    const updaterIsCreator = updatingMemberRoles.includes(creatorRole);\n    const isSettingCreatorRole = roleToSet.includes(creatorRole);\n    if (isUpdatingCreator && !updaterIsCreator || isSettingCreatorRole && !updaterIsCreator) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER\n      });\n    }\n    const canUpdateMember = hasPermission({\n      role: member.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        member: [\"update\"]\n      },\n      allowCreatorAllPermissions: true\n    });\n    if (!canUpdateMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_MEMBER\n      });\n    }\n    const updatedMember = await adapter.updateMember(\n      ctx.body.memberId,\n      parseRoles(ctx.body.role)\n    );\n    if (!updatedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    return ctx.json(updatedMember);\n  }\n);\nconst getActiveMember = (options) => createAuthEndpoint(\n  \"/organization/get-active-member\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the member details of the active organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    id: {\n                      type: \"string\"\n                    },\n                    userId: {\n                      type: \"string\"\n                    },\n                    organizationId: {\n                      type: \"string\"\n                    },\n                    role: {\n                      type: \"string\"\n                    }\n                  },\n                  required: [\"id\", \"userId\", \"organizationId\", \"role\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = session.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!member) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n        }\n      });\n    }\n    return ctx.json(member);\n  }\n);\nconst leaveOrganization = (options) => createAuthEndpoint(\n  \"/organization/leave\",\n  {\n    method: \"POST\",\n    body: z.object({\n      organizationId: z.string().meta({\n        description: 'The organization Id for the member to leave. Eg: \"organization-id\"'\n      })\n    }),\n    requireHeaders: true,\n    use: [sessionMiddleware, orgMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: ctx.body.organizationId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.MEMBER_NOT_FOUND\n      });\n    }\n    const isOwnerLeaving = member.role === (ctx.context.orgOptions?.creatorRole || \"owner\");\n    if (isOwnerLeaving) {\n      const members = await ctx.context.adapter.findMany({\n        model: \"member\",\n        where: [\n          {\n            field: \"organizationId\",\n            value: ctx.body.organizationId\n          }\n        ]\n      });\n      const owners = members.filter(\n        (member2) => member2.role === (ctx.context.orgOptions?.creatorRole || \"owner\")\n      );\n      if (owners.length <= 1) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER\n        });\n      }\n    }\n    await adapter.deleteMember(member.id);\n    if (session.session.activeOrganizationId === ctx.body.organizationId) {\n      await adapter.setActiveOrganization(session.session.token, null);\n    }\n    return ctx.json(member);\n  }\n);\nconst listMembers = (options) => createAuthEndpoint(\n  \"/organization/list-members\",\n  {\n    method: \"GET\",\n    query: z.object({\n      limit: z.string().meta({\n        description: \"The number of users to return\"\n      }).or(z.number()).optional(),\n      offset: z.string().meta({\n        description: \"The offset to start from\"\n      }).or(z.number()).optional(),\n      sortBy: z.string().meta({\n        description: \"The field to sort by\"\n      }).optional(),\n      sortDirection: z.enum([\"asc\", \"desc\"]).meta({\n        description: \"The direction to sort by\"\n      }).optional(),\n      filterField: z.string().meta({\n        description: \"The field to filter by\"\n      }).optional(),\n      filterValue: z.string().meta({\n        description: \"The value to filter by\"\n      }).or(z.number()).or(z.boolean()).optional(),\n      filterOperator: z.enum([\"eq\", \"ne\", \"lt\", \"lte\", \"gt\", \"gte\", \"contains\"]).meta({\n        description: \"The operator to use for the filter\"\n      }).optional(),\n      organizationId: z.string().meta({\n        description: `The organization ID to list members for. If not provided, will default to the user's active organization. Eg: \"organization-id\"`\n      }).optional()\n    }).optional(),\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const isMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId\n    });\n    if (!isMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_A_MEMBER_OF_THIS_ORGANIZATION\n      });\n    }\n    const { members, total } = await adapter.listMembers({\n      organizationId,\n      limit: ctx.query?.limit ? Number(ctx.query.limit) : void 0,\n      offset: ctx.query?.offset ? Number(ctx.query.offset) : void 0,\n      sortBy: ctx.query?.sortBy,\n      sortOrder: ctx.query?.sortDirection,\n      filter: ctx.query?.filterField ? {\n        field: ctx.query?.filterField,\n        operator: ctx.query.filterOperator,\n        value: ctx.query.filterValue\n      } : void 0\n    });\n    return ctx.json({\n      members,\n      total\n    });\n  }\n);\n\nconst createOrganization = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.organization?.additionalFields || {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    name: z.string().meta({\n      description: \"The name of the organization\"\n    }),\n    slug: z.string().meta({\n      description: \"The slug of the organization\"\n    }),\n    userId: z.coerce.string().meta({\n      description: 'The user id of the organization creator. If not provided, the current user will be used. Should only be used by admins or when called by the server. server-only. Eg: \"user-id\"'\n    }).optional(),\n    logo: z.string().meta({\n      description: \"The logo of the organization\"\n    }).optional(),\n    metadata: z.record(z.string(), z.any()).meta({\n      description: \"The metadata of the organization\"\n    }).optional(),\n    keepCurrentActiveOrganization: z.boolean().meta({\n      description: \"Whether to keep the current active organization active after creating a new one. Eg: true\"\n    }).optional()\n  });\n  return createAuthEndpoint(\n    \"/organization/create\",\n    {\n      method: \"POST\",\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      use: [orgMiddleware],\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Create an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    description: \"The organization that was created\",\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = await getSessionFromCtx(ctx);\n      if (!session && (ctx.request || ctx.headers)) {\n        throw new APIError(\"UNAUTHORIZED\");\n      }\n      let user = session?.user || null;\n      if (!user) {\n        if (!ctx.body.userId) {\n          throw new APIError(\"UNAUTHORIZED\");\n        }\n        user = await ctx.context.internalAdapter.findUserById(ctx.body.userId);\n      }\n      if (!user) {\n        return ctx.json(null, {\n          status: 401\n        });\n      }\n      const options2 = ctx.context.orgOptions;\n      const canCreateOrg = typeof options2?.allowUserToCreateOrganization === \"function\" ? await options2.allowUserToCreateOrganization(user) : options2?.allowUserToCreateOrganization === void 0 ? true : options2.allowUserToCreateOrganization;\n      if (!canCreateOrg) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options2);\n      const userOrganizations = await adapter.listOrganizations(user.id);\n      const hasReachedOrgLimit = typeof options2.organizationLimit === \"number\" ? userOrganizations.length >= options2.organizationLimit : typeof options2.organizationLimit === \"function\" ? await options2.organizationLimit(user) : false;\n      if (hasReachedOrgLimit) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS\n        });\n      }\n      const existingOrganization = await adapter.findOrganizationBySlug(\n        ctx.body.slug\n      );\n      if (existingOrganization) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_ALREADY_EXISTS\n        });\n      }\n      const {\n        keepCurrentActiveOrganization: _,\n        userId: __,\n        ...orgData\n      } = ctx.body;\n      let hookResponse = void 0;\n      if (options2.organizationCreation?.beforeCreate) {\n        const response = await options2.organizationCreation.beforeCreate(\n          {\n            organization: {\n              ...orgData,\n              createdAt: /* @__PURE__ */ new Date()\n            },\n            user\n          },\n          ctx.request\n        );\n        if (response && typeof response === \"object\" && \"data\" in response) {\n          hookResponse = response;\n        }\n      }\n      const organization = await adapter.createOrganization({\n        organization: {\n          ...orgData,\n          createdAt: /* @__PURE__ */ new Date(),\n          ...hookResponse?.data || {}\n        }\n      });\n      let member;\n      let teamMember = null;\n      if (options2?.teams?.enabled && options2.teams.defaultTeam?.enabled !== false) {\n        const defaultTeam = await options2.teams.defaultTeam?.customCreateDefaultTeam?.(\n          organization,\n          ctx.request\n        ) || await adapter.createTeam({\n          organizationId: organization.id,\n          name: `${organization.name}`,\n          createdAt: /* @__PURE__ */ new Date()\n        });\n        member = await adapter.createMember({\n          userId: user.id,\n          organizationId: organization.id,\n          role: ctx.context.orgOptions.creatorRole || \"owner\"\n        });\n        teamMember = await adapter.findOrCreateTeamMember({\n          teamId: defaultTeam.id,\n          userId: user.id\n        });\n      } else {\n        member = await adapter.createMember({\n          userId: user.id,\n          organizationId: organization.id,\n          role: ctx.context.orgOptions.creatorRole || \"owner\"\n        });\n      }\n      if (options2.organizationCreation?.afterCreate) {\n        await options2.organizationCreation.afterCreate(\n          {\n            organization,\n            user,\n            member\n          },\n          ctx.request\n        );\n      }\n      if (ctx.context.session && !ctx.body.keepCurrentActiveOrganization) {\n        await adapter.setActiveOrganization(\n          ctx.context.session.session.token,\n          organization.id\n        );\n      }\n      if (teamMember && ctx.context.session && !ctx.body.keepCurrentActiveOrganization) {\n        await adapter.setActiveTeam(\n          ctx.context.session.session.token,\n          teamMember.teamId\n        );\n      }\n      return ctx.json({\n        ...organization,\n        metadata: ctx.body.metadata,\n        members: [member]\n      });\n    }\n  );\n};\nconst checkOrganizationSlug = (options) => createAuthEndpoint(\n  \"/organization/check-slug\",\n  {\n    method: \"POST\",\n    body: z.object({\n      slug: z.string().meta({\n        description: 'The organization slug to check. Eg: \"my-org\"'\n      })\n    }),\n    use: [requestOnlySessionMiddleware, orgMiddleware]\n  },\n  async (ctx) => {\n    const orgAdapter = getOrgAdapter(ctx.context, options);\n    const org = await orgAdapter.findOrganizationBySlug(ctx.body.slug);\n    if (!org) {\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"slug is taken\"\n    });\n  }\n);\nconst updateOrganization = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.organization?.additionalFields || {},\n    isClientSide: true\n  });\n  return createAuthEndpoint(\n    \"/organization/update\",\n    {\n      method: \"POST\",\n      body: z.object({\n        data: z.object({\n          ...additionalFieldsSchema.shape,\n          name: z.string().meta({\n            description: \"The name of the organization\"\n          }).optional(),\n          slug: z.string().meta({\n            description: \"The slug of the organization\"\n          }).optional(),\n          logo: z.string().meta({\n            description: \"The logo of the organization\"\n          }).optional(),\n          metadata: z.record(z.string(), z.any()).meta({\n            description: \"The metadata of the organization\"\n          }).optional()\n        }).partial(),\n        organizationId: z.string().meta({\n          description: 'The organization ID. Eg: \"org-id\"'\n        }).optional()\n      }),\n      requireHeaders: true,\n      use: [orgMiddleware],\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Update an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    description: \"The updated organization\",\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = await ctx.context.getSession(ctx);\n      if (!session) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: \"User not found\"\n        });\n      }\n      const organizationId = ctx.body.organizationId || session.session.activeOrganizationId;\n      if (!organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n        });\n      }\n      const canUpdateOrg = hasPermission({\n        permissions: {\n          organization: [\"update\"]\n        },\n        role: member.role,\n        options: ctx.context.orgOptions\n      });\n      if (!canUpdateOrg) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION\n        });\n      }\n      const updatedOrg = await adapter.updateOrganization(\n        organizationId,\n        ctx.body.data\n      );\n      return ctx.json(updatedOrg);\n    }\n  );\n};\nconst deleteOrganization = (options) => {\n  return createAuthEndpoint(\n    \"/organization/delete\",\n    {\n      method: \"POST\",\n      body: z.object({\n        organizationId: z.string().meta({\n          description: \"The organization id to delete\"\n        })\n      }),\n      requireHeaders: true,\n      use: [orgMiddleware],\n      metadata: {\n        openapi: {\n          description: \"Delete an organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"string\",\n                    description: \"The organization id that was deleted\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = await ctx.context.getSession(ctx);\n      if (!session) {\n        return ctx.json(null, {\n          status: 401\n        });\n      }\n      const organizationId = ctx.body.organizationId;\n      if (!organizationId) {\n        return ctx.json(null, {\n          status: 400,\n          body: {\n            message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n          }\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        return ctx.json(null, {\n          status: 400,\n          body: {\n            message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n          }\n        });\n      }\n      const canDeleteOrg = hasPermission({\n        role: member.role,\n        permissions: {\n          organization: [\"delete\"]\n        },\n        options: ctx.context.orgOptions\n      });\n      if (!canDeleteOrg) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION\n        });\n      }\n      if (organizationId === session.session.activeOrganizationId) {\n        await adapter.setActiveOrganization(session.session.token, null);\n      }\n      const option = ctx.context.orgOptions.organizationDeletion;\n      if (option?.disabled) {\n        throw new APIError(\"FORBIDDEN\");\n      }\n      const org = await adapter.findOrganizationById(organizationId);\n      if (!org) {\n        throw new APIError(\"BAD_REQUEST\");\n      }\n      if (option?.beforeDelete) {\n        await option.beforeDelete({\n          organization: org,\n          user: session.user\n        });\n      }\n      await adapter.deleteOrganization(organizationId);\n      if (option?.afterDelete) {\n        await option.afterDelete({\n          organization: org,\n          user: session.user\n        });\n      }\n      return ctx.json(org);\n    }\n  );\n};\nconst getFullOrganization = (options) => createAuthEndpoint(\n  \"/organization/get-full-organization\",\n  {\n    method: \"GET\",\n    query: z.optional(\n      z.object({\n        organizationId: z.string().meta({\n          description: \"The organization id to get\"\n        }).optional(),\n        organizationSlug: z.string().meta({\n          description: \"The organization slug to get\"\n        }).optional(),\n        membersLimit: z.number().or(z.string().transform((val) => parseInt(val))).meta({\n          description: \"The limit of members to get. By default, it uses the membershipLimit option which defaults to 100.\"\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the full organization\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The organization\",\n                  $ref: \"#/components/schemas/Organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationSlug || ctx.query?.organizationId || session.session.activeOrganizationId;\n    if (!organizationId) {\n      ctx.context.logger.info(\"No active organization found, returning null\");\n      return ctx.json(null, {\n        status: 200\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const organization = await adapter.findFullOrganization({\n      organizationId,\n      isSlug: !!ctx.query?.organizationSlug,\n      includeTeams: ctx.context.orgOptions.teams?.enabled,\n      membersLimit: ctx.query?.membersLimit\n    });\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    const isMember = organization?.members.find(\n      (member) => member.userId === session.user.id\n    );\n    if (!isMember) {\n      await adapter.setActiveOrganization(session.session.token, null);\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    if (!organization) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n      });\n    }\n    return ctx.json(organization);\n  }\n);\nconst setActiveOrganization = (options) => {\n  return createAuthEndpoint(\n    \"/organization/set-active\",\n    {\n      method: \"POST\",\n      body: z.object({\n        organizationId: z.string().meta({\n          description: 'The organization id to set as active. It can be null to unset the active organization. Eg: \"org-id\"'\n        }).nullable().optional(),\n        organizationSlug: z.string().meta({\n          description: 'The organization slug to set as active. It can be null to unset the active organization if organizationId is not provided. Eg: \"org-slug\"'\n        }).optional()\n      }),\n      use: [orgSessionMiddleware, orgMiddleware],\n      metadata: {\n        openapi: {\n          description: \"Set the active organization\",\n          responses: {\n            \"200\": {\n              description: \"Success\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    description: \"The organization\",\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const adapter = getOrgAdapter(ctx.context, options);\n      const session = ctx.context.session;\n      let organizationId = ctx.body.organizationSlug || ctx.body.organizationId;\n      if (organizationId === null) {\n        const sessionOrgId = session.session.activeOrganizationId;\n        if (!sessionOrgId) {\n          return ctx.json(null);\n        }\n        const updatedSession2 = await adapter.setActiveOrganization(\n          session.session.token,\n          null\n        );\n        await setSessionCookie(ctx, {\n          session: updatedSession2,\n          user: session.user\n        });\n        return ctx.json(null);\n      }\n      if (!organizationId) {\n        const sessionOrgId = session.session.activeOrganizationId;\n        if (!sessionOrgId) {\n          return ctx.json(null);\n        }\n        organizationId = sessionOrgId;\n      }\n      const isMember = await adapter.checkMembership({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!isMember) {\n        await adapter.setActiveOrganization(session.session.token, null);\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n        });\n      }\n      let organization = await adapter.findOrganizationById(organizationId);\n      if (!organization) {\n        if (ctx.body.organizationSlug) {\n          organization = await adapter.findOrganizationBySlug(organizationId);\n        }\n        if (!organization) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ORGANIZATION_ERROR_CODES.ORGANIZATION_NOT_FOUND\n          });\n        }\n      }\n      const updatedSession = await adapter.setActiveOrganization(\n        session.session.token,\n        organization.id\n      );\n      await setSessionCookie(ctx, {\n        session: updatedSession,\n        user: session.user\n      });\n      return ctx.json(organization);\n    }\n  );\n};\nconst listOrganizations = (options) => createAuthEndpoint(\n  \"/organization/list\",\n  {\n    method: \"GET\",\n    use: [orgMiddleware, orgSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all organizations\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Organization\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const adapter = getOrgAdapter(ctx.context, options);\n    const organizations = await adapter.listOrganizations(\n      ctx.context.session.user.id\n    );\n    return ctx.json(organizations);\n  }\n);\n\nconst createTeam = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.team?.additionalFields ?? {},\n    isClientSide: true\n  });\n  const baseSchema = z.object({\n    name: z.string().meta({\n      description: 'The name of the team. Eg: \"my-team\"'\n    }),\n    organizationId: z.string().meta({\n      description: 'The organization ID which the team will be created in. Defaults to the active organization. Eg: \"organization-id\"'\n    }).optional()\n  });\n  return createAuthEndpoint(\n    \"/organization/create-team\",\n    {\n      method: \"POST\",\n      body: z.object({\n        ...baseSchema.shape,\n        ...additionalFieldsSchema.shape\n      }),\n      use: [orgMiddleware],\n      metadata: {\n        $Infer: {\n          body: {}\n        },\n        openapi: {\n          description: \"Create a new team within an organization\",\n          responses: {\n            \"200\": {\n              description: \"Team created successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the created team\"\n                      },\n                      name: {\n                        type: \"string\",\n                        description: \"Name of the team\"\n                      },\n                      organizationId: {\n                        type: \"string\",\n                        description: \"ID of the organization the team belongs to\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was created\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was last updated\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"name\",\n                      \"organizationId\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = await getSessionFromCtx(ctx);\n      const organizationId = ctx.body.organizationId || session?.session.activeOrganizationId;\n      if (!session && (ctx.request || ctx.headers)) {\n        throw new APIError(\"UNAUTHORIZED\");\n      }\n      if (!organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      if (session) {\n        const member = await adapter.findMemberByOrgId({\n          userId: session.user.id,\n          organizationId\n        });\n        if (!member) {\n          throw new APIError(\"FORBIDDEN\", {\n            message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION\n          });\n        }\n        const canCreate = hasPermission({\n          role: member.role,\n          options: ctx.context.orgOptions,\n          permissions: {\n            team: [\"create\"]\n          }\n        });\n        if (!canCreate) {\n          throw new APIError(\"FORBIDDEN\", {\n            message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_TEAMS_IN_THIS_ORGANIZATION\n          });\n        }\n      }\n      const existingTeams = await adapter.listTeams(organizationId);\n      const maximum = typeof ctx.context.orgOptions.teams?.maximumTeams === \"function\" ? await ctx.context.orgOptions.teams?.maximumTeams(\n        {\n          organizationId,\n          session\n        },\n        ctx.request\n      ) : ctx.context.orgOptions.teams?.maximumTeams;\n      const maxTeamsReached = maximum ? existingTeams.length >= maximum : false;\n      if (maxTeamsReached) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_TEAMS\n        });\n      }\n      const { name, organizationId: _, ...additionalFields } = ctx.body;\n      const createdTeam = await adapter.createTeam({\n        name,\n        organizationId,\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...additionalFields\n      });\n      return ctx.json(createdTeam);\n    }\n  );\n};\nconst removeTeam = (options) => createAuthEndpoint(\n  \"/organization/remove-team\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: `The team ID of the team to remove. Eg: \"team-id\"`\n      }),\n      organizationId: z.string().meta({\n        description: `The organization ID which the team falls under. If not provided, it will default to the user's active organization. Eg: \"organization-id\"`\n      }).optional()\n    }),\n    use: [orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Remove a team from an organization\",\n        responses: {\n          \"200\": {\n            description: \"Team removed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Confirmation message indicating successful removal\",\n                      enum: [\"Team removed successfully.\"]\n                    }\n                  },\n                  required: [\"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    const organizationId = ctx.body.organizationId || session?.session.activeOrganizationId;\n    if (!organizationId) {\n      return ctx.json(null, {\n        status: 400,\n        body: {\n          message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n        }\n      });\n    }\n    if (!session && (ctx.request || ctx.headers)) {\n      throw new APIError(\"UNAUTHORIZED\");\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    if (session) {\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member || session.session?.activeTeamId === ctx.body.teamId) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_TEAM\n        });\n      }\n      const canRemove = hasPermission({\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          team: [\"delete\"]\n        }\n      });\n      if (!canRemove) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_TEAMS_IN_THIS_ORGANIZATION\n        });\n      }\n    }\n    const team = await adapter.findTeamById({\n      teamId: ctx.body.teamId,\n      organizationId\n    });\n    if (!team || team.organizationId !== organizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    if (!ctx.context.orgOptions.teams?.allowRemovingAllTeams) {\n      const teams = await adapter.listTeams(organizationId);\n      if (teams.length <= 1) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.UNABLE_TO_REMOVE_LAST_TEAM\n        });\n      }\n    }\n    await adapter.deleteTeam(team.id);\n    return ctx.json({ message: \"Team removed successfully.\" });\n  }\n);\nconst updateTeam = (options) => {\n  const additionalFieldsSchema = toZodSchema({\n    fields: options?.schema?.team?.additionalFields ?? {},\n    isClientSide: true\n  });\n  return createAuthEndpoint(\n    \"/organization/update-team\",\n    {\n      method: \"POST\",\n      body: z.object({\n        teamId: z.string().meta({\n          description: `The ID of the team to be updated. Eg: \"team-id\"`\n        }),\n        data: z.object({\n          ...teamSchema.shape,\n          ...additionalFieldsSchema.shape\n        }).partial()\n      }),\n      requireHeaders: true,\n      use: [orgMiddleware, orgSessionMiddleware],\n      metadata: {\n        $Infer: { body: {} },\n        openapi: {\n          description: \"Update an existing team in an organization\",\n          responses: {\n            \"200\": {\n              description: \"Team updated successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the updated team\"\n                      },\n                      name: {\n                        type: \"string\",\n                        description: \"Updated name of the team\"\n                      },\n                      organizationId: {\n                        type: \"string\",\n                        description: \"ID of the organization the team belongs to\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was created\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was last updated\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"name\",\n                      \"organizationId\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = ctx.context.session;\n      const organizationId = ctx.body.data.organizationId || session.session.activeOrganizationId;\n      if (!organizationId) {\n        return ctx.json(null, {\n          status: 400,\n          body: {\n            message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n          }\n        });\n      }\n      const adapter = getOrgAdapter(ctx.context, options);\n      const member = await adapter.findMemberByOrgId({\n        userId: session.user.id,\n        organizationId\n      });\n      if (!member) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM\n        });\n      }\n      const canUpdate = hasPermission({\n        role: member.role,\n        options: ctx.context.orgOptions,\n        permissions: {\n          team: [\"update\"]\n        }\n      });\n      if (!canUpdate) {\n        throw new APIError(\"FORBIDDEN\", {\n          message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_TEAM\n        });\n      }\n      const team = await adapter.findTeamById({\n        teamId: ctx.body.teamId,\n        organizationId\n      });\n      if (!team || team.organizationId !== organizationId) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n        });\n      }\n      const { name, organizationId: __, ...additionalFields } = ctx.body.data;\n      const updatedTeam = await adapter.updateTeam(team.id, {\n        name,\n        ...additionalFields\n      });\n      return ctx.json(updatedTeam);\n    }\n  );\n};\nconst listOrganizationTeams = (options) => createAuthEndpoint(\n  \"/organization/list-teams\",\n  {\n    method: \"GET\",\n    query: z.optional(\n      z.object({\n        organizationId: z.string().meta({\n          description: `The organization ID which the teams are under to list. Defaults to the users active organization. Eg: \"organziation-id\"`\n        }).optional()\n      })\n    ),\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all teams in an organization\",\n        responses: {\n          \"200\": {\n            description: \"Teams retrieved successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the team\"\n                      },\n                      name: {\n                        type: \"string\",\n                        description: \"Name of the team\"\n                      },\n                      organizationId: {\n                        type: \"string\",\n                        description: \"ID of the organization the team belongs to\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was created\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team was last updated\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"name\",\n                      \"organizationId\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  },\n                  description: \"Array of team objects within the organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const organizationId = ctx.query?.organizationId || session?.session.activeOrganizationId;\n    if (!organizationId) {\n      throw ctx.error(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const adapter = getOrgAdapter(ctx.context, options);\n    const member = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: organizationId || \"\"\n    });\n    if (!member) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_ACCESS_THIS_ORGANIZATION\n      });\n    }\n    const teams = await adapter.listTeams(organizationId);\n    return ctx.json(teams);\n  }\n);\nconst setActiveTeam = (options) => createAuthEndpoint(\n  \"/organization/set-active-team\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: \"The team id to set as active. It can be null to unset the active team\"\n      }).nullable().optional()\n    }),\n    use: [orgSessionMiddleware, orgMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Set the active team\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The team\",\n                  $ref: \"#/components/schemas/Team\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const session = ctx.context.session;\n    if (ctx.body.teamId === null) {\n      const sessionTeamId = session.session.activeTeamId;\n      if (!sessionTeamId) {\n        return ctx.json(null);\n      }\n      const updatedSession2 = await adapter.setActiveTeam(\n        session.session.token,\n        null\n      );\n      await setSessionCookie(ctx, {\n        session: updatedSession2,\n        user: session.user\n      });\n      return ctx.json(null);\n    }\n    let teamId;\n    if (!ctx.body.teamId) {\n      const sessionTeamId = session.session.activeTeamId;\n      if (!sessionTeamId) {\n        return ctx.json(null);\n      } else {\n        teamId = sessionTeamId;\n      }\n    } else {\n      teamId = ctx.body.teamId;\n    }\n    const team = await adapter.findTeamById({ teamId });\n    if (!team) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.TEAM_NOT_FOUND\n      });\n    }\n    const member = await adapter.findTeamMember({\n      teamId,\n      userId: session.user.id\n    });\n    if (!member) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM\n      });\n    }\n    const updatedSession = await adapter.setActiveTeam(\n      session.session.token,\n      team.id\n    );\n    await setSessionCookie(ctx, {\n      session: updatedSession,\n      user: session.user\n    });\n    return ctx.json(team);\n  }\n);\nconst listUserTeams = (options) => createAuthEndpoint(\n  \"/organization/list-user-teams\",\n  {\n    method: \"GET\",\n    metadata: {\n      openapi: {\n        description: \"List all teams that the current user is a part of.\",\n        responses: {\n          \"200\": {\n            description: \"Teams retrieved successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    description: \"The team\",\n                    $ref: \"#/components/schemas/Team\"\n                  },\n                  description: \"Array of team objects within the organization\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    const teams = await adapter.listTeamsByUser({\n      userId: session.user.id\n    });\n    return ctx.json(teams);\n  }\n);\nconst listTeamMembers = (options) => createAuthEndpoint(\n  \"/organization/list-team-members\",\n  {\n    method: \"GET\",\n    query: z.optional(\n      z.object({\n        teamId: z.string().optional().meta({\n          description: \"The team whose members we should return. If this is not provided the members of the current active team get returned.\"\n        })\n      })\n    ),\n    metadata: {\n      openapi: {\n        description: \"List the members of the given team.\",\n        responses: {\n          \"200\": {\n            description: \"Teams retrieved successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    description: \"The team member\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the team member\"\n                      },\n                      userId: {\n                        type: \"string\",\n                        description: \"The user ID of the team member\"\n                      },\n                      teamId: {\n                        type: \"string\",\n                        description: \"The team ID of the team the team member is in\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Timestamp when the team member was created\"\n                      }\n                    },\n                    required: [\"id\", \"userId\", \"teamId\", \"createdAt\"]\n                  },\n                  description: \"Array of team member objects within the team\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    let teamId = ctx.query?.teamId || session?.session.activeTeamId;\n    if (!teamId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_DO_NOT_HAVE_AN_ACTIVE_TEAM\n      });\n    }\n    const member = await adapter.findTeamMember({\n      userId: session.user.id,\n      teamId\n    });\n    if (!member) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_TEAM\n      });\n    }\n    const members = await adapter.listTeamMembers({\n      teamId\n    });\n    return ctx.json(members);\n  }\n);\nconst addTeamMember = (options) => createAuthEndpoint(\n  \"/organization/add-team-member\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: \"The team the user should be a member of.\"\n      }),\n      userId: z.coerce.string().meta({\n        description: \"The user Id which represents the user to be added as a member.\"\n      })\n    }),\n    metadata: {\n      openapi: {\n        description: \"The newly created member\",\n        responses: {\n          \"200\": {\n            description: \"Team member created successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  description: \"The team member\",\n                  properties: {\n                    id: {\n                      type: \"string\",\n                      description: \"Unique identifier of the team member\"\n                    },\n                    userId: {\n                      type: \"string\",\n                      description: \"The user ID of the team member\"\n                    },\n                    teamId: {\n                      type: \"string\",\n                      description: \"The team ID of the team the team member is in\"\n                    },\n                    createdAt: {\n                      type: \"string\",\n                      format: \"date-time\",\n                      description: \"Timestamp when the team member was created\"\n                    }\n                  },\n                  required: [\"id\", \"userId\", \"teamId\", \"createdAt\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    if (!session.session.activeOrganizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const currentMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!currentMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const canUpdateMember = hasPermission({\n      role: currentMember.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        member: [\"update\"]\n      }\n    });\n    if (!canUpdateMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_TEAM_MEMBER\n      });\n    }\n    const toBeAddedMember = await adapter.findMemberByOrgId({\n      userId: ctx.body.userId,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!toBeAddedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const teamMember = await adapter.findOrCreateTeamMember({\n      teamId: ctx.body.teamId,\n      userId: ctx.body.userId\n    });\n    return ctx.json(teamMember);\n  }\n);\nconst removeTeamMember = (options) => createAuthEndpoint(\n  \"/organization/remove-team-member\",\n  {\n    method: \"POST\",\n    body: z.object({\n      teamId: z.string().meta({\n        description: \"The team the user should be removed from.\"\n      }),\n      userId: z.coerce.string().meta({\n        description: \"The user which should be removed from the team.\"\n      })\n    }),\n    metadata: {\n      openapi: {\n        description: \"Remove a member from a team\",\n        responses: {\n          \"200\": {\n            description: \"Team member removed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Confirmation message indicating successful removal\",\n                      enum: [\"Team member removed successfully.\"]\n                    }\n                  },\n                  required: [\"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    use: [orgMiddleware, orgSessionMiddleware]\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    const adapter = getOrgAdapter(ctx.context, ctx.context.orgOptions);\n    if (!session.session.activeOrganizationId) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n      });\n    }\n    const currentMember = await adapter.findMemberByOrgId({\n      userId: session.user.id,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!currentMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    const canDeleteMember = hasPermission({\n      role: currentMember.role,\n      options: ctx.context.orgOptions,\n      permissions: {\n        member: [\"delete\"]\n      }\n    });\n    if (!canDeleteMember) {\n      throw new APIError(\"FORBIDDEN\", {\n        message: ORGANIZATION_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_REMOVE_A_TEAM_MEMBER\n      });\n    }\n    const toBeAddedMember = await adapter.findMemberByOrgId({\n      userId: ctx.body.userId,\n      organizationId: session.session.activeOrganizationId\n    });\n    if (!toBeAddedMember) {\n      throw new APIError(\"BAD_REQUEST\", {\n        message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n      });\n    }\n    await adapter.removeTeamMember({\n      teamId: ctx.body.teamId,\n      userId: ctx.body.userId\n    });\n    return ctx.json({ message: \"Team member removed successfully.\" });\n  }\n);\n\nfunction parseRoles(roles) {\n  return Array.isArray(roles) ? roles.join(\",\") : roles;\n}\nconst organization = (options) => {\n  let endpoints = {\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/create`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.createOrganization`\n     *\n     * **client:**\n     * `authClient.organization.create`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-create)\n     */\n    createOrganization: createOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/update`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.updateOrganization`\n     *\n     * **client:**\n     * `authClient.organization.update`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update)\n     */\n    updateOrganization: updateOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/delete`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.deleteOrganization`\n     *\n     * **client:**\n     * `authClient.organization.delete`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-delete)\n     */\n    deleteOrganization: deleteOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/set-active`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.setActiveOrganization`\n     *\n     * **client:**\n     * `authClient.organization.setActive`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-set-active)\n     */\n    setActiveOrganization: setActiveOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/get-full-organization`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.getFullOrganization`\n     *\n     * **client:**\n     * `authClient.organization.getFullOrganization`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-full-organization)\n     */\n    getFullOrganization: getFullOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listOrganizations`\n     *\n     * **client:**\n     * `authClient.organization.list`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list)\n     */\n    listOrganizations: listOrganizations(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/invite-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.createInvitation`\n     *\n     * **client:**\n     * `authClient.organization.inviteMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-invite-member)\n     */\n    createInvitation: createInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/cancel-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.cancelInvitation`\n     *\n     * **client:**\n     * `authClient.organization.cancelInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-cancel-invitation)\n     */\n    cancelInvitation: cancelInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/accept-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.acceptInvitation`\n     *\n     * **client:**\n     * `authClient.organization.acceptInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-accept-invitation)\n     */\n    acceptInvitation: acceptInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/get-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.getInvitation`\n     *\n     * **client:**\n     * `authClient.organization.getInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-invitation)\n     */\n    getInvitation: getInvitation(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/reject-invitation`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.rejectInvitation`\n     *\n     * **client:**\n     * `authClient.organization.rejectInvitation`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-reject-invitation)\n     */\n    rejectInvitation: rejectInvitation(),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-invitations`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listInvitations`\n     *\n     * **client:**\n     * `authClient.organization.listInvitations`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-invitations)\n     */\n    listInvitations: listInvitations(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/get-active-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.getActiveMember`\n     *\n     * **client:**\n     * `authClient.organization.getActiveMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-get-active-member)\n     */\n    getActiveMember: getActiveMember(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/check-slug`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.checkOrganizationSlug`\n     *\n     * **client:**\n     * `authClient.organization.checkSlug`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-check-slug)\n     */\n    checkOrganizationSlug: checkOrganizationSlug(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/add-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.addMember`\n     *\n     * **client:**\n     * `authClient.organization.addMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-add-member)\n     */\n    addMember: addMember(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/remove-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.removeMember`\n     *\n     * **client:**\n     * `authClient.organization.removeMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-remove-member)\n     */\n    removeMember: removeMember(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/update-member-role`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.updateMemberRole`\n     *\n     * **client:**\n     * `authClient.organization.updateMemberRole`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update-member-role)\n     */\n    updateMemberRole: updateMemberRole(),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/leave`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.leaveOrganization`\n     *\n     * **client:**\n     * `authClient.organization.leave`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-leave)\n     */\n    leaveOrganization: leaveOrganization(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-members`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listMembers`\n     *\n     * **client:**\n     * `authClient.organization.listMembers`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-members)\n     */\n    listUserInvitations: listUserInvitations(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-members`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listMembers`\n     *\n     * **client:**\n     * `authClient.organization.listMembers`\n     */\n    listMembers: listMembers(options)\n  };\n  const teamSupport = options?.teams?.enabled;\n  const teamEndpoints = {\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/create-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.createTeam`\n     *\n     * **client:**\n     * `authClient.organization.createTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-create-team)\n     */\n    createTeam: createTeam(options),\n    /**\n     * ### Endpoint\n     *\n     * GET `/organization/list-teams`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listOrganizationTeams`\n     *\n     * **client:**\n     * `authClient.organization.listTeams`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-list-teams)\n     */\n    listOrganizationTeams: listOrganizationTeams(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/remove-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.removeTeam`\n     *\n     * **client:**\n     * `authClient.organization.removeTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-remove-team)\n     */\n    removeTeam: removeTeam(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/update-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.updateTeam`\n     *\n     * **client:**\n     * `authClient.organization.updateTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-method-organization-update-team)\n     */\n    updateTeam: updateTeam(options),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/set-active-team`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.setActiveTeam`\n     *\n     * **client:**\n     * `authClient.organization.setActiveTeam`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)\n     */\n    setActiveTeam: setActiveTeam(),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/list-user-teams`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listUserTeams`\n     *\n     * **client:**\n     * `authClient.organization.listUserTeams`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)\n     */\n    listUserTeams: listUserTeams(),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/list-team-members`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.listTeamMembers`\n     *\n     * **client:**\n     * `authClient.organization.listTeamMembers`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-set-active-team)\n     */\n    listTeamMembers: listTeamMembers(),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/add-team-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.addTeamMember`\n     *\n     * **client:**\n     * `authClient.organization.addTeamMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-add-team-member)\n     */\n    addTeamMember: addTeamMember(),\n    /**\n     * ### Endpoint\n     *\n     * POST `/organization/remove-team-member`\n     *\n     * ### API Methods\n     *\n     * **server:**\n     * `auth.api.removeTeamMember`\n     *\n     * **client:**\n     * `authClient.organization.removeTeamMember`\n     *\n     * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/organization#api-remove-team-member)\n     */\n    removeTeamMember: removeTeamMember()\n  };\n  if (teamSupport) {\n    endpoints = {\n      ...endpoints,\n      ...teamEndpoints\n    };\n  }\n  const roles = {\n    ...defaultRoles,\n    ...options?.roles\n  };\n  const teamSchema = teamSupport ? {\n    team: {\n      modelName: options?.schema?.team?.modelName,\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options?.schema?.team?.fields?.name\n        },\n        organizationId: {\n          type: \"string\",\n          required: true,\n          references: {\n            model: \"organization\",\n            field: \"id\"\n          },\n          fieldName: options?.schema?.team?.fields?.organizationId\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options?.schema?.team?.fields?.createdAt\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options?.schema?.team?.fields?.updatedAt\n        },\n        ...options?.schema?.team?.additionalFields || {}\n      }\n    },\n    teamMember: {\n      modelName: options?.schema?.teamMember?.modelName,\n      fields: {\n        teamId: {\n          type: \"string\",\n          required: true,\n          fieldName: options?.schema?.teamMember?.fields?.teamId\n        },\n        userId: {\n          type: \"string\",\n          required: true,\n          references: {\n            model: \"user\",\n            field: \"id\"\n          },\n          fieldName: options?.schema?.teamMember?.fields?.userId\n        },\n        createdAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options?.schema?.teamMember?.fields?.createdAt\n        }\n      }\n    }\n  } : void 0;\n  const api = shimContext(endpoints, {\n    orgOptions: options || {},\n    roles,\n    getSession: async (context) => {\n      return await getSessionFromCtx(context);\n    }\n  });\n  return {\n    id: \"organization\",\n    endpoints: {\n      // ...endpoints,\n      ...api,\n      hasPermission: createAuthEndpoint(\n        \"/organization/has-permission\",\n        {\n          method: \"POST\",\n          requireHeaders: true,\n          body: z.object({\n            organizationId: z.string().optional()\n          }).and(\n            z.union([\n              z.object({\n                permission: z.record(z.string(), z.array(z.string())),\n                permissions: z.undefined()\n              }),\n              z.object({\n                permission: z.undefined(),\n                permissions: z.record(z.string(), z.array(z.string()))\n              })\n            ])\n          ),\n          use: [orgSessionMiddleware],\n          metadata: {\n            $Infer: {\n              body: {}\n            },\n            openapi: {\n              description: \"Check if the user has permission\",\n              requestBody: {\n                content: {\n                  \"application/json\": {\n                    schema: {\n                      type: \"object\",\n                      properties: {\n                        permission: {\n                          type: \"object\",\n                          description: \"The permission to check\",\n                          deprecated: true\n                        },\n                        permissions: {\n                          type: \"object\",\n                          description: \"The permission to check\"\n                        }\n                      },\n                      required: [\"permissions\"]\n                    }\n                  }\n                }\n              },\n              responses: {\n                \"200\": {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          error: {\n                            type: \"string\"\n                          },\n                          success: {\n                            type: \"boolean\"\n                          }\n                        },\n                        required: [\"success\"]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const activeOrganizationId = ctx.body.organizationId || ctx.context.session.session.activeOrganizationId;\n          if (!activeOrganizationId) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ORGANIZATION_ERROR_CODES.NO_ACTIVE_ORGANIZATION\n            });\n          }\n          const adapter = getOrgAdapter(ctx.context, options);\n          const member = await adapter.findMemberByOrgId({\n            userId: ctx.context.session.user.id,\n            organizationId: activeOrganizationId\n          });\n          if (!member) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              message: ORGANIZATION_ERROR_CODES.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION\n            });\n          }\n          const result = hasPermission({\n            role: member.role,\n            options: options || {},\n            permissions: ctx.body.permissions ?? ctx.body.permission\n          });\n          return ctx.json({\n            error: null,\n            success: result\n          });\n        }\n      )\n    },\n    schema: {\n      session: {\n        fields: {\n          activeOrganizationId: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.session?.fields?.activeOrganizationId\n          },\n          ...teamSupport ? {\n            activeTeamId: {\n              type: \"string\",\n              required: false,\n              fieldName: options?.schema?.session?.fields?.activeTeamId\n            }\n          } : {}\n        }\n      },\n      organization: {\n        modelName: options?.schema?.organization?.modelName,\n        fields: {\n          name: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            fieldName: options?.schema?.organization?.fields?.name\n          },\n          slug: {\n            type: \"string\",\n            unique: true,\n            sortable: true,\n            fieldName: options?.schema?.organization?.fields?.slug\n          },\n          logo: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.organization?.fields?.logo\n          },\n          createdAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.organization?.fields?.createdAt\n          },\n          metadata: {\n            type: \"string\",\n            required: false,\n            fieldName: options?.schema?.organization?.fields?.metadata\n          },\n          ...options?.schema?.organization?.additionalFields || {}\n        }\n      },\n      member: {\n        modelName: options?.schema?.member?.modelName,\n        fields: {\n          organizationId: {\n            type: \"string\",\n            required: true,\n            references: {\n              model: \"organization\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.member?.fields?.organizationId\n          },\n          userId: {\n            type: \"string\",\n            required: true,\n            fieldName: options?.schema?.member?.fields?.userId,\n            references: {\n              model: \"user\",\n              field: \"id\"\n            }\n          },\n          role: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            defaultValue: \"member\",\n            fieldName: options?.schema?.member?.fields?.role\n          },\n          createdAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.member?.fields?.createdAt\n          },\n          ...options?.schema?.member?.additionalFields || {}\n        }\n      },\n      invitation: {\n        modelName: options?.schema?.invitation?.modelName,\n        fields: {\n          organizationId: {\n            type: \"string\",\n            required: true,\n            references: {\n              model: \"organization\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.invitation?.fields?.organizationId\n          },\n          email: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            fieldName: options?.schema?.invitation?.fields?.email\n          },\n          role: {\n            type: \"string\",\n            required: false,\n            sortable: true,\n            fieldName: options?.schema?.invitation?.fields?.role\n          },\n          ...teamSupport ? {\n            teamId: {\n              type: \"string\",\n              required: false,\n              sortable: true,\n              fieldName: options?.schema?.invitation?.fields?.teamId\n            }\n          } : {},\n          status: {\n            type: \"string\",\n            required: true,\n            sortable: true,\n            defaultValue: \"pending\",\n            fieldName: options?.schema?.invitation?.fields?.status\n          },\n          expiresAt: {\n            type: \"date\",\n            required: true,\n            fieldName: options?.schema?.invitation?.fields?.expiresAt\n          },\n          inviterId: {\n            type: \"string\",\n            references: {\n              model: \"user\",\n              field: \"id\"\n            },\n            fieldName: options?.schema?.invitation?.fields?.inviterId,\n            required: true\n          },\n          ...options?.schema?.invitation?.additionalFields || {}\n        }\n      },\n      ...teamSupport ? teamSchema : {}\n    },\n    $Infer: {\n      Organization: {},\n      Invitation: {},\n      Member: {},\n      Team: teamSupport ? {} : {},\n      TeamMember: teamSupport ? {} : {},\n      ActiveOrganization: {}\n    },\n    $ERROR_CODES: ORGANIZATION_ERROR_CODES,\n    options\n  };\n};\n\nexport { organization as o, parseRoles as p };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13871, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.Ddw8bVyV.mjs"],"sourcesContent":["const twoFactorClient = (options) => {\n  return {\n    id: \"two-factor\",\n    $InferServerPlugin: {},\n    atomListeners: [\n      {\n        matcher: (path) => path.startsWith(\"/two-factor/\"),\n        signal: \"$sessionSignal\"\n      }\n    ],\n    pathMethods: {\n      \"/two-factor/disable\": \"POST\",\n      \"/two-factor/enable\": \"POST\",\n      \"/two-factor/send-otp\": \"POST\",\n      \"/two-factor/generate-backup-codes\": \"POST\"\n    },\n    fetchPlugins: [\n      {\n        id: \"two-factor\",\n        name: \"two-factor\",\n        hooks: {\n          async onSuccess(context) {\n            if (context.data?.twoFactorRedirect) {\n              if (options?.onTwoFactorRedirect) {\n                await options.onTwoFactorRedirect();\n              }\n            }\n          }\n        }\n      }\n    ]\n  };\n};\n\nexport { twoFactorClient as t };\n"],"names":[],"mappings":";;;AAAA,MAAM,kBAAkB,CAAC;IACvB,OAAO;QACL,IAAI;QACJ,oBAAoB,CAAC;QACrB,eAAe;YACb;gBACE,SAAS,CAAC,OAAS,KAAK,UAAU,CAAC;gBACnC,QAAQ;YACV;SACD;QACD,aAAa;YACX,uBAAuB;YACvB,sBAAsB;YACtB,wBAAwB;YACxB,qCAAqC;QACvC;QACA,cAAc;YACZ;gBACE,IAAI;gBACJ,MAAM;gBACN,OAAO;oBACL,MAAM,WAAU,OAAO;wBACrB,IAAI,QAAQ,IAAI,EAAE,mBAAmB;4BACnC,IAAI,SAAS,qBAAqB;gCAChC,MAAM,QAAQ,mBAAmB;4BACnC;wBACF;oBACF;gBACF;YACF;SACD;IACH;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13912, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.DQI8AD7d.mjs"],"sourcesContent":["import { APIError } from 'better-call';\n\nconst getEndpointResponse = async (ctx) => {\n  const returned = ctx.context.returned;\n  if (!returned) {\n    return null;\n  }\n  if (returned instanceof Response) {\n    if (returned.status !== 200) {\n      return null;\n    }\n    return await returned.clone().json();\n  }\n  if (returned instanceof APIError) {\n    return null;\n  }\n  return returned;\n};\n\nexport { getEndpointResponse as g };\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,sBAAsB,OAAO;IACjC,MAAM,WAAW,IAAI,OAAO,CAAC,QAAQ;IACrC,IAAI,CAAC,UAAU;QACb,OAAO;IACT;IACA,IAAI,oBAAoB,UAAU;QAChC,IAAI,SAAS,MAAM,KAAK,KAAK;YAC3B,OAAO;QACT;QACA,OAAO,MAAM,SAAS,KAAK,GAAG,IAAI;IACpC;IACA,IAAI,oBAAoB,6MAAA,CAAA,WAAQ,EAAE;QAChC,OAAO;IACT;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13938, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.bkwPl2G4.mjs"],"sourcesContent":["import { defaultRoles } from '../plugins/admin/access/index.mjs';\n\nconst hasPermission = (input) => {\n  if (input.userId && input.options?.adminUserIds?.includes(input.userId)) {\n    return true;\n  }\n  if (!input.permissions && !input.permission) {\n    return false;\n  }\n  const roles = (input.role || input.options?.defaultRole || \"user\").split(\",\");\n  const acRoles = input.options?.roles || defaultRoles;\n  for (const role of roles) {\n    const _role = acRoles[role];\n    const result = _role?.authorize(input.permission ?? input.permissions);\n    if (result?.success) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport { hasPermission as h };\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,CAAC;IACrB,IAAI,MAAM,MAAM,IAAI,MAAM,OAAO,EAAE,cAAc,SAAS,MAAM,MAAM,GAAG;QACvE,OAAO;IACT;IACA,IAAI,CAAC,MAAM,WAAW,IAAI,CAAC,MAAM,UAAU,EAAE;QAC3C,OAAO;IACT;IACA,MAAM,QAAQ,CAAC,MAAM,IAAI,IAAI,MAAM,OAAO,EAAE,eAAe,MAAM,EAAE,KAAK,CAAC;IACzE,MAAM,UAAU,MAAM,OAAO,EAAE,SAAS,wTAAA,CAAA,eAAY;IACpD,KAAK,MAAM,QAAQ,MAAO;QACxB,MAAM,QAAQ,OAAO,CAAC,KAAK;QAC3B,MAAM,SAAS,OAAO,UAAU,MAAM,UAAU,IAAI,MAAM,WAAW;QACrE,IAAI,QAAQ,SAAS;YACnB,OAAO;QACT;IACF;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 13966, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.CeHRmQ1_.mjs"],"sourcesContent":["import * as z from 'zod/v4';\nimport { APIError } from 'better-call';\nimport { i as createAuthMiddleware, k as getSessionFromCtx, j as createAuthEndpoint } from './better-auth.z3dsxLxE.mjs';\nimport { setSessionCookie, deleteSessionCookie } from '../cookies/index.mjs';\nimport { m as mergeSchema } from './better-auth.n2KFGwjY.mjs';\nimport './better-auth.8zoxzg-F.mjs';\nimport './better-auth.DBGfIDnh.mjs';\nimport 'defu';\nimport { g as getDate } from './better-auth.CW6D9eSx.mjs';\nimport { g as getEndpointResponse } from './better-auth.DQI8AD7d.mjs';\nimport { h as hasPermission } from './better-auth.bkwPl2G4.mjs';\n\nconst ADMIN_ERROR_CODES = {\n  FAILED_TO_CREATE_USER: \"Failed to create user\",\n  USER_ALREADY_EXISTS: \"User already exists\",\n  YOU_CANNOT_BAN_YOURSELF: \"You cannot ban yourself\",\n  YOU_ARE_NOT_ALLOWED_TO_CHANGE_USERS_ROLE: \"You are not allowed to change users role\",\n  YOU_ARE_NOT_ALLOWED_TO_CREATE_USERS: \"You are not allowed to create users\",\n  YOU_ARE_NOT_ALLOWED_TO_LIST_USERS: \"You are not allowed to list users\",\n  YOU_ARE_NOT_ALLOWED_TO_LIST_USERS_SESSIONS: \"You are not allowed to list users sessions\",\n  YOU_ARE_NOT_ALLOWED_TO_BAN_USERS: \"You are not allowed to ban users\",\n  YOU_ARE_NOT_ALLOWED_TO_IMPERSONATE_USERS: \"You are not allowed to impersonate users\",\n  YOU_ARE_NOT_ALLOWED_TO_REVOKE_USERS_SESSIONS: \"You are not allowed to revoke users sessions\",\n  YOU_ARE_NOT_ALLOWED_TO_DELETE_USERS: \"You are not allowed to delete users\",\n  YOU_ARE_NOT_ALLOWED_TO_SET_USERS_PASSWORD: \"You are not allowed to set users password\",\n  BANNED_USER: \"You have been banned from this application\",\n  NO_DATA_TO_UPDATE: \"No data to update\",\n  YOU_ARE_NOT_ALLOWED_TO_UPDATE_USERS: \"You are not allowed to update users\"\n};\n\nconst schema = {\n  user: {\n    fields: {\n      role: {\n        type: \"string\",\n        required: false,\n        input: false\n      },\n      banned: {\n        type: \"boolean\",\n        defaultValue: false,\n        required: false,\n        input: false\n      },\n      banReason: {\n        type: \"string\",\n        required: false,\n        input: false\n      },\n      banExpires: {\n        type: \"date\",\n        required: false,\n        input: false\n      }\n    }\n  },\n  session: {\n    fields: {\n      impersonatedBy: {\n        type: \"string\",\n        required: false\n      }\n    }\n  }\n};\n\nfunction parseRoles(roles) {\n  return Array.isArray(roles) ? roles.join(\",\") : roles;\n}\nconst admin = (options) => {\n  const opts = {\n    defaultRole: options?.defaultRole ?? \"user\",\n    adminRoles: options?.adminRoles ?? [\"admin\"],\n    bannedUserMessage: options?.bannedUserMessage ?? \"You have been banned from this application. Please contact support if you believe this is an error.\",\n    ...options\n  };\n  const adminMiddleware = createAuthMiddleware(async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new APIError(\"UNAUTHORIZED\");\n    }\n    return {\n      session\n    };\n  });\n  return {\n    id: \"admin\",\n    init() {\n      return {\n        options: {\n          databaseHooks: {\n            user: {\n              create: {\n                async before(user) {\n                  return {\n                    data: {\n                      role: options?.defaultRole ?? \"user\",\n                      ...user\n                    }\n                  };\n                }\n              }\n            },\n            session: {\n              create: {\n                async before(session, ctx) {\n                  if (!ctx) {\n                    return;\n                  }\n                  const user = await ctx.context.internalAdapter.findUserById(\n                    session.userId\n                  );\n                  if (user.banned) {\n                    if (user.banExpires && new Date(user.banExpires).getTime() < Date.now()) {\n                      await ctx.context.internalAdapter.updateUser(\n                        session.userId,\n                        {\n                          banned: false,\n                          banReason: null,\n                          banExpires: null\n                        }\n                      );\n                      return;\n                    }\n                    if (ctx && (ctx.path.startsWith(\"/callback\") || ctx.path.startsWith(\"/oauth2/callback\"))) {\n                      const redirectURI = ctx.context.options.onAPIError?.errorURL || `${ctx.context.baseURL}/error`;\n                      throw ctx.redirect(\n                        `${redirectURI}?error=banned&error_description=${opts.bannedUserMessage}`\n                      );\n                    }\n                    throw new APIError(\"FORBIDDEN\", {\n                      message: opts.bannedUserMessage,\n                      code: \"BANNED_USER\"\n                    });\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n    },\n    hooks: {\n      after: [\n        {\n          matcher(context) {\n            return context.path === \"/list-sessions\";\n          },\n          handler: createAuthMiddleware(async (ctx) => {\n            const response = await getEndpointResponse(ctx);\n            if (!response) {\n              return;\n            }\n            const newJson = response.filter((session) => {\n              return !session.impersonatedBy;\n            });\n            return ctx.json(newJson);\n          })\n        }\n      ]\n    },\n    endpoints: {\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/set-role`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.setRole`\n       *\n       * **client:**\n       * `authClient.admin.setRole`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-set-role)\n       */\n      setRole: createAuthEndpoint(\n        \"/admin/set-role\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            }),\n            role: z.union([\n              z.string().meta({\n                description: \"The role to set. `admin` or `user` by default\"\n              }),\n              z.array(\n                z.string().meta({\n                  description: \"The roles to set. `admin` or `user` by default\"\n                })\n              )\n            ]).meta({\n              description: \"The role to set, this can be a string or an array of strings. Eg: `admin` or `[admin, user]`\"\n            })\n          }),\n          requireHeaders: true,\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"setRole\",\n              summary: \"Set the role of a user\",\n              description: \"Set the role of a user\",\n              responses: {\n                200: {\n                  description: \"User role updated\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          user: {\n                            $ref: \"#/components/schemas/User\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            $Infer: {\n              body: {}\n            }\n          }\n        },\n        async (ctx) => {\n          const canSetRole = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: ctx.context.session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"set-role\"]\n            }\n          });\n          if (!canSetRole) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CHANGE_USERS_ROLE\n            });\n          }\n          const updatedUser = await ctx.context.internalAdapter.updateUser(\n            ctx.body.userId,\n            {\n              role: parseRoles(ctx.body.role)\n            },\n            ctx\n          );\n          return ctx.json({\n            user: updatedUser\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/create-user`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.createUser`\n       *\n       * **client:**\n       * `authClient.admin.createUser`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-create-user)\n       */\n      createUser: createAuthEndpoint(\n        \"/admin/create-user\",\n        {\n          method: \"POST\",\n          body: z.object({\n            email: z.string().meta({\n              description: \"The email of the user\"\n            }),\n            password: z.string().meta({\n              description: \"The password of the user\"\n            }),\n            name: z.string().meta({\n              description: \"The name of the user\"\n            }),\n            role: z.union([\n              z.string().meta({\n                description: \"The role of the user\"\n              }),\n              z.array(\n                z.string().meta({\n                  description: \"The roles of user\"\n                })\n              )\n            ]).optional().meta({\n              description: `A string or array of strings representing the roles to apply to the new user. Eg: \"user\"`\n            }),\n            /**\n             * extra fields for user\n             */\n            data: z.record(z.string(), z.any()).optional().meta({\n              description: \"Extra fields for the user. Including custom additional fields.\"\n            })\n          }),\n          metadata: {\n            openapi: {\n              operationId: \"createUser\",\n              summary: \"Create a new user\",\n              description: \"Create a new user\",\n              responses: {\n                200: {\n                  description: \"User created\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          user: {\n                            $ref: \"#/components/schemas/User\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            $Infer: {\n              body: {}\n            }\n          }\n        },\n        async (ctx) => {\n          const session = await getSessionFromCtx(ctx);\n          if (!session && (ctx.request || ctx.headers)) {\n            throw ctx.error(\"UNAUTHORIZED\");\n          }\n          if (session) {\n            const canCreateUser = hasPermission({\n              userId: session.user.id,\n              role: session.user.role,\n              options: opts,\n              permissions: {\n                user: [\"create\"]\n              }\n            });\n            if (!canCreateUser) {\n              throw new APIError(\"FORBIDDEN\", {\n                message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_CREATE_USERS\n              });\n            }\n          }\n          const existUser = await ctx.context.internalAdapter.findUserByEmail(\n            ctx.body.email\n          );\n          if (existUser) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ADMIN_ERROR_CODES.USER_ALREADY_EXISTS\n            });\n          }\n          const user = await ctx.context.internalAdapter.createUser(\n            {\n              email: ctx.body.email,\n              name: ctx.body.name,\n              role: (ctx.body.role && parseRoles(ctx.body.role)) ?? options?.defaultRole ?? \"user\",\n              ...ctx.body.data\n            },\n            ctx\n          );\n          if (!user) {\n            throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n              message: ADMIN_ERROR_CODES.FAILED_TO_CREATE_USER\n            });\n          }\n          const hashedPassword = await ctx.context.password.hash(\n            ctx.body.password\n          );\n          await ctx.context.internalAdapter.linkAccount(\n            {\n              accountId: user.id,\n              providerId: \"credential\",\n              password: hashedPassword,\n              userId: user.id\n            },\n            ctx\n          );\n          return ctx.json({\n            user\n          });\n        }\n      ),\n      adminUpdateUser: createAuthEndpoint(\n        \"/admin/update-user\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            }),\n            data: z.record(z.any(), z.any()).meta({\n              description: \"The user data to update\"\n            })\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"updateUser\",\n              summary: \"Update a user\",\n              description: \"Update a user's details\",\n              responses: {\n                200: {\n                  description: \"User updated\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          user: {\n                            $ref: \"#/components/schemas/User\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const canUpdateUser = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: ctx.context.session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"update\"]\n            }\n          });\n          if (!canUpdateUser) {\n            throw ctx.error(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_UPDATE_USERS,\n              code: \"YOU_ARE_NOT_ALLOWED_TO_UPDATE_USERS\"\n            });\n          }\n          if (Object.keys(ctx.body.data).length === 0) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ADMIN_ERROR_CODES.NO_DATA_TO_UPDATE\n            });\n          }\n          const updatedUser = await ctx.context.internalAdapter.updateUser(\n            ctx.body.userId,\n            ctx.body.data,\n            ctx\n          );\n          return ctx.json(updatedUser);\n        }\n      ),\n      listUsers: createAuthEndpoint(\n        \"/admin/list-users\",\n        {\n          method: \"GET\",\n          use: [adminMiddleware],\n          query: z.object({\n            searchValue: z.string().optional().meta({\n              description: 'The value to search for. Eg: \"some name\"'\n            }),\n            searchField: z.enum([\"email\", \"name\"]).meta({\n              description: 'The field to search in, defaults to email. Can be `email` or `name`. Eg: \"name\"'\n            }).optional(),\n            searchOperator: z.enum([\"contains\", \"starts_with\", \"ends_with\"]).meta({\n              description: 'The operator to use for the search. Can be `contains`, `starts_with` or `ends_with`. Eg: \"contains\"'\n            }).optional(),\n            limit: z.string().meta({\n              description: \"The number of users to return\"\n            }).or(z.number()).optional(),\n            offset: z.string().meta({\n              description: \"The offset to start from\"\n            }).or(z.number()).optional(),\n            sortBy: z.string().meta({\n              description: \"The field to sort by\"\n            }).optional(),\n            sortDirection: z.enum([\"asc\", \"desc\"]).meta({\n              description: \"The direction to sort by\"\n            }).optional(),\n            filterField: z.string().meta({\n              description: \"The field to filter by\"\n            }).optional(),\n            filterValue: z.string().meta({\n              description: \"The value to filter by\"\n            }).or(z.number()).or(z.boolean()).optional(),\n            filterOperator: z.enum([\"eq\", \"ne\", \"lt\", \"lte\", \"gt\", \"gte\", \"contains\"]).meta({\n              description: \"The operator to use for the filter\"\n            }).optional()\n          }),\n          metadata: {\n            openapi: {\n              operationId: \"listUsers\",\n              summary: \"List users\",\n              description: \"List users\",\n              responses: {\n                200: {\n                  description: \"List of users\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          users: {\n                            type: \"array\",\n                            items: {\n                              $ref: \"#/components/schemas/User\"\n                            }\n                          },\n                          total: {\n                            type: \"number\"\n                          },\n                          limit: {\n                            type: \"number\"\n                          },\n                          offset: {\n                            type: \"number\"\n                          }\n                        },\n                        required: [\"users\", \"total\"]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = ctx.context.session;\n          const canListUsers = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"list\"]\n            }\n          });\n          if (!canListUsers) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_LIST_USERS\n            });\n          }\n          const where = [];\n          if (ctx.query?.searchValue) {\n            where.push({\n              field: ctx.query.searchField || \"email\",\n              operator: ctx.query.searchOperator || \"contains\",\n              value: ctx.query.searchValue\n            });\n          }\n          if (ctx.query?.filterValue) {\n            where.push({\n              field: ctx.query.filterField || \"email\",\n              operator: ctx.query.filterOperator || \"eq\",\n              value: ctx.query.filterValue\n            });\n          }\n          try {\n            const users = await ctx.context.internalAdapter.listUsers(\n              Number(ctx.query?.limit) || void 0,\n              Number(ctx.query?.offset) || void 0,\n              ctx.query?.sortBy ? {\n                field: ctx.query.sortBy,\n                direction: ctx.query.sortDirection || \"asc\"\n              } : void 0,\n              where.length ? where : void 0\n            );\n            const total = await ctx.context.internalAdapter.countTotalUsers(\n              where.length ? where : void 0\n            );\n            return ctx.json({\n              users,\n              total,\n              limit: Number(ctx.query?.limit) || void 0,\n              offset: Number(ctx.query?.offset) || void 0\n            });\n          } catch (e) {\n            return ctx.json({\n              users: [],\n              total: 0\n            });\n          }\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/list-user-sessions`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.listUserSessions`\n       *\n       * **client:**\n       * `authClient.admin.listUserSessions`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-list-user-sessions)\n       */\n      listUserSessions: createAuthEndpoint(\n        \"/admin/list-user-sessions\",\n        {\n          method: \"POST\",\n          use: [adminMiddleware],\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            })\n          }),\n          metadata: {\n            openapi: {\n              operationId: \"listUserSessions\",\n              summary: \"List user sessions\",\n              description: \"List user sessions\",\n              responses: {\n                200: {\n                  description: \"List of user sessions\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          sessions: {\n                            type: \"array\",\n                            items: {\n                              $ref: \"#/components/schemas/Session\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = ctx.context.session;\n          const canListSessions = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: session.user.role,\n            options: opts,\n            permissions: {\n              session: [\"list\"]\n            }\n          });\n          if (!canListSessions) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_LIST_USERS_SESSIONS\n            });\n          }\n          const sessions = await ctx.context.internalAdapter.listSessions(\n            ctx.body.userId\n          );\n          return {\n            sessions\n          };\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/unban-user`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.unbanUser`\n       *\n       * **client:**\n       * `authClient.admin.unbanUser`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-unban-user)\n       */\n      unbanUser: createAuthEndpoint(\n        \"/admin/unban-user\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            })\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"unbanUser\",\n              summary: \"Unban a user\",\n              description: \"Unban a user\",\n              responses: {\n                200: {\n                  description: \"User unbanned\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          user: {\n                            $ref: \"#/components/schemas/User\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = ctx.context.session;\n          const canBanUser = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"ban\"]\n            }\n          });\n          if (!canBanUser) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_BAN_USERS\n            });\n          }\n          const user = await ctx.context.internalAdapter.updateUser(\n            ctx.body.userId,\n            {\n              banned: false,\n              banExpires: null,\n              banReason: null,\n              updatedAt: /* @__PURE__ */ new Date()\n            }\n          );\n          return ctx.json({\n            user\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/ban-user`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.banUser`\n       *\n       * **client:**\n       * `authClient.admin.banUser`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-ban-user)\n       */\n      banUser: createAuthEndpoint(\n        \"/admin/ban-user\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            }),\n            /**\n             * Reason for the ban\n             */\n            banReason: z.string().meta({\n              description: \"The reason for the ban\"\n            }).optional(),\n            /**\n             * Number of seconds until the ban expires\n             */\n            banExpiresIn: z.number().meta({\n              description: \"The number of seconds until the ban expires\"\n            }).optional()\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"banUser\",\n              summary: \"Ban a user\",\n              description: \"Ban a user\",\n              responses: {\n                200: {\n                  description: \"User banned\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          user: {\n                            $ref: \"#/components/schemas/User\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = ctx.context.session;\n          const canBanUser = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"ban\"]\n            }\n          });\n          if (!canBanUser) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_BAN_USERS\n            });\n          }\n          if (ctx.body.userId === ctx.context.session.user.id) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ADMIN_ERROR_CODES.YOU_CANNOT_BAN_YOURSELF\n            });\n          }\n          const user = await ctx.context.internalAdapter.updateUser(\n            ctx.body.userId,\n            {\n              banned: true,\n              banReason: ctx.body.banReason || options?.defaultBanReason || \"No reason\",\n              banExpires: ctx.body.banExpiresIn ? getDate(ctx.body.banExpiresIn, \"sec\") : options?.defaultBanExpiresIn ? getDate(options.defaultBanExpiresIn, \"sec\") : void 0,\n              updatedAt: /* @__PURE__ */ new Date()\n            },\n            ctx\n          );\n          await ctx.context.internalAdapter.deleteSessions(ctx.body.userId);\n          return ctx.json({\n            user\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/impersonate-user`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.impersonateUser`\n       *\n       * **client:**\n       * `authClient.admin.impersonateUser`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-impersonate-user)\n       */\n      impersonateUser: createAuthEndpoint(\n        \"/admin/impersonate-user\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            })\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"impersonateUser\",\n              summary: \"Impersonate a user\",\n              description: \"Impersonate a user\",\n              responses: {\n                200: {\n                  description: \"Impersonation session created\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          session: {\n                            $ref: \"#/components/schemas/Session\"\n                          },\n                          user: {\n                            $ref: \"#/components/schemas/User\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const canImpersonateUser = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: ctx.context.session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"impersonate\"]\n            }\n          });\n          if (!canImpersonateUser) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_IMPERSONATE_USERS\n            });\n          }\n          const targetUser = await ctx.context.internalAdapter.findUserById(\n            ctx.body.userId\n          );\n          if (!targetUser) {\n            throw new APIError(\"NOT_FOUND\", {\n              message: \"User not found\"\n            });\n          }\n          const session = await ctx.context.internalAdapter.createSession(\n            targetUser.id,\n            ctx,\n            true,\n            {\n              impersonatedBy: ctx.context.session.user.id,\n              expiresAt: options?.impersonationSessionDuration ? getDate(options.impersonationSessionDuration, \"sec\") : getDate(60 * 60, \"sec\")\n              // 1 hour\n            },\n            true\n          );\n          if (!session) {\n            throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n              message: ADMIN_ERROR_CODES.FAILED_TO_CREATE_USER\n            });\n          }\n          const authCookies = ctx.context.authCookies;\n          deleteSessionCookie(ctx);\n          const dontRememberMeCookie = await ctx.getSignedCookie(\n            ctx.context.authCookies.dontRememberToken.name,\n            ctx.context.secret\n          );\n          const adminCookieProp = ctx.context.createAuthCookie(\"admin_session\");\n          await ctx.setSignedCookie(\n            adminCookieProp.name,\n            `${ctx.context.session.session.token}:${dontRememberMeCookie || \"\"}`,\n            ctx.context.secret,\n            authCookies.sessionToken.options\n          );\n          await setSessionCookie(\n            ctx,\n            {\n              session,\n              user: targetUser\n            },\n            true\n          );\n          return ctx.json({\n            session,\n            user: targetUser\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/stop-impersonating`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.stopImpersonating`\n       *\n       * **client:**\n       * `authClient.admin.stopImpersonating`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-stop-impersonating)\n       */\n      stopImpersonating: createAuthEndpoint(\n        \"/admin/stop-impersonating\",\n        {\n          method: \"POST\",\n          requireHeaders: true\n        },\n        async (ctx) => {\n          const session = await getSessionFromCtx(ctx);\n          if (!session) {\n            throw new APIError(\"UNAUTHORIZED\");\n          }\n          if (!session.session.impersonatedBy) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: \"You are not impersonating anyone\"\n            });\n          }\n          const user = await ctx.context.internalAdapter.findUserById(\n            session.session.impersonatedBy\n          );\n          if (!user) {\n            throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n              message: \"Failed to find user\"\n            });\n          }\n          const adminCookieName = ctx.context.createAuthCookie(\"admin_session\").name;\n          const adminCookie = await ctx.getSignedCookie(\n            adminCookieName,\n            ctx.context.secret\n          );\n          if (!adminCookie) {\n            throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n              message: \"Failed to find admin session\"\n            });\n          }\n          const [adminSessionToken, dontRememberMeCookie] = adminCookie?.split(\":\");\n          const adminSession = await ctx.context.internalAdapter.findSession(adminSessionToken);\n          if (!adminSession || adminSession.session.userId !== user.id) {\n            throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n              message: \"Failed to find admin session\"\n            });\n          }\n          await ctx.context.internalAdapter.deleteSession(\n            session.session.token\n          );\n          await setSessionCookie(ctx, adminSession, !!dontRememberMeCookie);\n          return ctx.json(adminSession);\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/revoke-user-session`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.revokeUserSession`\n       *\n       * **client:**\n       * `authClient.admin.revokeUserSession`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-revoke-user-session)\n       */\n      revokeUserSession: createAuthEndpoint(\n        \"/admin/revoke-user-session\",\n        {\n          method: \"POST\",\n          body: z.object({\n            sessionToken: z.string().meta({\n              description: \"The session token\"\n            })\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"revokeUserSession\",\n              summary: \"Revoke a user session\",\n              description: \"Revoke a user session\",\n              responses: {\n                200: {\n                  description: \"Session revoked\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          success: {\n                            type: \"boolean\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = ctx.context.session;\n          const canRevokeSession = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: session.user.role,\n            options: opts,\n            permissions: {\n              session: [\"revoke\"]\n            }\n          });\n          if (!canRevokeSession) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_REVOKE_USERS_SESSIONS\n            });\n          }\n          await ctx.context.internalAdapter.deleteSession(\n            ctx.body.sessionToken\n          );\n          return ctx.json({\n            success: true\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/revoke-user-sessions`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.revokeUserSessions`\n       *\n       * **client:**\n       * `authClient.admin.revokeUserSessions`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-revoke-user-sessions)\n       */\n      revokeUserSessions: createAuthEndpoint(\n        \"/admin/revoke-user-sessions\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            })\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"revokeUserSessions\",\n              summary: \"Revoke all user sessions\",\n              description: \"Revoke all user sessions\",\n              responses: {\n                200: {\n                  description: \"Sessions revoked\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          success: {\n                            type: \"boolean\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = ctx.context.session;\n          const canRevokeSession = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: session.user.role,\n            options: opts,\n            permissions: {\n              session: [\"revoke\"]\n            }\n          });\n          if (!canRevokeSession) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_REVOKE_USERS_SESSIONS\n            });\n          }\n          await ctx.context.internalAdapter.deleteSessions(ctx.body.userId);\n          return ctx.json({\n            success: true\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/remove-user`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.removeUser`\n       *\n       * **client:**\n       * `authClient.admin.removeUser`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-remove-user)\n       */\n      removeUser: createAuthEndpoint(\n        \"/admin/remove-user\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            })\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"removeUser\",\n              summary: \"Remove a user\",\n              description: \"Delete a user and all their sessions and accounts. Cannot be undone.\",\n              responses: {\n                200: {\n                  description: \"User removed\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          success: {\n                            type: \"boolean\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const session = ctx.context.session;\n          const canDeleteUser = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"delete\"]\n            }\n          });\n          if (!canDeleteUser) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_DELETE_USERS\n            });\n          }\n          const user = await ctx.context.internalAdapter.findUserById(\n            ctx.body.userId\n          );\n          if (!user) {\n            throw new APIError(\"NOT_FOUND\", {\n              message: \"User not found\"\n            });\n          }\n          await ctx.context.internalAdapter.deleteUser(ctx.body.userId);\n          return ctx.json({\n            success: true\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/set-user-password`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.setUserPassword`\n       *\n       * **client:**\n       * `authClient.admin.setUserPassword`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-set-user-password)\n       */\n      setUserPassword: createAuthEndpoint(\n        \"/admin/set-user-password\",\n        {\n          method: \"POST\",\n          body: z.object({\n            newPassword: z.string().meta({\n              description: \"The new password\"\n            }),\n            userId: z.coerce.string().meta({\n              description: \"The user id\"\n            })\n          }),\n          use: [adminMiddleware],\n          metadata: {\n            openapi: {\n              operationId: \"setUserPassword\",\n              summary: \"Set a user's password\",\n              description: \"Set a user's password\",\n              responses: {\n                200: {\n                  description: \"Password set\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          status: {\n                            type: \"boolean\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const canSetUserPassword = hasPermission({\n            userId: ctx.context.session.user.id,\n            role: ctx.context.session.user.role,\n            options: opts,\n            permissions: {\n              user: [\"set-password\"]\n            }\n          });\n          if (!canSetUserPassword) {\n            throw new APIError(\"FORBIDDEN\", {\n              message: ADMIN_ERROR_CODES.YOU_ARE_NOT_ALLOWED_TO_SET_USERS_PASSWORD\n            });\n          }\n          const hashedPassword = await ctx.context.password.hash(\n            ctx.body.newPassword\n          );\n          await ctx.context.internalAdapter.updatePassword(\n            ctx.body.userId,\n            hashedPassword\n          );\n          return ctx.json({\n            status: true\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/admin/has-permission`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.userHasPermission`\n       *\n       * **client:**\n       * `authClient.admin.hasPermission`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/admin#api-method-admin-has-permission)\n       */\n      userHasPermission: createAuthEndpoint(\n        \"/admin/has-permission\",\n        {\n          method: \"POST\",\n          body: z.object({\n            userId: z.coerce.string().optional().meta({\n              description: `The user id. Eg: \"user-id\"`\n            }),\n            role: z.string().optional().meta({\n              description: `The role to check permission for. Eg: \"admin\"`\n            })\n          }).and(\n            z.union([\n              z.object({\n                permission: z.record(z.string(), z.array(z.string())),\n                permissions: z.undefined()\n              }),\n              z.object({\n                permission: z.undefined(),\n                permissions: z.record(z.string(), z.array(z.string()))\n              })\n            ])\n          ),\n          metadata: {\n            openapi: {\n              description: \"Check if the user has permission\",\n              requestBody: {\n                content: {\n                  \"application/json\": {\n                    schema: {\n                      type: \"object\",\n                      properties: {\n                        permission: {\n                          type: \"object\",\n                          description: \"The permission to check\",\n                          deprecated: true\n                        },\n                        permissions: {\n                          type: \"object\",\n                          description: \"The permission to check\"\n                        }\n                      },\n                      required: [\"permissions\"]\n                    }\n                  }\n                }\n              },\n              responses: {\n                \"200\": {\n                  description: \"Success\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          error: {\n                            type: \"string\"\n                          },\n                          success: {\n                            type: \"boolean\"\n                          }\n                        },\n                        required: [\"success\"]\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            $Infer: {\n              body: {}\n            }\n          }\n        },\n        async (ctx) => {\n          if (!ctx.body?.permission && !ctx.body?.permissions) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: \"invalid permission check. no permission(s) were passed.\"\n            });\n          }\n          const session = await getSessionFromCtx(ctx);\n          if (!session && (ctx.request || ctx.headers) && !ctx.body.userId && !ctx.body.role) {\n            throw new APIError(\"UNAUTHORIZED\");\n          }\n          const user = session?.user || await ctx.context.internalAdapter.findUserById(\n            ctx.body.userId\n          ) || (ctx.body.role ? { id: \"\", role: ctx.body.role } : null);\n          if (!user) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: \"user not found\"\n            });\n          }\n          const result = hasPermission({\n            userId: user.id,\n            role: user.role,\n            options,\n            permissions: ctx.body.permissions ?? ctx.body.permission\n          });\n          return ctx.json({\n            error: null,\n            success: result\n          });\n        }\n      )\n    },\n    $ERROR_CODES: ADMIN_ERROR_CODES,\n    schema: mergeSchema(schema, opts.schema),\n    options\n  };\n};\n\nexport { admin as a };\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,MAAM,oBAAoB;IACxB,uBAAuB;IACvB,qBAAqB;IACrB,yBAAyB;IACzB,0CAA0C;IAC1C,qCAAqC;IACrC,mCAAmC;IACnC,4CAA4C;IAC5C,kCAAkC;IAClC,0CAA0C;IAC1C,8CAA8C;IAC9C,qCAAqC;IACrC,2CAA2C;IAC3C,aAAa;IACb,mBAAmB;IACnB,qCAAqC;AACvC;AAEA,MAAM,SAAS;IACb,MAAM;QACJ,QAAQ;YACN,MAAM;gBACJ,MAAM;gBACN,UAAU;gBACV,OAAO;YACT;YACA,QAAQ;gBACN,MAAM;gBACN,cAAc;gBACd,UAAU;gBACV,OAAO;YACT;YACA,WAAW;gBACT,MAAM;gBACN,UAAU;gBACV,OAAO;YACT;YACA,YAAY;gBACV,MAAM;gBACN,UAAU;gBACV,OAAO;YACT;QACF;IACF;IACA,SAAS;QACP,QAAQ;YACN,gBAAgB;gBACd,MAAM;gBACN,UAAU;YACZ;QACF;IACF;AACF;AAEA,SAAS,WAAW,KAAK;IACvB,OAAO,MAAM,OAAO,CAAC,SAAS,MAAM,IAAI,CAAC,OAAO;AAClD;AACA,MAAM,QAAQ,CAAC;IACb,MAAM,OAAO;QACX,aAAa,SAAS,eAAe;QACrC,YAAY,SAAS,cAAc;YAAC;SAAQ;QAC5C,mBAAmB,SAAS,qBAAqB;QACjD,GAAG,OAAO;IACZ;IACA,MAAM,kBAAkB,CAAA,GAAA,yTAAA,CAAA,IAAoB,AAAD,EAAE,OAAO;QAClD,MAAM,UAAU,MAAM,CAAA,GAAA,yTAAA,CAAA,IAAiB,AAAD,EAAE;QACxC,IAAI,CAAC,SAAS;YACZ,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC;QACrB;QACA,OAAO;YACL;QACF;IACF;IACA,OAAO;QACL,IAAI;QACJ;YACE,OAAO;gBACL,SAAS;oBACP,eAAe;wBACb,MAAM;4BACJ,QAAQ;gCACN,MAAM,QAAO,IAAI;oCACf,OAAO;wCACL,MAAM;4CACJ,MAAM,SAAS,eAAe;4CAC9B,GAAG,IAAI;wCACT;oCACF;gCACF;4BACF;wBACF;wBACA,SAAS;4BACP,QAAQ;gCACN,MAAM,QAAO,OAAO,EAAE,GAAG;oCACvB,IAAI,CAAC,KAAK;wCACR;oCACF;oCACA,MAAM,OAAO,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,YAAY,CACzD,QAAQ,MAAM;oCAEhB,IAAI,KAAK,MAAM,EAAE;wCACf,IAAI,KAAK,UAAU,IAAI,IAAI,KAAK,KAAK,UAAU,EAAE,OAAO,KAAK,KAAK,GAAG,IAAI;4CACvE,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,UAAU,CAC1C,QAAQ,MAAM,EACd;gDACE,QAAQ;gDACR,WAAW;gDACX,YAAY;4CACd;4CAEF;wCACF;wCACA,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC,mBAAmB,GAAG;4CACxF,MAAM,cAAc,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;4CAC9F,MAAM,IAAI,QAAQ,CAChB,GAAG,YAAY,gCAAgC,EAAE,KAAK,iBAAiB,EAAE;wCAE7E;wCACA,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;4CAC9B,SAAS,KAAK,iBAAiB;4CAC/B,MAAM;wCACR;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF;QACF;QACA,OAAO;YACL,OAAO;gBACL;oBACE,SAAQ,OAAO;wBACb,OAAO,QAAQ,IAAI,KAAK;oBAC1B;oBACA,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAoB,AAAD,EAAE,OAAO;wBACnC,MAAM,WAAW,MAAM,CAAA,GAAA,yTAAA,CAAA,IAAmB,AAAD,EAAE;wBAC3C,IAAI,CAAC,UAAU;4BACb;wBACF;wBACA,MAAM,UAAU,SAAS,MAAM,CAAC,CAAC;4BAC/B,OAAO,CAAC,QAAQ,cAAc;wBAChC;wBACA,OAAO,IAAI,IAAI,CAAC;oBAClB;gBACF;aACD;QACH;QACA,WAAW;YACT;;;;;;;;;;;;;;OAcC,GACD,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EACxB,mBACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;oBACA,MAAM,kMAAA,CAAA,QAAO,CAAC;wBACZ,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;4BACd,aAAa;wBACf;wBACA,kMAAA,CAAA,QAAO,CACL,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;4BACd,aAAa;wBACf;qBAEH,EAAE,IAAI,CAAC;wBACN,aAAa;oBACf;gBACF;gBACA,gBAAgB;gBAChB,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,MAAM;oDACJ,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;oBACA,QAAQ;wBACN,MAAM,CAAC;oBACT;gBACF;YACF,GACA,OAAO;gBACL,MAAM,aAAa,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBAC/B,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;oBACnC,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAW;oBACpB;gBACF;gBACA,IAAI,CAAC,YAAY;oBACf,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,wCAAwC;oBACrE;gBACF;gBACA,MAAM,cAAc,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,UAAU,CAC9D,IAAI,IAAI,CAAC,MAAM,EACf;oBACE,MAAM,WAAW,IAAI,IAAI,CAAC,IAAI;gBAChC,GACA;gBAEF,OAAO,IAAI,IAAI,CAAC;oBACd,MAAM;gBACR;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,YAAY,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAC3B,sBACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,OAAO,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBACrB,aAAa;oBACf;oBACA,UAAU,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBACxB,aAAa;oBACf;oBACA,MAAM,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBACpB,aAAa;oBACf;oBACA,MAAM,kMAAA,CAAA,QAAO,CAAC;wBACZ,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;4BACd,aAAa;wBACf;wBACA,kMAAA,CAAA,QAAO,CACL,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;4BACd,aAAa;wBACf;qBAEH,EAAE,QAAQ,GAAG,IAAI,CAAC;wBACjB,aAAa,CAAC,wFAAwF,CAAC;oBACzG;oBACA;;aAEC,GACD,MAAM,kMAAA,CAAA,SAAQ,CAAC,kMAAA,CAAA,SAAQ,IAAI,kMAAA,CAAA,MAAK,IAAI,QAAQ,GAAG,IAAI,CAAC;wBAClD,aAAa;oBACf;gBACF;gBACA,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,MAAM;oDACJ,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;oBACA,QAAQ;wBACN,MAAM,CAAC;oBACT;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,MAAM,CAAA,GAAA,yTAAA,CAAA,IAAiB,AAAD,EAAE;gBACxC,IAAI,CAAC,WAAW,CAAC,IAAI,OAAO,IAAI,IAAI,OAAO,GAAG;oBAC5C,MAAM,IAAI,KAAK,CAAC;gBAClB;gBACA,IAAI,SAAS;oBACX,MAAM,gBAAgB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;wBAClC,QAAQ,QAAQ,IAAI,CAAC,EAAE;wBACvB,MAAM,QAAQ,IAAI,CAAC,IAAI;wBACvB,SAAS;wBACT,aAAa;4BACX,MAAM;gCAAC;6BAAS;wBAClB;oBACF;oBACA,IAAI,CAAC,eAAe;wBAClB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;4BAC9B,SAAS,kBAAkB,mCAAmC;wBAChE;oBACF;gBACF;gBACA,MAAM,YAAY,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,eAAe,CACjE,IAAI,IAAI,CAAC,KAAK;gBAEhB,IAAI,WAAW;oBACb,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;wBAChC,SAAS,kBAAkB,mBAAmB;oBAChD;gBACF;gBACA,MAAM,OAAO,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,UAAU,CACvD;oBACE,OAAO,IAAI,IAAI,CAAC,KAAK;oBACrB,MAAM,IAAI,IAAI,CAAC,IAAI;oBACnB,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,SAAS,eAAe;oBAC9E,GAAG,IAAI,IAAI,CAAC,IAAI;gBAClB,GACA;gBAEF,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,yBAAyB;wBAC1C,SAAS,kBAAkB,qBAAqB;oBAClD;gBACF;gBACA,MAAM,iBAAiB,MAAM,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CACpD,IAAI,IAAI,CAAC,QAAQ;gBAEnB,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,WAAW,CAC3C;oBACE,WAAW,KAAK,EAAE;oBAClB,YAAY;oBACZ,UAAU;oBACV,QAAQ,KAAK,EAAE;gBACjB,GACA;gBAEF,OAAO,IAAI,IAAI,CAAC;oBACd;gBACF;YACF;YAEF,iBAAiB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAChC,sBACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;oBACA,MAAM,kMAAA,CAAA,SAAQ,CAAC,kMAAA,CAAA,MAAK,IAAI,kMAAA,CAAA,MAAK,IAAI,IAAI,CAAC;wBACpC,aAAa;oBACf;gBACF;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,MAAM;oDACJ,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,gBAAgB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBAClC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;oBACnC,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAS;oBAClB;gBACF;gBACA,IAAI,CAAC,eAAe;oBAClB,MAAM,IAAI,KAAK,CAAC,aAAa;wBAC3B,SAAS,kBAAkB,mCAAmC;wBAC9D,MAAM;oBACR;gBACF;gBACA,IAAI,OAAO,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,KAAK,GAAG;oBAC3C,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;wBAChC,SAAS,kBAAkB,iBAAiB;oBAC9C;gBACF;gBACA,MAAM,cAAc,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,UAAU,CAC9D,IAAI,IAAI,CAAC,MAAM,EACf,IAAI,IAAI,CAAC,IAAI,EACb;gBAEF,OAAO,IAAI,IAAI,CAAC;YAClB;YAEF,WAAW,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAC1B,qBACA;gBACE,QAAQ;gBACR,KAAK;oBAAC;iBAAgB;gBACtB,OAAO,kMAAA,CAAA,SAAQ,CAAC;oBACd,aAAa,kMAAA,CAAA,SAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC;wBACtC,aAAa;oBACf;oBACA,aAAa,kMAAA,CAAA,OAAM,CAAC;wBAAC;wBAAS;qBAAO,EAAE,IAAI,CAAC;wBAC1C,aAAa;oBACf,GAAG,QAAQ;oBACX,gBAAgB,kMAAA,CAAA,OAAM,CAAC;wBAAC;wBAAY;wBAAe;qBAAY,EAAE,IAAI,CAAC;wBACpE,aAAa;oBACf,GAAG,QAAQ;oBACX,OAAO,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBACrB,aAAa;oBACf,GAAG,EAAE,CAAC,kMAAA,CAAA,SAAQ,IAAI,QAAQ;oBAC1B,QAAQ,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBACtB,aAAa;oBACf,GAAG,EAAE,CAAC,kMAAA,CAAA,SAAQ,IAAI,QAAQ;oBAC1B,QAAQ,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBACtB,aAAa;oBACf,GAAG,QAAQ;oBACX,eAAe,kMAAA,CAAA,OAAM,CAAC;wBAAC;wBAAO;qBAAO,EAAE,IAAI,CAAC;wBAC1C,aAAa;oBACf,GAAG,QAAQ;oBACX,aAAa,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBAC3B,aAAa;oBACf,GAAG,QAAQ;oBACX,aAAa,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBAC3B,aAAa;oBACf,GAAG,EAAE,CAAC,kMAAA,CAAA,SAAQ,IAAI,EAAE,CAAC,kMAAA,CAAA,UAAS,IAAI,QAAQ;oBAC1C,gBAAgB,kMAAA,CAAA,OAAM,CAAC;wBAAC;wBAAM;wBAAM;wBAAM;wBAAO;wBAAM;wBAAO;qBAAW,EAAE,IAAI,CAAC;wBAC9E,aAAa;oBACf,GAAG,QAAQ;gBACb;gBACA,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,OAAO;oDACL,MAAM;oDACN,OAAO;wDACL,MAAM;oDACR;gDACF;gDACA,OAAO;oDACL,MAAM;gDACR;gDACA,OAAO;oDACL,MAAM;gDACR;gDACA,QAAQ;oDACN,MAAM;gDACR;4CACF;4CACA,UAAU;gDAAC;gDAAS;6CAAQ;wCAC9B;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;gBACnC,MAAM,eAAe,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBACjC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI;oBACvB,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAO;oBAChB;gBACF;gBACA,IAAI,CAAC,cAAc;oBACjB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,iCAAiC;oBAC9D;gBACF;gBACA,MAAM,QAAQ,EAAE;gBAChB,IAAI,IAAI,KAAK,EAAE,aAAa;oBAC1B,MAAM,IAAI,CAAC;wBACT,OAAO,IAAI,KAAK,CAAC,WAAW,IAAI;wBAChC,UAAU,IAAI,KAAK,CAAC,cAAc,IAAI;wBACtC,OAAO,IAAI,KAAK,CAAC,WAAW;oBAC9B;gBACF;gBACA,IAAI,IAAI,KAAK,EAAE,aAAa;oBAC1B,MAAM,IAAI,CAAC;wBACT,OAAO,IAAI,KAAK,CAAC,WAAW,IAAI;wBAChC,UAAU,IAAI,KAAK,CAAC,cAAc,IAAI;wBACtC,OAAO,IAAI,KAAK,CAAC,WAAW;oBAC9B;gBACF;gBACA,IAAI;oBACF,MAAM,QAAQ,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,SAAS,CACvD,OAAO,IAAI,KAAK,EAAE,UAAU,KAAK,GACjC,OAAO,IAAI,KAAK,EAAE,WAAW,KAAK,GAClC,IAAI,KAAK,EAAE,SAAS;wBAClB,OAAO,IAAI,KAAK,CAAC,MAAM;wBACvB,WAAW,IAAI,KAAK,CAAC,aAAa,IAAI;oBACxC,IAAI,KAAK,GACT,MAAM,MAAM,GAAG,QAAQ,KAAK;oBAE9B,MAAM,QAAQ,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,eAAe,CAC7D,MAAM,MAAM,GAAG,QAAQ,KAAK;oBAE9B,OAAO,IAAI,IAAI,CAAC;wBACd;wBACA;wBACA,OAAO,OAAO,IAAI,KAAK,EAAE,UAAU,KAAK;wBACxC,QAAQ,OAAO,IAAI,KAAK,EAAE,WAAW,KAAK;oBAC5C;gBACF,EAAE,OAAO,GAAG;oBACV,OAAO,IAAI,IAAI,CAAC;wBACd,OAAO,EAAE;wBACT,OAAO;oBACT;gBACF;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,kBAAkB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EACjC,6BACA;gBACE,QAAQ;gBACR,KAAK;oBAAC;iBAAgB;gBACtB,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;gBACF;gBACA,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,UAAU;oDACR,MAAM;oDACN,OAAO;wDACL,MAAM;oDACR;gDACF;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;gBACnC,MAAM,kBAAkB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBACpC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI;oBACvB,SAAS;oBACT,aAAa;wBACX,SAAS;4BAAC;yBAAO;oBACnB;gBACF;gBACA,IAAI,CAAC,iBAAiB;oBACpB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,0CAA0C;oBACvE;gBACF;gBACA,MAAM,WAAW,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,YAAY,CAC7D,IAAI,IAAI,CAAC,MAAM;gBAEjB,OAAO;oBACL;gBACF;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,WAAW,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAC1B,qBACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;gBACF;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,MAAM;oDACJ,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;gBACnC,MAAM,aAAa,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBAC/B,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI;oBACvB,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAM;oBACf;gBACF;gBACA,IAAI,CAAC,YAAY;oBACf,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,gCAAgC;oBAC7D;gBACF;gBACA,MAAM,OAAO,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,UAAU,CACvD,IAAI,IAAI,CAAC,MAAM,EACf;oBACE,QAAQ;oBACR,YAAY;oBACZ,WAAW;oBACX,WAAW,aAAa,GAAG,IAAI;gBACjC;gBAEF,OAAO,IAAI,IAAI,CAAC;oBACd;gBACF;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EACxB,mBACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;oBACA;;aAEC,GACD,WAAW,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBACzB,aAAa;oBACf,GAAG,QAAQ;oBACX;;aAEC,GACD,cAAc,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBAC5B,aAAa;oBACf,GAAG,QAAQ;gBACb;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,MAAM;oDACJ,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;gBACnC,MAAM,aAAa,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBAC/B,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI;oBACvB,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAM;oBACf;gBACF;gBACA,IAAI,CAAC,YAAY;oBACf,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,gCAAgC;oBAC7D;gBACF;gBACA,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE;oBACnD,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;wBAChC,SAAS,kBAAkB,uBAAuB;oBACpD;gBACF;gBACA,MAAM,OAAO,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,UAAU,CACvD,IAAI,IAAI,CAAC,MAAM,EACf;oBACE,QAAQ;oBACR,WAAW,IAAI,IAAI,CAAC,SAAS,IAAI,SAAS,oBAAoB;oBAC9D,YAAY,IAAI,IAAI,CAAC,YAAY,GAAG,CAAA,GAAA,yTAAA,CAAA,IAAO,AAAD,EAAE,IAAI,IAAI,CAAC,YAAY,EAAE,SAAS,SAAS,sBAAsB,CAAA,GAAA,yTAAA,CAAA,IAAO,AAAD,EAAE,QAAQ,mBAAmB,EAAE,SAAS,KAAK;oBAC9J,WAAW,aAAa,GAAG,IAAI;gBACjC,GACA;gBAEF,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,MAAM;gBAChE,OAAO,IAAI,IAAI,CAAC;oBACd;gBACF;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,iBAAiB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAChC,2BACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;gBACF;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,SAAS;oDACP,MAAM;gDACR;gDACA,MAAM;oDACJ,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,qBAAqB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBACvC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;oBACnC,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAc;oBACvB;gBACF;gBACA,IAAI,CAAC,oBAAoB;oBACvB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,wCAAwC;oBACrE;gBACF;gBACA,MAAM,aAAa,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,YAAY,CAC/D,IAAI,IAAI,CAAC,MAAM;gBAEjB,IAAI,CAAC,YAAY;oBACf,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS;oBACX;gBACF;gBACA,MAAM,UAAU,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,aAAa,CAC7D,WAAW,EAAE,EACb,KACA,MACA;oBACE,gBAAgB,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC3C,WAAW,SAAS,+BAA+B,CAAA,GAAA,yTAAA,CAAA,IAAO,AAAD,EAAE,QAAQ,4BAA4B,EAAE,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAO,AAAD,EAAE,KAAK,IAAI;gBAE7H,GACA;gBAEF,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,yBAAyB;wBAC1C,SAAS,kBAAkB,qBAAqB;oBAClD;gBACF;gBACA,MAAM,cAAc,IAAI,OAAO,CAAC,WAAW;gBAC3C,CAAA,GAAA,qSAAA,CAAA,sBAAmB,AAAD,EAAE;gBACpB,MAAM,uBAAuB,MAAM,IAAI,eAAe,CACpD,IAAI,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,EAC9C,IAAI,OAAO,CAAC,MAAM;gBAEpB,MAAM,kBAAkB,IAAI,OAAO,CAAC,gBAAgB,CAAC;gBACrD,MAAM,IAAI,eAAe,CACvB,gBAAgB,IAAI,EACpB,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,wBAAwB,IAAI,EACpE,IAAI,OAAO,CAAC,MAAM,EAClB,YAAY,YAAY,CAAC,OAAO;gBAElC,MAAM,CAAA,GAAA,qSAAA,CAAA,mBAAgB,AAAD,EACnB,KACA;oBACE;oBACA,MAAM;gBACR,GACA;gBAEF,OAAO,IAAI,IAAI,CAAC;oBACd;oBACA,MAAM;gBACR;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,mBAAmB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAClC,6BACA;gBACE,QAAQ;gBACR,gBAAgB;YAClB,GACA,OAAO;gBACL,MAAM,UAAU,MAAM,CAAA,GAAA,yTAAA,CAAA,IAAiB,AAAD,EAAE;gBACxC,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC;gBACrB;gBACA,IAAI,CAAC,QAAQ,OAAO,CAAC,cAAc,EAAE;oBACnC,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;wBAChC,SAAS;oBACX;gBACF;gBACA,MAAM,OAAO,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,YAAY,CACzD,QAAQ,OAAO,CAAC,cAAc;gBAEhC,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,yBAAyB;wBAC1C,SAAS;oBACX;gBACF;gBACA,MAAM,kBAAkB,IAAI,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,IAAI;gBAC1E,MAAM,cAAc,MAAM,IAAI,eAAe,CAC3C,iBACA,IAAI,OAAO,CAAC,MAAM;gBAEpB,IAAI,CAAC,aAAa;oBAChB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,yBAAyB;wBAC1C,SAAS;oBACX;gBACF;gBACA,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,aAAa,MAAM;gBACrE,MAAM,eAAe,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC;gBACnE,IAAI,CAAC,gBAAgB,aAAa,OAAO,CAAC,MAAM,KAAK,KAAK,EAAE,EAAE;oBAC5D,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,yBAAyB;wBAC1C,SAAS;oBACX;gBACF;gBACA,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,aAAa,CAC7C,QAAQ,OAAO,CAAC,KAAK;gBAEvB,MAAM,CAAA,GAAA,qSAAA,CAAA,mBAAgB,AAAD,EAAE,KAAK,cAAc,CAAC,CAAC;gBAC5C,OAAO,IAAI,IAAI,CAAC;YAClB;YAEF;;;;;;;;;;;;;;OAcC,GACD,mBAAmB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAClC,8BACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,cAAc,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBAC5B,aAAa;oBACf;gBACF;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,SAAS;oDACP,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;gBACnC,MAAM,mBAAmB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBACrC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI;oBACvB,SAAS;oBACT,aAAa;wBACX,SAAS;4BAAC;yBAAS;oBACrB;gBACF;gBACA,IAAI,CAAC,kBAAkB;oBACrB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,4CAA4C;oBACzE;gBACF;gBACA,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,aAAa,CAC7C,IAAI,IAAI,CAAC,YAAY;gBAEvB,OAAO,IAAI,IAAI,CAAC;oBACd,SAAS;gBACX;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,oBAAoB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EACnC,+BACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;gBACF;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,SAAS;oDACP,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;gBACnC,MAAM,mBAAmB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBACrC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI;oBACvB,SAAS;oBACT,aAAa;wBACX,SAAS;4BAAC;yBAAS;oBACrB;gBACF;gBACA,IAAI,CAAC,kBAAkB;oBACrB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,4CAA4C;oBACzE;gBACF;gBACA,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,MAAM;gBAChE,OAAO,IAAI,IAAI,CAAC;oBACd,SAAS;gBACX;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,YAAY,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAC3B,sBACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;gBACF;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,SAAS;oDACP,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;gBACnC,MAAM,gBAAgB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBAClC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,QAAQ,IAAI,CAAC,IAAI;oBACvB,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAS;oBAClB;gBACF;gBACA,IAAI,CAAC,eAAe;oBAClB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,mCAAmC;oBAChE;gBACF;gBACA,MAAM,OAAO,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,YAAY,CACzD,IAAI,IAAI,CAAC,MAAM;gBAEjB,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS;oBACX;gBACF;gBACA,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,MAAM;gBAC5D,OAAO,IAAI,IAAI,CAAC;oBACd,SAAS;gBACX;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,iBAAiB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAChC,4BACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,aAAa,kMAAA,CAAA,SAAQ,GAAG,IAAI,CAAC;wBAC3B,aAAa;oBACf;oBACA,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;wBAC7B,aAAa;oBACf;gBACF;gBACA,KAAK;oBAAC;iBAAgB;gBACtB,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,SAAS;wBACT,aAAa;wBACb,WAAW;4BACT,KAAK;gCACH,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,QAAQ;oDACN,MAAM;gDACR;4CACF;wCACF;oCACF;gCACF;4BACF;wBACF;oBACF;gBACF;YACF,GACA,OAAO;gBACL,MAAM,qBAAqB,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBACvC,QAAQ,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACnC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI;oBACnC,SAAS;oBACT,aAAa;wBACX,MAAM;4BAAC;yBAAe;oBACxB;gBACF;gBACA,IAAI,CAAC,oBAAoB;oBACvB,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,aAAa;wBAC9B,SAAS,kBAAkB,yCAAyC;oBACtE;gBACF;gBACA,MAAM,iBAAiB,MAAM,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CACpD,IAAI,IAAI,CAAC,WAAW;gBAEtB,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,cAAc,CAC9C,IAAI,IAAI,CAAC,MAAM,EACf;gBAEF,OAAO,IAAI,IAAI,CAAC;oBACd,QAAQ;gBACV;YACF;YAEF;;;;;;;;;;;;;;OAcC,GACD,mBAAmB,CAAA,GAAA,yTAAA,CAAA,IAAkB,AAAD,EAClC,yBACA;gBACE,QAAQ;gBACR,MAAM,kMAAA,CAAA,SAAQ,CAAC;oBACb,QAAQ,mOAAA,CAAA,SAAQ,CAAC,MAAM,GAAG,QAAQ,GAAG,IAAI,CAAC;wBACxC,aAAa,CAAC,0BAA0B,CAAC;oBAC3C;oBACA,MAAM,kMAAA,CAAA,SAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC;wBAC/B,aAAa,CAAC,6CAA6C,CAAC;oBAC9D;gBACF,GAAG,GAAG,CACJ,kMAAA,CAAA,QAAO,CAAC;oBACN,kMAAA,CAAA,SAAQ,CAAC;wBACP,YAAY,kMAAA,CAAA,SAAQ,CAAC,kMAAA,CAAA,SAAQ,IAAI,kMAAA,CAAA,QAAO,CAAC,kMAAA,CAAA,SAAQ;wBACjD,aAAa,kMAAA,CAAA,YAAW;oBAC1B;oBACA,kMAAA,CAAA,SAAQ,CAAC;wBACP,YAAY,kMAAA,CAAA,YAAW;wBACvB,aAAa,kMAAA,CAAA,SAAQ,CAAC,kMAAA,CAAA,SAAQ,IAAI,kMAAA,CAAA,QAAO,CAAC,kMAAA,CAAA,SAAQ;oBACpD;iBACD;gBAEH,UAAU;oBACR,SAAS;wBACP,aAAa;wBACb,aAAa;4BACX,SAAS;gCACP,oBAAoB;oCAClB,QAAQ;wCACN,MAAM;wCACN,YAAY;4CACV,YAAY;gDACV,MAAM;gDACN,aAAa;gDACb,YAAY;4CACd;4CACA,aAAa;gDACX,MAAM;gDACN,aAAa;4CACf;wCACF;wCACA,UAAU;4CAAC;yCAAc;oCAC3B;gCACF;4BACF;wBACF;wBACA,WAAW;4BACT,OAAO;gCACL,aAAa;gCACb,SAAS;oCACP,oBAAoB;wCAClB,QAAQ;4CACN,MAAM;4CACN,YAAY;gDACV,OAAO;oDACL,MAAM;gDACR;gDACA,SAAS;oDACP,MAAM;gDACR;4CACF;4CACA,UAAU;gDAAC;6CAAU;wCACvB;oCACF;gCACF;4BACF;wBACF;oBACF;oBACA,QAAQ;wBACN,MAAM,CAAC;oBACT;gBACF;YACF,GACA,OAAO;gBACL,IAAI,CAAC,IAAI,IAAI,EAAE,cAAc,CAAC,IAAI,IAAI,EAAE,aAAa;oBACnD,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;wBAChC,SAAS;oBACX;gBACF;gBACA,MAAM,UAAU,MAAM,CAAA,GAAA,yTAAA,CAAA,IAAiB,AAAD,EAAE;gBACxC,IAAI,CAAC,WAAW,CAAC,IAAI,OAAO,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;oBAClF,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC;gBACrB;gBACA,MAAM,OAAO,SAAS,QAAQ,MAAM,IAAI,OAAO,CAAC,eAAe,CAAC,YAAY,CAC1E,IAAI,IAAI,CAAC,MAAM,KACZ,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG;oBAAE,IAAI;oBAAI,MAAM,IAAI,IAAI,CAAC,IAAI;gBAAC,IAAI,IAAI;gBAC5D,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,6MAAA,CAAA,WAAQ,CAAC,eAAe;wBAChC,SAAS;oBACX;gBACF;gBACA,MAAM,SAAS,CAAA,GAAA,yTAAA,CAAA,IAAa,AAAD,EAAE;oBAC3B,QAAQ,KAAK,EAAE;oBACf,MAAM,KAAK,IAAI;oBACf;oBACA,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,CAAC,UAAU;gBAC1D;gBACA,OAAO,IAAI,IAAI,CAAC;oBACd,OAAO;oBACP,SAAS;gBACX;YACF;QAEJ;QACA,cAAc;QACd,QAAQ,CAAA,GAAA,yTAAA,CAAA,IAAW,AAAD,EAAE,QAAQ,KAAK,MAAM;QACvC;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15350, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.CGrHn1Ih.mjs"],"sourcesContent":["import * as z from 'zod/v4';\n\nconst schema = {\n  jwks: {\n    fields: {\n      publicKey: {\n        type: \"string\",\n        required: true\n      },\n      privateKey: {\n        type: \"string\",\n        required: true\n      },\n      createdAt: {\n        type: \"date\",\n        required: true\n      }\n    }\n  }\n};\nz.object({\n  id: z.string(),\n  publicKey: z.string(),\n  privateKey: z.string(),\n  createdAt: z.date()\n});\n\nexport { schema as s };\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS;IACb,MAAM;QACJ,QAAQ;YACN,WAAW;gBACT,MAAM;gBACN,UAAU;YACZ;YACA,YAAY;gBACV,MAAM;gBACN,UAAU;YACZ;YACA,WAAW;gBACT,MAAM;gBACN,UAAU;YACZ;QACF;IACF;AACF;AACA,kMAAA,CAAA,SAAQ,CAAC;IACP,IAAI,kMAAA,CAAA,SAAQ;IACZ,WAAW,kMAAA,CAAA,SAAQ;IACnB,YAAY,kMAAA,CAAA,SAAQ;IACpB,WAAW,kMAAA,CAAA,OAAM;AACnB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15384, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.Bi_HZkIu.mjs"],"sourcesContent":["import * as z from 'zod/v4';\nimport { SignJWT } from 'jose';\nimport { APIError } from 'better-call';\nimport { k as getSessionFromCtx, j as createAuthEndpoint, i as createAuthMiddleware, l as sessionMiddleware } from './better-auth.z3dsxLxE.mjs';\nimport './better-auth.8zoxzg-F.mjs';\nimport { base64Url, base64 } from '@better-auth/utils/base64';\nimport '@better-auth/utils/hmac';\nimport '@better-auth/utils/binary';\nimport { parseSetCookieHeader } from '../cookies/index.mjs';\nimport './better-auth.n2KFGwjY.mjs';\nimport './better-auth.DBGfIDnh.mjs';\nimport 'defu';\nimport { symmetricEncrypt, symmetricDecrypt } from '../crypto/index.mjs';\nimport { createHash } from '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport { g as generateRandomString } from './better-auth.B4Qoxdgc.mjs';\nimport { getJwtToken } from '../plugins/jwt/index.mjs';\n\nconst schema = {\n  oauthApplication: {\n    modelName: \"oauthApplication\",\n    fields: {\n      name: {\n        type: \"string\"\n      },\n      icon: {\n        type: \"string\",\n        required: false\n      },\n      metadata: {\n        type: \"string\",\n        required: false\n      },\n      clientId: {\n        type: \"string\",\n        unique: true\n      },\n      clientSecret: {\n        type: \"string\",\n        required: false\n      },\n      redirectURLs: {\n        type: \"string\"\n      },\n      type: {\n        type: \"string\"\n      },\n      disabled: {\n        type: \"boolean\",\n        required: false,\n        defaultValue: false\n      },\n      userId: {\n        type: \"string\",\n        required: false\n      },\n      createdAt: {\n        type: \"date\"\n      },\n      updatedAt: {\n        type: \"date\"\n      }\n    }\n  },\n  oauthAccessToken: {\n    modelName: \"oauthAccessToken\",\n    fields: {\n      accessToken: {\n        type: \"string\",\n        unique: true\n      },\n      refreshToken: {\n        type: \"string\",\n        unique: true\n      },\n      accessTokenExpiresAt: {\n        type: \"date\"\n      },\n      refreshTokenExpiresAt: {\n        type: \"date\"\n      },\n      clientId: {\n        type: \"string\"\n      },\n      userId: {\n        type: \"string\",\n        required: false\n      },\n      scopes: {\n        type: \"string\"\n      },\n      createdAt: {\n        type: \"date\"\n      },\n      updatedAt: {\n        type: \"date\"\n      }\n    }\n  },\n  oauthConsent: {\n    modelName: \"oauthConsent\",\n    fields: {\n      clientId: {\n        type: \"string\"\n      },\n      userId: {\n        type: \"string\"\n      },\n      scopes: {\n        type: \"string\"\n      },\n      createdAt: {\n        type: \"date\"\n      },\n      updatedAt: {\n        type: \"date\"\n      },\n      consentGiven: {\n        type: \"boolean\"\n      }\n    }\n  }\n};\n\nfunction formatErrorURL(url, error, description) {\n  return `${url.includes(\"?\") ? \"&\" : \"?\"}error=${error}&error_description=${description}`;\n}\nfunction getErrorURL(ctx, error, description) {\n  const baseURL = ctx.context.options.onAPIError?.errorURL || `${ctx.context.baseURL}/error`;\n  const formattedURL = formatErrorURL(baseURL, error, description);\n  return formattedURL;\n}\nasync function authorize(ctx, options) {\n  const handleRedirect = (url) => {\n    const fromFetch = ctx.request?.headers.get(\"sec-fetch-mode\") === \"cors\";\n    if (fromFetch) {\n      return ctx.json({\n        redirect: true,\n        url\n      });\n    } else {\n      throw ctx.redirect(url);\n    }\n  };\n  const opts = {\n    codeExpiresIn: 600,\n    defaultScope: \"openid\",\n    ...options,\n    scopes: [\n      \"openid\",\n      \"profile\",\n      \"email\",\n      \"offline_access\",\n      ...options?.scopes || []\n    ]\n  };\n  if (!ctx.request) {\n    throw new APIError(\"UNAUTHORIZED\", {\n      error_description: \"request not found\",\n      error: \"invalid_request\"\n    });\n  }\n  const session = await getSessionFromCtx(ctx);\n  if (!session) {\n    await ctx.setSignedCookie(\n      \"oidc_login_prompt\",\n      JSON.stringify(ctx.query),\n      ctx.context.secret,\n      {\n        maxAge: 600,\n        path: \"/\",\n        sameSite: \"lax\"\n      }\n    );\n    const queryFromURL = ctx.request.url?.split(\"?\")[1];\n    return handleRedirect(`${options.loginPage}?${queryFromURL}`);\n  }\n  const query = ctx.query;\n  if (!query.client_id) {\n    const errorURL = getErrorURL(\n      ctx,\n      \"invalid_client\",\n      \"client_id is required\"\n    );\n    throw ctx.redirect(errorURL);\n  }\n  if (!query.response_type) {\n    getErrorURL(\n      ctx,\n      \"invalid_request\",\n      \"response_type is required\"\n    );\n    throw ctx.redirect(\n      getErrorURL(ctx, \"invalid_request\", \"response_type is required\")\n    );\n  }\n  const client = await getClient(\n    ctx.query.client_id,\n    ctx.context.adapter,\n    options.trustedClients || []\n  );\n  if (!client) {\n    const errorURL = getErrorURL(\n      ctx,\n      \"invalid_client\",\n      \"client_id is required\"\n    );\n    throw ctx.redirect(errorURL);\n  }\n  const redirectURI = client.redirectURLs.find(\n    (url) => url === ctx.query.redirect_uri\n  );\n  if (!redirectURI || !query.redirect_uri) {\n    throw new APIError(\"BAD_REQUEST\", {\n      message: \"Invalid redirect URI\"\n    });\n  }\n  if (client.disabled) {\n    const errorURL = getErrorURL(ctx, \"client_disabled\", \"client is disabled\");\n    throw ctx.redirect(errorURL);\n  }\n  if (query.response_type !== \"code\") {\n    const errorURL = getErrorURL(\n      ctx,\n      \"unsupported_response_type\",\n      \"unsupported response type\"\n    );\n    throw ctx.redirect(errorURL);\n  }\n  const requestScope = query.scope?.split(\" \").filter((s) => s) || opts.defaultScope.split(\" \");\n  const invalidScopes = requestScope.filter((scope) => {\n    return !opts.scopes.includes(scope);\n  });\n  if (invalidScopes.length) {\n    return handleRedirect(\n      formatErrorURL(\n        query.redirect_uri,\n        \"invalid_scope\",\n        `The following scopes are invalid: ${invalidScopes.join(\", \")}`\n      )\n    );\n  }\n  if ((!query.code_challenge || !query.code_challenge_method) && options.requirePKCE) {\n    return handleRedirect(\n      formatErrorURL(query.redirect_uri, \"invalid_request\", \"pkce is required\")\n    );\n  }\n  if (!query.code_challenge_method) {\n    query.code_challenge_method = \"plain\";\n  }\n  if (![\n    \"s256\",\n    options.allowPlainCodeChallengeMethod ? \"plain\" : \"s256\"\n  ].includes(query.code_challenge_method?.toLowerCase() || \"\")) {\n    return handleRedirect(\n      formatErrorURL(\n        query.redirect_uri,\n        \"invalid_request\",\n        \"invalid code_challenge method\"\n      )\n    );\n  }\n  const code = generateRandomString(32, \"a-z\", \"A-Z\", \"0-9\");\n  const codeExpiresInMs = opts.codeExpiresIn * 1e3;\n  const expiresAt = new Date(Date.now() + codeExpiresInMs);\n  try {\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: JSON.stringify({\n          clientId: client.clientId,\n          redirectURI: query.redirect_uri,\n          scope: requestScope,\n          userId: session.user.id,\n          authTime: session.session.createdAt.getTime(),\n          /**\n           * If the prompt is set to `consent`, then we need\n           * to require the user to consent to the scopes.\n           *\n           * This means the code now needs to be treated as a\n           * consent request.\n           *\n           * once the user consents, the code will be updated\n           * with the actual code. This is to prevent the\n           * client from using the code before the user\n           * consents.\n           */\n          requireConsent: query.prompt === \"consent\",\n          state: query.prompt === \"consent\" ? query.state : null,\n          codeChallenge: query.code_challenge,\n          codeChallengeMethod: query.code_challenge_method,\n          nonce: query.nonce\n        }),\n        identifier: code,\n        expiresAt\n      },\n      ctx\n    );\n  } catch (e) {\n    return handleRedirect(\n      formatErrorURL(\n        query.redirect_uri,\n        \"server_error\",\n        \"An error occurred while processing the request\"\n      )\n    );\n  }\n  const redirectURIWithCode = new URL(redirectURI);\n  redirectURIWithCode.searchParams.set(\"code\", code);\n  redirectURIWithCode.searchParams.set(\"state\", ctx.query.state);\n  if (query.prompt !== \"consent\") {\n    return handleRedirect(redirectURIWithCode.toString());\n  }\n  if (client.skipConsent) {\n    return handleRedirect(redirectURIWithCode.toString());\n  }\n  const hasAlreadyConsented = await ctx.context.adapter.findOne({\n    model: \"oauthConsent\",\n    where: [\n      {\n        field: \"clientId\",\n        value: client.clientId\n      },\n      {\n        field: \"userId\",\n        value: session.user.id\n      }\n    ]\n  }).then((res) => !!res?.consentGiven);\n  if (hasAlreadyConsented) {\n    return handleRedirect(redirectURIWithCode.toString());\n  }\n  if (options?.consentPage) {\n    await ctx.setSignedCookie(\"oidc_consent_prompt\", code, ctx.context.secret, {\n      maxAge: 600,\n      path: \"/\",\n      sameSite: \"lax\"\n    });\n    const consentURI = `${options.consentPage}?client_id=${client.clientId}&scope=${requestScope.join(\" \")}`;\n    return handleRedirect(consentURI);\n  }\n  const htmlFn = options?.getConsentHTML;\n  if (!htmlFn) {\n    throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"No consent page provided\"\n    });\n  }\n  return new Response(\n    htmlFn({\n      scopes: requestScope,\n      clientMetadata: client.metadata,\n      clientIcon: client?.icon,\n      clientId: client.clientId,\n      clientName: client.name,\n      code\n    }),\n    {\n      headers: {\n        \"content-type\": \"text/html\"\n      }\n    }\n  );\n}\n\nconst defaultClientSecretHasher = async (clientSecret) => {\n  const hash = await createHash(\"SHA-256\").digest(\n    new TextEncoder().encode(clientSecret)\n  );\n  const hashed = base64Url.encode(new Uint8Array(hash), {\n    padding: false\n  });\n  return hashed;\n};\n\nconst getJwtPlugin = (ctx) => {\n  return ctx.context.options.plugins?.find(\n    (plugin) => plugin.id === \"jwt\"\n  );\n};\nasync function getClient(clientId, adapter, trustedClients = []) {\n  const trustedClient = trustedClients.find(\n    (client) => client.clientId === clientId\n  );\n  if (trustedClient) {\n    return trustedClient;\n  }\n  const dbClient = await adapter.findOne({\n    model: \"oauthApplication\",\n    where: [{ field: \"clientId\", value: clientId }]\n  }).then((res) => {\n    if (!res) {\n      return null;\n    }\n    return {\n      ...res,\n      redirectURLs: (res.redirectURLs ?? \"\").split(\",\"),\n      metadata: res.metadata ? JSON.parse(res.metadata) : {}\n    };\n  });\n  return dbClient;\n}\nconst getMetadata = (ctx, options) => {\n  const jwtPlugin = getJwtPlugin(ctx);\n  const issuer = jwtPlugin && jwtPlugin.options?.jwt && jwtPlugin.options.jwt.issuer ? jwtPlugin.options.jwt.issuer : ctx.context.options.baseURL;\n  const baseURL = ctx.context.baseURL;\n  const supportedAlgs = options?.useJWTPlugin ? [\"RS256\", \"EdDSA\", \"none\"] : [\"HS256\", \"none\"];\n  return {\n    issuer,\n    authorization_endpoint: `${baseURL}/oauth2/authorize`,\n    token_endpoint: `${baseURL}/oauth2/token`,\n    userinfo_endpoint: `${baseURL}/oauth2/userinfo`,\n    jwks_uri: `${baseURL}/jwks`,\n    registration_endpoint: `${baseURL}/oauth2/register`,\n    scopes_supported: [\"openid\", \"profile\", \"email\", \"offline_access\"],\n    response_types_supported: [\"code\"],\n    response_modes_supported: [\"query\"],\n    grant_types_supported: [\"authorization_code\", \"refresh_token\"],\n    acr_values_supported: [\n      \"urn:mace:incommon:iap:silver\",\n      \"urn:mace:incommon:iap:bronze\"\n    ],\n    subject_types_supported: [\"public\"],\n    id_token_signing_alg_values_supported: supportedAlgs,\n    token_endpoint_auth_methods_supported: [\n      \"client_secret_basic\",\n      \"client_secret_post\",\n      \"none\"\n    ],\n    code_challenge_methods_supported: [\"S256\"],\n    claims_supported: [\n      \"sub\",\n      \"iss\",\n      \"aud\",\n      \"exp\",\n      \"nbf\",\n      \"iat\",\n      \"jti\",\n      \"email\",\n      \"email_verified\",\n      \"name\"\n    ],\n    ...options?.metadata\n  };\n};\nconst oidcProvider = (options) => {\n  const modelName = {\n    oauthClient: \"oauthApplication\",\n    oauthAccessToken: \"oauthAccessToken\",\n    oauthConsent: \"oauthConsent\"\n  };\n  const opts = {\n    codeExpiresIn: 600,\n    defaultScope: \"openid\",\n    accessTokenExpiresIn: 3600,\n    refreshTokenExpiresIn: 604800,\n    allowPlainCodeChallengeMethod: true,\n    storeClientSecret: \"plain\",\n    ...options,\n    scopes: [\n      \"openid\",\n      \"profile\",\n      \"email\",\n      \"offline_access\",\n      ...options?.scopes || []\n    ]\n  };\n  const trustedClients = options.trustedClients || [];\n  async function storeClientSecret(ctx, clientSecret) {\n    if (opts.storeClientSecret === \"encrypted\") {\n      return await symmetricEncrypt({\n        key: ctx.context.secret,\n        data: clientSecret\n      });\n    }\n    if (opts.storeClientSecret === \"hashed\") {\n      return await defaultClientSecretHasher(clientSecret);\n    }\n    if (typeof opts.storeClientSecret === \"object\" && \"hash\" in opts.storeClientSecret) {\n      return await opts.storeClientSecret.hash(clientSecret);\n    }\n    if (typeof opts.storeClientSecret === \"object\" && \"encrypt\" in opts.storeClientSecret) {\n      return await opts.storeClientSecret.encrypt(clientSecret);\n    }\n    return clientSecret;\n  }\n  async function verifyStoredClientSecret(ctx, storedClientSecret, clientSecret) {\n    if (opts.storeClientSecret === \"encrypted\") {\n      return await symmetricDecrypt({\n        key: ctx.context.secret,\n        data: storedClientSecret\n      }) === clientSecret;\n    }\n    if (opts.storeClientSecret === \"hashed\") {\n      const hashedClientSecret = await defaultClientSecretHasher(clientSecret);\n      return hashedClientSecret === storedClientSecret;\n    }\n    if (typeof opts.storeClientSecret === \"object\" && \"hash\" in opts.storeClientSecret) {\n      const hashedClientSecret = await opts.storeClientSecret.hash(clientSecret);\n      return hashedClientSecret === storedClientSecret;\n    }\n    if (typeof opts.storeClientSecret === \"object\" && \"decrypt\" in opts.storeClientSecret) {\n      const decryptedClientSecret = await opts.storeClientSecret.decrypt(storedClientSecret);\n      return decryptedClientSecret === clientSecret;\n    }\n    return clientSecret === storedClientSecret;\n  }\n  return {\n    id: \"oidc\",\n    hooks: {\n      after: [\n        {\n          matcher() {\n            return true;\n          },\n          handler: createAuthMiddleware(async (ctx) => {\n            const cookie = await ctx.getSignedCookie(\n              \"oidc_login_prompt\",\n              ctx.context.secret\n            );\n            const cookieName = ctx.context.authCookies.sessionToken.name;\n            const parsedSetCookieHeader = parseSetCookieHeader(\n              ctx.context.responseHeaders?.get(\"set-cookie\") || \"\"\n            );\n            const hasSessionToken = parsedSetCookieHeader.has(cookieName);\n            if (!cookie || !hasSessionToken) {\n              return;\n            }\n            ctx.setCookie(\"oidc_login_prompt\", \"\", {\n              maxAge: 0\n            });\n            const sessionCookie = parsedSetCookieHeader.get(cookieName)?.value;\n            const sessionToken = sessionCookie?.split(\".\")[0];\n            if (!sessionToken) {\n              return;\n            }\n            const session = await ctx.context.internalAdapter.findSession(sessionToken);\n            if (!session) {\n              return;\n            }\n            ctx.query = JSON.parse(cookie);\n            ctx.query.prompt = \"consent\";\n            ctx.context.session = session;\n            const response = await authorize(ctx, opts);\n            return response;\n          })\n        }\n      ]\n    },\n    endpoints: {\n      getOpenIdConfig: createAuthEndpoint(\n        \"/.well-known/openid-configuration\",\n        {\n          method: \"GET\",\n          metadata: {\n            isAction: false\n          }\n        },\n        async (ctx) => {\n          const metadata = getMetadata(ctx, options);\n          return ctx.json(metadata);\n        }\n      ),\n      oAuth2authorize: createAuthEndpoint(\n        \"/oauth2/authorize\",\n        {\n          method: \"GET\",\n          query: z.record(z.string(), z.any()),\n          metadata: {\n            openapi: {\n              description: \"Authorize an OAuth2 request\",\n              responses: {\n                \"200\": {\n                  description: \"Authorization response generated successfully\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        additionalProperties: true,\n                        description: \"Authorization response, contents depend on the authorize function implementation\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          return authorize(ctx, opts);\n        }\n      ),\n      oAuthConsent: createAuthEndpoint(\n        \"/oauth2/consent\",\n        {\n          method: \"POST\",\n          body: z.object({\n            accept: z.boolean()\n          }),\n          use: [sessionMiddleware],\n          metadata: {\n            openapi: {\n              description: \"Handle OAuth2 consent\",\n              responses: {\n                \"200\": {\n                  description: \"Consent processed successfully\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          redirectURI: {\n                            type: \"string\",\n                            format: \"uri\",\n                            description: \"The URI to redirect to, either with an authorization code or an error\"\n                          }\n                        },\n                        required: [\"redirectURI\"]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const storedCode = await ctx.getSignedCookie(\n            \"oidc_consent_prompt\",\n            ctx.context.secret\n          );\n          if (!storedCode) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"No consent prompt found\",\n              error: \"invalid_request\"\n            });\n          }\n          const verification = await ctx.context.internalAdapter.findVerificationValue(storedCode);\n          if (!verification) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"Invalid code\",\n              error: \"invalid_request\"\n            });\n          }\n          if (verification.expiresAt < /* @__PURE__ */ new Date()) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"Code expired\",\n              error: \"invalid_request\"\n            });\n          }\n          const value = JSON.parse(verification.value);\n          if (!value.requireConsent) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"Consent not required\",\n              error: \"invalid_request\"\n            });\n          }\n          if (!ctx.body.accept) {\n            await ctx.context.internalAdapter.deleteVerificationValue(\n              verification.id\n            );\n            return ctx.json({\n              redirectURI: `${value.redirectURI}?error=access_denied&error_description=User denied access`\n            });\n          }\n          const code = generateRandomString(32, \"a-z\", \"A-Z\", \"0-9\");\n          const codeExpiresInMs = opts.codeExpiresIn * 1e3;\n          const expiresAt = new Date(Date.now() + codeExpiresInMs);\n          await ctx.context.internalAdapter.updateVerificationValue(\n            verification.id,\n            {\n              value: JSON.stringify({\n                ...value,\n                requireConsent: false\n              }),\n              identifier: code,\n              expiresAt\n            }\n          );\n          await ctx.context.adapter.create({\n            model: modelName.oauthConsent,\n            data: {\n              clientId: value.clientId,\n              userId: value.userId,\n              scopes: value.scope.join(\" \"),\n              consentGiven: true,\n              createdAt: /* @__PURE__ */ new Date(),\n              updatedAt: /* @__PURE__ */ new Date()\n            }\n          });\n          const redirectURI = new URL(value.redirectURI);\n          redirectURI.searchParams.set(\"code\", code);\n          if (value.state) redirectURI.searchParams.set(\"state\", value.state);\n          return ctx.json({\n            redirectURI: redirectURI.toString()\n          });\n        }\n      ),\n      oAuth2token: createAuthEndpoint(\n        \"/oauth2/token\",\n        {\n          method: \"POST\",\n          body: z.record(z.any(), z.any()),\n          metadata: {\n            isAction: false\n          }\n        },\n        async (ctx) => {\n          let { body } = ctx;\n          if (!body) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"request body not found\",\n              error: \"invalid_request\"\n            });\n          }\n          if (body instanceof FormData) {\n            body = Object.fromEntries(body.entries());\n          }\n          if (!(body instanceof Object)) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"request body is not an object\",\n              error: \"invalid_request\"\n            });\n          }\n          let { client_id, client_secret } = body;\n          const authorization = ctx.request?.headers.get(\"authorization\") || null;\n          if (authorization && !client_id && !client_secret && authorization.startsWith(\"Basic \")) {\n            try {\n              const encoded = authorization.replace(\"Basic \", \"\");\n              const decoded = new TextDecoder().decode(base64.decode(encoded));\n              if (!decoded.includes(\":\")) {\n                throw new APIError(\"UNAUTHORIZED\", {\n                  error_description: \"invalid authorization header format\",\n                  error: \"invalid_client\"\n                });\n              }\n              const [id, secret] = decoded.split(\":\");\n              if (!id || !secret) {\n                throw new APIError(\"UNAUTHORIZED\", {\n                  error_description: \"invalid authorization header format\",\n                  error: \"invalid_client\"\n                });\n              }\n              client_id = id;\n              client_secret = secret;\n            } catch (error) {\n              throw new APIError(\"UNAUTHORIZED\", {\n                error_description: \"invalid authorization header format\",\n                error: \"invalid_client\"\n              });\n            }\n          }\n          const {\n            grant_type,\n            code,\n            redirect_uri,\n            refresh_token,\n            code_verifier\n          } = body;\n          if (grant_type === \"refresh_token\") {\n            if (!refresh_token) {\n              throw new APIError(\"BAD_REQUEST\", {\n                error_description: \"refresh_token is required\",\n                error: \"invalid_request\"\n              });\n            }\n            const token = await ctx.context.adapter.findOne({\n              model: modelName.oauthAccessToken,\n              where: [\n                {\n                  field: \"refreshToken\",\n                  value: refresh_token.toString()\n                }\n              ]\n            });\n            if (!token) {\n              throw new APIError(\"UNAUTHORIZED\", {\n                error_description: \"invalid refresh token\",\n                error: \"invalid_grant\"\n              });\n            }\n            if (token.clientId !== client_id?.toString()) {\n              throw new APIError(\"UNAUTHORIZED\", {\n                error_description: \"invalid client_id\",\n                error: \"invalid_client\"\n              });\n            }\n            if (token.refreshTokenExpiresAt < /* @__PURE__ */ new Date()) {\n              throw new APIError(\"UNAUTHORIZED\", {\n                error_description: \"refresh token expired\",\n                error: \"invalid_grant\"\n              });\n            }\n            const accessToken2 = generateRandomString(32, \"a-z\", \"A-Z\");\n            const newRefreshToken = generateRandomString(32, \"a-z\", \"A-Z\");\n            const accessTokenExpiresAt2 = new Date(\n              Date.now() + opts.accessTokenExpiresIn * 1e3\n            );\n            const refreshTokenExpiresAt2 = new Date(\n              Date.now() + opts.refreshTokenExpiresIn * 1e3\n            );\n            await ctx.context.adapter.create({\n              model: modelName.oauthAccessToken,\n              data: {\n                accessToken: accessToken2,\n                refreshToken: newRefreshToken,\n                accessTokenExpiresAt: accessTokenExpiresAt2,\n                refreshTokenExpiresAt: refreshTokenExpiresAt2,\n                clientId: client_id.toString(),\n                userId: token.userId,\n                scopes: token.scopes,\n                createdAt: /* @__PURE__ */ new Date(),\n                updatedAt: /* @__PURE__ */ new Date()\n              }\n            });\n            return ctx.json({\n              access_token: accessToken2,\n              token_type: \"bearer\",\n              expires_in: opts.accessTokenExpiresIn,\n              refresh_token: newRefreshToken,\n              scope: token.scopes\n            });\n          }\n          if (!code) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"code is required\",\n              error: \"invalid_request\"\n            });\n          }\n          if (options.requirePKCE && !code_verifier) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"code verifier is missing\",\n              error: \"invalid_request\"\n            });\n          }\n          const verificationValue = await ctx.context.internalAdapter.findVerificationValue(\n            code.toString()\n          );\n          if (!verificationValue) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"invalid code\",\n              error: \"invalid_grant\"\n            });\n          }\n          if (verificationValue.expiresAt < /* @__PURE__ */ new Date()) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"code expired\",\n              error: \"invalid_grant\"\n            });\n          }\n          await ctx.context.internalAdapter.deleteVerificationValue(\n            verificationValue.id\n          );\n          if (!client_id) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"client_id is required\",\n              error: \"invalid_client\"\n            });\n          }\n          if (!grant_type) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"grant_type is required\",\n              error: \"invalid_request\"\n            });\n          }\n          if (grant_type !== \"authorization_code\") {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"grant_type must be 'authorization_code'\",\n              error: \"unsupported_grant_type\"\n            });\n          }\n          if (!redirect_uri) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"redirect_uri is required\",\n              error: \"invalid_request\"\n            });\n          }\n          const client = await getClient(\n            client_id.toString(),\n            ctx.context.adapter,\n            trustedClients\n          );\n          if (!client) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"invalid client_id\",\n              error: \"invalid_client\"\n            });\n          }\n          if (client.disabled) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"client is disabled\",\n              error: \"invalid_client\"\n            });\n          }\n          const value = JSON.parse(\n            verificationValue.value\n          );\n          if (value.clientId !== client_id.toString()) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"invalid client_id\",\n              error: \"invalid_client\"\n            });\n          }\n          if (value.redirectURI !== redirect_uri.toString()) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"invalid redirect_uri\",\n              error: \"invalid_client\"\n            });\n          }\n          if (value.codeChallenge && !code_verifier) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error_description: \"code verifier is missing\",\n              error: \"invalid_request\"\n            });\n          }\n          if (client.type === \"public\") {\n            if (!code_verifier) {\n              throw new APIError(\"BAD_REQUEST\", {\n                error_description: \"code verifier is required for public clients\",\n                error: \"invalid_request\"\n              });\n            }\n          } else {\n            if (!client.clientSecret || !client_secret) {\n              throw new APIError(\"UNAUTHORIZED\", {\n                error_description: \"client_secret is required for confidential clients\",\n                error: \"invalid_client\"\n              });\n            }\n            const isValidSecret = await verifyStoredClientSecret(\n              ctx,\n              client.clientSecret,\n              client_secret.toString()\n            );\n            if (!isValidSecret) {\n              throw new APIError(\"UNAUTHORIZED\", {\n                error_description: \"invalid client_secret\",\n                error: \"invalid_client\"\n              });\n            }\n          }\n          const challenge = value.codeChallengeMethod === \"plain\" ? code_verifier : await createHash(\"SHA-256\", \"base64urlnopad\").digest(\n            code_verifier\n          );\n          if (challenge !== value.codeChallenge) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"code verification failed\",\n              error: \"invalid_request\"\n            });\n          }\n          const requestedScopes = value.scope;\n          await ctx.context.internalAdapter.deleteVerificationValue(\n            verificationValue.id\n          );\n          const accessToken = generateRandomString(32, \"a-z\", \"A-Z\");\n          const refreshToken = generateRandomString(32, \"A-Z\", \"a-z\");\n          const accessTokenExpiresAt = new Date(\n            Date.now() + opts.accessTokenExpiresIn * 1e3\n          );\n          const refreshTokenExpiresAt = new Date(\n            Date.now() + opts.refreshTokenExpiresIn * 1e3\n          );\n          await ctx.context.adapter.create({\n            model: modelName.oauthAccessToken,\n            data: {\n              accessToken,\n              refreshToken,\n              accessTokenExpiresAt,\n              refreshTokenExpiresAt,\n              clientId: client_id.toString(),\n              userId: value.userId,\n              scopes: requestedScopes.join(\" \"),\n              createdAt: /* @__PURE__ */ new Date(),\n              updatedAt: /* @__PURE__ */ new Date()\n            }\n          });\n          const user = await ctx.context.internalAdapter.findUserById(\n            value.userId\n          );\n          if (!user) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"user not found\",\n              error: \"invalid_grant\"\n            });\n          }\n          const profile = {\n            given_name: user.name.split(\" \")[0],\n            family_name: user.name.split(\" \")[1],\n            name: user.name,\n            profile: user.image,\n            updated_at: user.updatedAt.toISOString()\n          };\n          const email = {\n            email: user.email,\n            email_verified: user.emailVerified\n          };\n          const userClaims = {\n            ...requestedScopes.includes(\"profile\") ? profile : {},\n            ...requestedScopes.includes(\"email\") ? email : {}\n          };\n          const additionalUserClaims = options.getAdditionalUserInfoClaim ? await options.getAdditionalUserInfoClaim(user, requestedScopes) : {};\n          const payload = {\n            sub: user.id,\n            aud: client_id.toString(),\n            iat: Date.now(),\n            auth_time: ctx.context.session?.session.createdAt.getTime(),\n            nonce: value.nonce,\n            acr: \"urn:mace:incommon:iap:silver\",\n            // default to silver - ⚠︎ this should be configurable and should be validated against the client's metadata\n            ...userClaims,\n            ...additionalUserClaims\n          };\n          const expirationTime = Math.floor(Date.now() / 1e3) + opts.accessTokenExpiresIn;\n          let idToken;\n          if (options.useJWTPlugin) {\n            const jwtPlugin = getJwtPlugin(ctx);\n            if (!jwtPlugin) {\n              ctx.context.logger.error(\n                \"OIDC: `useJWTPlugin` is enabled but the JWT plugin is not available. Make sure you have the JWT Plugin in your plugins array or set `useJWTPlugin` to false.\"\n              );\n              throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n                error_description: \"JWT plugin is not enabled\",\n                error: \"internal_server_error\"\n              });\n            }\n            idToken = await getJwtToken(\n              {\n                ...ctx,\n                context: {\n                  ...ctx.context,\n                  session: {\n                    session: {\n                      id: generateRandomString(32, \"a-z\", \"A-Z\"),\n                      createdAt: /* @__PURE__ */ new Date(),\n                      updatedAt: /* @__PURE__ */ new Date(),\n                      userId: user.id,\n                      expiresAt: new Date(\n                        Date.now() + opts.accessTokenExpiresIn * 1e3\n                      ),\n                      token: accessToken,\n                      ipAddress: ctx.request?.headers.get(\"x-forwarded-for\")\n                    },\n                    user\n                  }\n                }\n              },\n              {\n                ...jwtPlugin.options,\n                jwt: {\n                  ...jwtPlugin.options?.jwt,\n                  getSubject: () => user.id,\n                  audience: client_id.toString(),\n                  issuer: ctx.context.options.baseURL,\n                  expirationTime,\n                  definePayload: () => payload\n                }\n              }\n            );\n          } else {\n            idToken = await new SignJWT(payload).setProtectedHeader({ alg: \"HS256\" }).setIssuedAt().setExpirationTime(expirationTime).sign(new TextEncoder().encode(client.clientSecret));\n          }\n          return ctx.json(\n            {\n              access_token: accessToken,\n              token_type: \"Bearer\",\n              expires_in: opts.accessTokenExpiresIn,\n              refresh_token: requestedScopes.includes(\"offline_access\") ? refreshToken : void 0,\n              scope: requestedScopes.join(\" \"),\n              id_token: requestedScopes.includes(\"openid\") ? idToken : void 0\n            },\n            {\n              headers: {\n                \"Cache-Control\": \"no-store\",\n                Pragma: \"no-cache\"\n              }\n            }\n          );\n        }\n      ),\n      oAuth2userInfo: createAuthEndpoint(\n        \"/oauth2/userinfo\",\n        {\n          method: \"GET\",\n          metadata: {\n            isAction: false,\n            openapi: {\n              description: \"Get OAuth2 user information\",\n              responses: {\n                \"200\": {\n                  description: \"User information retrieved successfully\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          sub: {\n                            type: \"string\",\n                            description: \"Subject identifier (user ID)\"\n                          },\n                          email: {\n                            type: \"string\",\n                            format: \"email\",\n                            nullable: true,\n                            description: \"User's email address, included if 'email' scope is granted\"\n                          },\n                          name: {\n                            type: \"string\",\n                            nullable: true,\n                            description: \"User's full name, included if 'profile' scope is granted\"\n                          },\n                          picture: {\n                            type: \"string\",\n                            format: \"uri\",\n                            nullable: true,\n                            description: \"User's profile picture URL, included if 'profile' scope is granted\"\n                          },\n                          given_name: {\n                            type: \"string\",\n                            nullable: true,\n                            description: \"User's given name, included if 'profile' scope is granted\"\n                          },\n                          family_name: {\n                            type: \"string\",\n                            nullable: true,\n                            description: \"User's family name, included if 'profile' scope is granted\"\n                          },\n                          email_verified: {\n                            type: \"boolean\",\n                            nullable: true,\n                            description: \"Whether the email is verified, included if 'email' scope is granted\"\n                          }\n                        },\n                        required: [\"sub\"]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          if (!ctx.request) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"request not found\",\n              error: \"invalid_request\"\n            });\n          }\n          const authorization = ctx.request.headers.get(\"authorization\");\n          if (!authorization) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"authorization header not found\",\n              error: \"invalid_request\"\n            });\n          }\n          const token = authorization.replace(\"Bearer \", \"\");\n          const accessToken = await ctx.context.adapter.findOne({\n            model: modelName.oauthAccessToken,\n            where: [\n              {\n                field: \"accessToken\",\n                value: token\n              }\n            ]\n          });\n          if (!accessToken) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"invalid access token\",\n              error: \"invalid_token\"\n            });\n          }\n          if (accessToken.accessTokenExpiresAt < /* @__PURE__ */ new Date()) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"The Access Token expired\",\n              error: \"invalid_token\"\n            });\n          }\n          const user = await ctx.context.internalAdapter.findUserById(\n            accessToken.userId\n          );\n          if (!user) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error_description: \"user not found\",\n              error: \"invalid_token\"\n            });\n          }\n          const requestedScopes = accessToken.scopes.split(\" \");\n          const baseUserClaims = {\n            sub: user.id,\n            email: requestedScopes.includes(\"email\") ? user.email : void 0,\n            name: requestedScopes.includes(\"profile\") ? user.name : void 0,\n            picture: requestedScopes.includes(\"profile\") ? user.image : void 0,\n            given_name: requestedScopes.includes(\"profile\") ? user.name.split(\" \")[0] : void 0,\n            family_name: requestedScopes.includes(\"profile\") ? user.name.split(\" \")[1] : void 0,\n            email_verified: requestedScopes.includes(\"email\") ? user.emailVerified : void 0\n          };\n          const userClaims = options.getAdditionalUserInfoClaim ? await options.getAdditionalUserInfoClaim(user, requestedScopes) : baseUserClaims;\n          return ctx.json({\n            ...baseUserClaims,\n            ...userClaims\n          });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/oauth2/register`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.registerOAuthApplication`\n       *\n       * **client:**\n       * `authClient.oauth2.register`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/oidc-provider#api-method-oauth2-register)\n       */\n      registerOAuthApplication: createAuthEndpoint(\n        \"/oauth2/register\",\n        {\n          method: \"POST\",\n          body: z.object({\n            redirect_uris: z.array(z.string()).meta({\n              description: 'A list of redirect URIs. Eg: [\"https://client.example.com/callback\"]'\n            }),\n            token_endpoint_auth_method: z.enum([\"none\", \"client_secret_basic\", \"client_secret_post\"]).meta({\n              description: 'The authentication method for the token endpoint. Eg: \"client_secret_basic\"'\n            }).default(\"client_secret_basic\").optional(),\n            grant_types: z.array(\n              z.enum([\n                \"authorization_code\",\n                \"implicit\",\n                \"password\",\n                \"client_credentials\",\n                \"refresh_token\",\n                \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                \"urn:ietf:params:oauth:grant-type:saml2-bearer\"\n              ])\n            ).meta({\n              description: 'The grant types supported by the application. Eg: [\"authorization_code\"]'\n            }).default([\"authorization_code\"]).optional(),\n            response_types: z.array(z.enum([\"code\", \"token\"])).meta({\n              description: 'The response types supported by the application. Eg: [\"code\"]'\n            }).default([\"code\"]).optional(),\n            client_name: z.string().meta({\n              description: 'The name of the application. Eg: \"My App\"'\n            }).optional(),\n            client_uri: z.string().meta({\n              description: 'The URI of the application. Eg: \"https://client.example.com\"'\n            }).optional(),\n            logo_uri: z.string().meta({\n              description: 'The URI of the application logo. Eg: \"https://client.example.com/logo.png\"'\n            }).optional(),\n            scope: z.string().meta({\n              description: 'The scopes supported by the application. Separated by spaces. Eg: \"profile email\"'\n            }).optional(),\n            contacts: z.array(z.string()).meta({\n              description: 'The contact information for the application. Eg: [\"admin@example.com\"]'\n            }).optional(),\n            tos_uri: z.string().meta({\n              description: 'The URI of the application terms of service. Eg: \"https://client.example.com/tos\"'\n            }).optional(),\n            policy_uri: z.string().meta({\n              description: 'The URI of the application privacy policy. Eg: \"https://client.example.com/policy\"'\n            }).optional(),\n            jwks_uri: z.string().meta({\n              description: 'The URI of the application JWKS. Eg: \"https://client.example.com/jwks\"'\n            }).optional(),\n            jwks: z.record(z.any(), z.any()).meta({\n              description: 'The JWKS of the application. Eg: {\"keys\": [{\"kty\": \"RSA\", \"alg\": \"RS256\", \"use\": \"sig\", \"n\": \"...\", \"e\": \"...\"}]}'\n            }).optional(),\n            metadata: z.record(z.any(), z.any()).meta({\n              description: 'The metadata of the application. Eg: {\"key\": \"value\"}'\n            }).optional(),\n            software_id: z.string().meta({\n              description: 'The software ID of the application. Eg: \"my-software\"'\n            }).optional(),\n            software_version: z.string().meta({\n              description: 'The software version of the application. Eg: \"1.0.0\"'\n            }).optional(),\n            software_statement: z.string().meta({\n              description: \"The software statement of the application.\"\n            }).optional()\n          }),\n          metadata: {\n            openapi: {\n              description: \"Register an OAuth2 application\",\n              responses: {\n                \"200\": {\n                  description: \"OAuth2 application registered successfully\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          name: {\n                            type: \"string\",\n                            description: \"Name of the OAuth2 application\"\n                          },\n                          icon: {\n                            type: \"string\",\n                            nullable: true,\n                            description: \"Icon URL for the application\"\n                          },\n                          metadata: {\n                            type: \"object\",\n                            additionalProperties: true,\n                            nullable: true,\n                            description: \"Additional metadata for the application\"\n                          },\n                          clientId: {\n                            type: \"string\",\n                            description: \"Unique identifier for the client\"\n                          },\n                          clientSecret: {\n                            type: \"string\",\n                            description: \"Secret key for the client\"\n                          },\n                          redirectURLs: {\n                            type: \"array\",\n                            items: { type: \"string\", format: \"uri\" },\n                            description: \"List of allowed redirect URLs\"\n                          },\n                          type: {\n                            type: \"string\",\n                            description: \"Type of the client\",\n                            enum: [\"web\"]\n                          },\n                          authenticationScheme: {\n                            type: \"string\",\n                            description: \"Authentication scheme used by the client\",\n                            enum: [\"client_secret\"]\n                          },\n                          disabled: {\n                            type: \"boolean\",\n                            description: \"Whether the client is disabled\",\n                            enum: [false]\n                          },\n                          userId: {\n                            type: \"string\",\n                            nullable: true,\n                            description: \"ID of the user who registered the client, null if registered anonymously\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\",\n                            description: \"Creation timestamp\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\",\n                            description: \"Last update timestamp\"\n                          }\n                        },\n                        required: [\n                          \"name\",\n                          \"clientId\",\n                          \"clientSecret\",\n                          \"redirectURLs\",\n                          \"type\",\n                          \"authenticationScheme\",\n                          \"disabled\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const body = ctx.body;\n          const session = await getSessionFromCtx(ctx);\n          if (!session && !options.allowDynamicClientRegistration) {\n            throw new APIError(\"UNAUTHORIZED\", {\n              error: \"invalid_token\",\n              error_description: \"Authentication required for client registration\"\n            });\n          }\n          if ((!body.grant_types || body.grant_types.includes(\"authorization_code\") || body.grant_types.includes(\"implicit\")) && (!body.redirect_uris || body.redirect_uris.length === 0)) {\n            throw new APIError(\"BAD_REQUEST\", {\n              error: \"invalid_redirect_uri\",\n              error_description: \"Redirect URIs are required for authorization_code and implicit grant types\"\n            });\n          }\n          if (body.grant_types && body.response_types) {\n            if (body.grant_types.includes(\"authorization_code\") && !body.response_types.includes(\"code\")) {\n              throw new APIError(\"BAD_REQUEST\", {\n                error: \"invalid_client_metadata\",\n                error_description: \"When 'authorization_code' grant type is used, 'code' response type must be included\"\n              });\n            }\n            if (body.grant_types.includes(\"implicit\") && !body.response_types.includes(\"token\")) {\n              throw new APIError(\"BAD_REQUEST\", {\n                error: \"invalid_client_metadata\",\n                error_description: \"When 'implicit' grant type is used, 'token' response type must be included\"\n              });\n            }\n          }\n          const clientId = options.generateClientId?.() || generateRandomString(32, \"a-z\", \"A-Z\");\n          const clientSecret = options.generateClientSecret?.() || generateRandomString(32, \"a-z\", \"A-Z\");\n          const storedClientSecret = await storeClientSecret(ctx, clientSecret);\n          const client = await ctx.context.adapter.create({\n            model: modelName.oauthClient,\n            data: {\n              name: body.client_name,\n              icon: body.logo_uri,\n              metadata: body.metadata ? JSON.stringify(body.metadata) : null,\n              clientId,\n              clientSecret: storedClientSecret,\n              redirectURLs: body.redirect_uris.join(\",\"),\n              type: \"web\",\n              authenticationScheme: body.token_endpoint_auth_method || \"client_secret_basic\",\n              disabled: false,\n              userId: session?.session.userId,\n              createdAt: /* @__PURE__ */ new Date(),\n              updatedAt: /* @__PURE__ */ new Date()\n            }\n          });\n          return ctx.json(\n            {\n              client_id: clientId,\n              ...client.type !== \"public\" ? {\n                client_secret: clientSecret,\n                client_secret_expires_at: 0\n                // 0 means it doesn't expire\n              } : {},\n              client_id_issued_at: Math.floor(Date.now() / 1e3),\n              client_secret_expires_at: 0,\n              // 0 means it doesn't expire\n              redirect_uris: body.redirect_uris,\n              token_endpoint_auth_method: body.token_endpoint_auth_method || \"client_secret_basic\",\n              grant_types: body.grant_types || [\"authorization_code\"],\n              response_types: body.response_types || [\"code\"],\n              client_name: body.client_name,\n              client_uri: body.client_uri,\n              logo_uri: body.logo_uri,\n              scope: body.scope,\n              contacts: body.contacts,\n              tos_uri: body.tos_uri,\n              policy_uri: body.policy_uri,\n              jwks_uri: body.jwks_uri,\n              jwks: body.jwks,\n              software_id: body.software_id,\n              software_version: body.software_version,\n              software_statement: body.software_statement,\n              metadata: body.metadata\n            },\n            {\n              status: 201,\n              headers: {\n                \"Cache-Control\": \"no-store\",\n                Pragma: \"no-cache\"\n              }\n            }\n          );\n        }\n      ),\n      getOAuthClient: createAuthEndpoint(\n        \"/oauth2/client/:id\",\n        {\n          method: \"GET\",\n          use: [sessionMiddleware],\n          metadata: {\n            openapi: {\n              description: \"Get OAuth2 client details\",\n              responses: {\n                \"200\": {\n                  description: \"OAuth2 client retrieved successfully\",\n                  content: {\n                    \"application/json\": {\n                      schema: {\n                        type: \"object\",\n                        properties: {\n                          clientId: {\n                            type: \"string\",\n                            description: \"Unique identifier for the client\"\n                          },\n                          name: {\n                            type: \"string\",\n                            description: \"Name of the OAuth2 application\"\n                          },\n                          icon: {\n                            type: \"string\",\n                            nullable: true,\n                            description: \"Icon URL for the application\"\n                          }\n                        },\n                        required: [\"clientId\", \"name\"]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        async (ctx) => {\n          const client = await getClient(\n            ctx.params.id,\n            ctx.context.adapter,\n            trustedClients\n          );\n          if (!client) {\n            throw new APIError(\"NOT_FOUND\", {\n              error_description: \"client not found\",\n              error: \"not_found\"\n            });\n          }\n          return ctx.json({\n            clientId: client.clientId,\n            name: client.name,\n            icon: client.icon\n          });\n        }\n      )\n    },\n    schema\n  };\n};\n\nexport { getMetadata as a, getClient as g, oidcProvider as o, schema as s };\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16843, "column": 0}, "map": {"version":3,"sources":["file:///Users/andy/Documents/PARA/Project/quiz-lib/node_modules/.pnpm/better-auth%401.3.4_react-dom%4019.1.1_react%4019.1.1__react%4019.1.1/node_modules/better-auth/dist/shared/better-auth.CSmnO3Gi.mjs"],"sourcesContent":["import * as z from 'zod/v4';\nimport { APIError } from 'better-call';\nimport { j as createAuthEndpoint, k as getSessionFromCtx, l as sessionMiddleware, i as createAuthMiddleware } from './better-auth.z3dsxLxE.mjs';\nimport './better-auth.8zoxzg-F.mjs';\nimport { base64Url } from '@better-auth/utils/base64';\nimport '@better-auth/utils/hmac';\nimport '@better-auth/utils/binary';\nimport { m as mergeSchema } from './better-auth.n2KFGwjY.mjs';\nimport './better-auth.DbQJKdHV.mjs';\nimport '../plugins/organization/access/index.mjs';\nimport '@better-auth/utils/random';\nimport { createHash } from '@better-auth/utils/hash';\nimport '@noble/ciphers/chacha';\nimport '@noble/ciphers/utils';\nimport '@noble/ciphers/webcrypto';\nimport 'jose';\nimport '@noble/hashes/scrypt';\nimport '@better-auth/utils';\nimport '@better-auth/utils/hex';\nimport '@noble/hashes/utils';\nimport { g as generateRandomString } from './better-auth.B4Qoxdgc.mjs';\nimport './better-auth.DBGfIDnh.mjs';\nimport 'kysely';\nimport 'defu';\nimport '@better-auth/utils/otp';\nimport '../plugins/admin/access/index.mjs';\nimport '@better-fetch/fetch';\nimport './better-auth.CGrHn1Ih.mjs';\nimport { g as getDate } from './better-auth.CW6D9eSx.mjs';\nimport { g as getIp } from './better-auth.DcfNPS8q.mjs';\nimport { p as parseJSON } from './better-auth.ffWeg50w.mjs';\nimport { s as safeJSONParse } from './better-auth.tB5eU6EY.mjs';\nimport { role } from '../plugins/access/index.mjs';\nimport 'zod';\nimport '@noble/hashes/sha3';\n\nconst apiKeySchema = ({\n  timeWindow,\n  rateLimitMax\n}) => ({\n  apikey: {\n    fields: {\n      /**\n       * The name of the key.\n       */\n      name: {\n        type: \"string\",\n        required: false,\n        input: false\n      },\n      /**\n       * Shows the first few characters of the API key\n       * This allows you to show those few characters in the UI to make it easier for users to identify the API key.\n       */\n      start: {\n        type: \"string\",\n        required: false,\n        input: false\n      },\n      /**\n       * The prefix of the key.\n       */\n      prefix: {\n        type: \"string\",\n        required: false,\n        input: false\n      },\n      /**\n       * The hashed key value.\n       */\n      key: {\n        type: \"string\",\n        required: true,\n        input: false\n      },\n      /**\n       * The user id of the user who created the key.\n       */\n      userId: {\n        type: \"string\",\n        references: { model: \"user\", field: \"id\" },\n        required: true,\n        input: false\n      },\n      /**\n       * The interval to refill the key in milliseconds.\n       */\n      refillInterval: {\n        type: \"number\",\n        required: false,\n        input: false\n      },\n      /**\n       * The amount to refill the remaining count of the key.\n       */\n      refillAmount: {\n        type: \"number\",\n        required: false,\n        input: false\n      },\n      /**\n       * The date and time when the key was last refilled.\n       */\n      lastRefillAt: {\n        type: \"date\",\n        required: false,\n        input: false\n      },\n      /**\n       * Whether the key is enabled.\n       */\n      enabled: {\n        type: \"boolean\",\n        required: false,\n        input: false,\n        defaultValue: true\n      },\n      /**\n       * Whether the key has rate limiting enabled.\n       */\n      rateLimitEnabled: {\n        type: \"boolean\",\n        required: false,\n        input: false,\n        defaultValue: true\n      },\n      /**\n       * The time window in milliseconds for the rate limit.\n       */\n      rateLimitTimeWindow: {\n        type: \"number\",\n        required: false,\n        input: false,\n        defaultValue: timeWindow\n      },\n      /**\n       * The maximum number of requests allowed within the `rateLimitTimeWindow`.\n       */\n      rateLimitMax: {\n        type: \"number\",\n        required: false,\n        input: false,\n        defaultValue: rateLimitMax\n      },\n      /**\n       * The number of requests made within the rate limit time window\n       */\n      requestCount: {\n        type: \"number\",\n        required: false,\n        input: false,\n        defaultValue: 0\n      },\n      /**\n       * The remaining number of requests before the key is revoked.\n       *\n       * If this is null, then the key is not revoked.\n       *\n       * If `refillInterval` & `refillAmount` are provided, than this will refill accordingly.\n       */\n      remaining: {\n        type: \"number\",\n        required: false,\n        input: false\n      },\n      /**\n       * The date and time of the last request made to the key.\n       */\n      lastRequest: {\n        type: \"date\",\n        required: false,\n        input: false\n      },\n      /**\n       * The date and time when the key will expire.\n       */\n      expiresAt: {\n        type: \"date\",\n        required: false,\n        input: false\n      },\n      /**\n       * The date and time when the key was created.\n       */\n      createdAt: {\n        type: \"date\",\n        required: true,\n        input: false\n      },\n      /**\n       * The date and time when the key was last updated.\n       */\n      updatedAt: {\n        type: \"date\",\n        required: true,\n        input: false\n      },\n      /**\n       * The permissions of the key.\n       */\n      permissions: {\n        type: \"string\",\n        required: false,\n        input: false\n      },\n      /**\n       * Any additional metadata you want to store with the key.\n       */\n      metadata: {\n        type: \"string\",\n        required: false,\n        input: true,\n        transform: {\n          input(value) {\n            return JSON.stringify(value);\n          },\n          output(value) {\n            if (!value) return null;\n            return parseJSON(value);\n          }\n        }\n      }\n    }\n  }\n});\n\nfunction createApiKey({\n  keyGenerator,\n  opts,\n  schema,\n  deleteAllExpiredApiKeys\n}) {\n  return createAuthEndpoint(\n    \"/api-key/create\",\n    {\n      method: \"POST\",\n      body: z.object({\n        name: z.string().meta({ description: \"Name of the Api Key\" }).optional(),\n        expiresIn: z.number().meta({\n          description: \"Expiration time of the Api Key in seconds\"\n        }).min(1).optional().nullable().default(null),\n        userId: z.coerce.string().meta({\n          description: 'User Id of the user that the Api Key belongs to. server-only. Eg: \"user-id\"'\n        }).optional(),\n        prefix: z.string().meta({ description: \"Prefix of the Api Key\" }).regex(/^[a-zA-Z0-9_-]+$/, {\n          message: \"Invalid prefix format, must be alphanumeric and contain only underscores and hyphens.\"\n        }).optional(),\n        remaining: z.number().meta({\n          description: \"Remaining number of requests. Server side only\"\n        }).min(0).optional().nullable().default(null),\n        metadata: z.any().optional(),\n        refillAmount: z.number().meta({\n          description: \"Amount to refill the remaining count of the Api Key. server-only. Eg: 100\"\n        }).min(1).optional(),\n        refillInterval: z.number().meta({\n          description: \"Interval to refill the Api Key in milliseconds. server-only. Eg: 1000\"\n        }).optional(),\n        rateLimitTimeWindow: z.number().meta({\n          description: \"The duration in milliseconds where each request is counted. Once the `maxRequests` is reached, the request will be rejected until the `timeWindow` has passed, at which point the `timeWindow` will be reset. server-only. Eg: 1000\"\n        }).optional(),\n        rateLimitMax: z.number().meta({\n          description: \"Maximum amount of requests allowed within a window. Once the `maxRequests` is reached, the request will be rejected until the `timeWindow` has passed, at which point the `timeWindow` will be reset. server-only. Eg: 100\"\n        }).optional(),\n        rateLimitEnabled: z.boolean().meta({\n          description: \"Whether the key has rate limiting enabled. server-only. Eg: true\"\n        }).optional(),\n        permissions: z.record(z.string(), z.array(z.string())).meta({\n          description: \"Permissions of the Api Key.\"\n        }).optional()\n      }),\n      metadata: {\n        openapi: {\n          description: \"Create a new API key for a user\",\n          responses: {\n            \"200\": {\n              description: \"API key created successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"Unique identifier of the API key\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Creation timestamp\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"Last update timestamp\"\n                      },\n                      name: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"Name of the API key\"\n                      },\n                      prefix: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"Prefix of the API key\"\n                      },\n                      start: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"Starting characters of the key (if configured)\"\n                      },\n                      key: {\n                        type: \"string\",\n                        description: \"The full API key (only returned on creation)\"\n                      },\n                      enabled: {\n                        type: \"boolean\",\n                        description: \"Whether the key is enabled\"\n                      },\n                      expiresAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"Expiration timestamp\"\n                      },\n                      userId: {\n                        type: \"string\",\n                        description: \"ID of the user owning the key\"\n                      },\n                      lastRefillAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"Last refill timestamp\"\n                      },\n                      lastRequest: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"Last request timestamp\"\n                      },\n                      metadata: {\n                        type: \"object\",\n                        nullable: true,\n                        additionalProperties: true,\n                        description: \"Metadata associated with the key\"\n                      },\n                      rateLimitMax: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Maximum requests in time window\"\n                      },\n                      rateLimitTimeWindow: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Rate limit time window in milliseconds\"\n                      },\n                      remaining: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Remaining requests\"\n                      },\n                      refillAmount: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Amount to refill\"\n                      },\n                      refillInterval: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Refill interval in milliseconds\"\n                      },\n                      rateLimitEnabled: {\n                        type: \"boolean\",\n                        description: \"Whether rate limiting is enabled\"\n                      },\n                      requestCount: {\n                        type: \"number\",\n                        description: \"Current request count in window\"\n                      },\n                      permissions: {\n                        type: \"object\",\n                        nullable: true,\n                        additionalProperties: {\n                          type: \"array\",\n                          items: { type: \"string\" }\n                        },\n                        description: \"Permissions associated with the key\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"createdAt\",\n                      \"updatedAt\",\n                      \"key\",\n                      \"enabled\",\n                      \"userId\",\n                      \"rateLimitEnabled\",\n                      \"requestCount\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const {\n        name,\n        expiresIn,\n        prefix,\n        remaining,\n        metadata,\n        refillAmount,\n        refillInterval,\n        permissions,\n        rateLimitMax,\n        rateLimitTimeWindow,\n        rateLimitEnabled\n      } = ctx.body;\n      const session = await getSessionFromCtx(ctx);\n      const authRequired = (ctx.request || ctx.headers) && !ctx.body.userId;\n      const user = session?.user ?? (authRequired ? null : { id: ctx.body.userId });\n      if (!user?.id) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: ERROR_CODES.UNAUTHORIZED_SESSION\n        });\n      }\n      if (authRequired) {\n        if (refillAmount !== void 0 || refillInterval !== void 0 || rateLimitMax !== void 0 || rateLimitTimeWindow !== void 0 || rateLimitEnabled !== void 0 || permissions !== void 0 || remaining !== null) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.SERVER_ONLY_PROPERTY\n          });\n        }\n      }\n      if (metadata) {\n        if (opts.enableMetadata === false) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.METADATA_DISABLED\n          });\n        }\n        if (typeof metadata !== \"object\") {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_METADATA_TYPE\n          });\n        }\n      }\n      if (refillAmount && !refillInterval) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ERROR_CODES.REFILL_AMOUNT_AND_INTERVAL_REQUIRED\n        });\n      }\n      if (refillInterval && !refillAmount) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ERROR_CODES.REFILL_INTERVAL_AND_AMOUNT_REQUIRED\n        });\n      }\n      if (expiresIn) {\n        if (opts.keyExpiration.disableCustomExpiresTime === true) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.KEY_DISABLED_EXPIRATION\n          });\n        }\n        const expiresIn_in_days = expiresIn / (60 * 60 * 24);\n        if (opts.keyExpiration.minExpiresIn > expiresIn_in_days) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.EXPIRES_IN_IS_TOO_SMALL\n          });\n        } else if (opts.keyExpiration.maxExpiresIn < expiresIn_in_days) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.EXPIRES_IN_IS_TOO_LARGE\n          });\n        }\n      }\n      if (prefix) {\n        if (prefix.length < opts.minimumPrefixLength) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_PREFIX_LENGTH\n          });\n        }\n        if (prefix.length > opts.maximumPrefixLength) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_PREFIX_LENGTH\n          });\n        }\n      }\n      if (name) {\n        if (name.length < opts.minimumNameLength) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_NAME_LENGTH\n          });\n        }\n        if (name.length > opts.maximumNameLength) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_NAME_LENGTH\n          });\n        }\n      } else if (opts.requireName) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ERROR_CODES.NAME_REQUIRED\n        });\n      }\n      deleteAllExpiredApiKeys(ctx.context);\n      const key = await keyGenerator({\n        length: opts.defaultKeyLength,\n        prefix: prefix || opts.defaultPrefix\n      });\n      const hashed = opts.disableKeyHashing ? key : await defaultKeyHasher(key);\n      let start = null;\n      if (opts.startingCharactersConfig.shouldStore) {\n        start = key.substring(\n          0,\n          opts.startingCharactersConfig.charactersLength\n        );\n      }\n      const defaultPermissions = opts.permissions?.defaultPermissions ? typeof opts.permissions.defaultPermissions === \"function\" ? await opts.permissions.defaultPermissions(user.id, ctx) : opts.permissions.defaultPermissions : void 0;\n      const permissionsToApply = permissions ? JSON.stringify(permissions) : defaultPermissions ? JSON.stringify(defaultPermissions) : void 0;\n      let data = {\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        name: name ?? null,\n        prefix: prefix ?? opts.defaultPrefix ?? null,\n        start,\n        key: hashed,\n        enabled: true,\n        expiresAt: expiresIn ? getDate(expiresIn, \"sec\") : opts.keyExpiration.defaultExpiresIn ? getDate(opts.keyExpiration.defaultExpiresIn, \"sec\") : null,\n        userId: user.id,\n        lastRefillAt: null,\n        lastRequest: null,\n        metadata: null,\n        rateLimitMax: rateLimitMax ?? opts.rateLimit.maxRequests ?? null,\n        rateLimitTimeWindow: rateLimitTimeWindow ?? opts.rateLimit.timeWindow ?? null,\n        remaining: remaining || refillAmount || null,\n        refillAmount: refillAmount ?? null,\n        refillInterval: refillInterval ?? null,\n        rateLimitEnabled: rateLimitEnabled === void 0 ? opts.rateLimit.enabled ?? true : rateLimitEnabled,\n        requestCount: 0,\n        //@ts-ignore - we intentionally save the permissions as string on DB.\n        permissions: permissionsToApply\n      };\n      if (metadata) {\n        data.metadata = schema.apikey.fields.metadata.transform.input(metadata);\n      }\n      const apiKey = await ctx.context.adapter.create({\n        model: API_KEY_TABLE_NAME,\n        data\n      });\n      return ctx.json({\n        ...apiKey,\n        key,\n        metadata: metadata ?? null,\n        permissions: apiKey.permissions ? safeJSONParse(\n          //@ts-ignore - from DB, this value is always a string\n          apiKey.permissions\n        ) : null\n      });\n    }\n  );\n}\n\nfunction deleteApiKey({\n  opts,\n  schema,\n  deleteAllExpiredApiKeys\n}) {\n  return createAuthEndpoint(\n    \"/api-key/delete\",\n    {\n      method: \"POST\",\n      body: z.object({\n        keyId: z.string().meta({\n          description: \"The id of the Api Key\"\n        })\n      }),\n      use: [sessionMiddleware],\n      metadata: {\n        openapi: {\n          description: \"Delete an existing API key\",\n          requestBody: {\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    keyId: {\n                      type: \"string\",\n                      description: \"The id of the API key to delete\"\n                    }\n                  },\n                  required: [\"keyId\"]\n                }\n              }\n            }\n          },\n          responses: {\n            \"200\": {\n              description: \"API key deleted successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      success: {\n                        type: \"boolean\",\n                        description: \"Indicates if the API key was successfully deleted\"\n                      }\n                    },\n                    required: [\"success\"]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const { keyId } = ctx.body;\n      const session = ctx.context.session;\n      if (session.user.banned === true) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: ERROR_CODES.USER_BANNED\n        });\n      }\n      const apiKey = await ctx.context.adapter.findOne({\n        model: API_KEY_TABLE_NAME,\n        where: [\n          {\n            field: \"id\",\n            value: keyId\n          }\n        ]\n      });\n      if (!apiKey || apiKey.userId !== session.user.id) {\n        throw new APIError(\"NOT_FOUND\", {\n          message: ERROR_CODES.KEY_NOT_FOUND\n        });\n      }\n      try {\n        await ctx.context.adapter.delete({\n          model: API_KEY_TABLE_NAME,\n          where: [\n            {\n              field: \"id\",\n              value: apiKey.id\n            }\n          ]\n        });\n      } catch (error) {\n        throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: error?.message\n        });\n      }\n      deleteAllExpiredApiKeys(ctx.context);\n      return ctx.json({\n        success: true\n      });\n    }\n  );\n}\n\nfunction getApiKey({\n  opts,\n  schema,\n  deleteAllExpiredApiKeys\n}) {\n  return createAuthEndpoint(\n    \"/api-key/get\",\n    {\n      method: \"GET\",\n      query: z.object({\n        id: z.string().meta({\n          description: \"The id of the Api Key\"\n        })\n      }),\n      use: [sessionMiddleware],\n      metadata: {\n        openapi: {\n          description: \"Retrieve an existing API key by ID\",\n          responses: {\n            \"200\": {\n              description: \"API key retrieved successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"ID\"\n                      },\n                      name: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"The name of the key\"\n                      },\n                      start: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"Shows the first few characters of the API key, including the prefix. This allows you to show those few characters in the UI to make it easier for users to identify the API key.\"\n                      },\n                      prefix: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"The API Key prefix. Stored as plain text.\"\n                      },\n                      userId: {\n                        type: \"string\",\n                        description: \"The owner of the user id\"\n                      },\n                      refillInterval: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"The interval in which the `remaining` count is refilled by day. Example: 1 // every day\"\n                      },\n                      refillAmount: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"The amount to refill\"\n                      },\n                      lastRefillAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"The last refill date\"\n                      },\n                      enabled: {\n                        type: \"boolean\",\n                        description: \"Sets if key is enabled or disabled\",\n                        default: true\n                      },\n                      rateLimitEnabled: {\n                        type: \"boolean\",\n                        description: \"Whether the key has rate limiting enabled\"\n                      },\n                      rateLimitTimeWindow: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"The duration in milliseconds\"\n                      },\n                      rateLimitMax: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Maximum amount of requests allowed within a window\"\n                      },\n                      requestCount: {\n                        type: \"number\",\n                        description: \"The number of requests made within the rate limit time window\"\n                      },\n                      remaining: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Remaining requests (every time api key is used this should updated and should be updated on refill as well)\"\n                      },\n                      lastRequest: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"When last request occurred\"\n                      },\n                      expiresAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"Expiry date of a key\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"created at\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"updated at\"\n                      },\n                      metadata: {\n                        type: \"object\",\n                        nullable: true,\n                        additionalProperties: true,\n                        description: \"Extra metadata about the apiKey\"\n                      },\n                      permissions: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"Permissions for the api key (stored as JSON string)\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"userId\",\n                      \"enabled\",\n                      \"rateLimitEnabled\",\n                      \"requestCount\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const { id } = ctx.query;\n      const session = ctx.context.session;\n      let apiKey = await ctx.context.adapter.findOne({\n        model: API_KEY_TABLE_NAME,\n        where: [\n          {\n            field: \"id\",\n            value: id\n          },\n          {\n            field: \"userId\",\n            value: session.user.id\n          }\n        ]\n      });\n      if (!apiKey) {\n        throw new APIError(\"NOT_FOUND\", {\n          message: ERROR_CODES.KEY_NOT_FOUND\n        });\n      }\n      deleteAllExpiredApiKeys(ctx.context);\n      apiKey.metadata = schema.apikey.fields.metadata.transform.output(\n        apiKey.metadata\n      );\n      const { key, ...returningApiKey } = apiKey;\n      return ctx.json({\n        ...returningApiKey,\n        permissions: returningApiKey.permissions ? safeJSONParse(\n          //@ts-ignore - From DB this is always a string\n          returningApiKey.permissions\n        ) : null\n      });\n    }\n  );\n}\n\nfunction updateApiKey({\n  opts,\n  schema,\n  deleteAllExpiredApiKeys\n}) {\n  return createAuthEndpoint(\n    \"/api-key/update\",\n    {\n      method: \"POST\",\n      body: z.object({\n        keyId: z.string().meta({\n          description: \"The id of the Api Key\"\n        }),\n        userId: z.coerce.string().meta({\n          description: 'The id of the user which the api key belongs to. server-only. Eg: \"some-user-id\"'\n        }).optional(),\n        name: z.string().meta({\n          description: \"The name of the key\"\n        }).optional(),\n        enabled: z.boolean().meta({\n          description: \"Whether the Api Key is enabled or not\"\n        }).optional(),\n        remaining: z.number().meta({\n          description: \"The number of remaining requests\"\n        }).min(1).optional(),\n        refillAmount: z.number().meta({\n          description: \"The refill amount\"\n        }).optional(),\n        refillInterval: z.number().meta({\n          description: \"The refill interval\"\n        }).optional(),\n        metadata: z.any().optional(),\n        expiresIn: z.number().meta({\n          description: \"Expiration time of the Api Key in seconds\"\n        }).min(1).optional().nullable(),\n        rateLimitEnabled: z.boolean().meta({\n          description: \"Whether the key has rate limiting enabled.\"\n        }).optional(),\n        rateLimitTimeWindow: z.number().meta({\n          description: \"The duration in milliseconds where each request is counted. server-only. Eg: 1000\"\n        }).optional(),\n        rateLimitMax: z.number().meta({\n          description: \"Maximum amount of requests allowed within a window. Once the `maxRequests` is reached, the request will be rejected until the `timeWindow` has passed, at which point the `timeWindow` will be reset. server-only. Eg: 100\"\n        }).optional(),\n        permissions: z.record(z.string(), z.array(z.string())).meta({\n          description: \"Update the permissions on the API Key. server-only.\"\n        }).optional().nullable()\n      }),\n      metadata: {\n        openapi: {\n          description: \"Update an existing API key by ID\",\n          responses: {\n            \"200\": {\n              description: \"API key updated successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\",\n                        description: \"ID\"\n                      },\n                      name: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"The name of the key\"\n                      },\n                      start: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"Shows the first few characters of the API key, including the prefix. This allows you to show those few characters in the UI to make it easier for users to identify the API key.\"\n                      },\n                      prefix: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"The API Key prefix. Stored as plain text.\"\n                      },\n                      userId: {\n                        type: \"string\",\n                        description: \"The owner of the user id\"\n                      },\n                      refillInterval: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"The interval in which the `remaining` count is refilled by day. Example: 1 // every day\"\n                      },\n                      refillAmount: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"The amount to refill\"\n                      },\n                      lastRefillAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"The last refill date\"\n                      },\n                      enabled: {\n                        type: \"boolean\",\n                        description: \"Sets if key is enabled or disabled\",\n                        default: true\n                      },\n                      rateLimitEnabled: {\n                        type: \"boolean\",\n                        description: \"Whether the key has rate limiting enabled\"\n                      },\n                      rateLimitTimeWindow: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"The duration in milliseconds\"\n                      },\n                      rateLimitMax: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Maximum amount of requests allowed within a window\"\n                      },\n                      requestCount: {\n                        type: \"number\",\n                        description: \"The number of requests made within the rate limit time window\"\n                      },\n                      remaining: {\n                        type: \"number\",\n                        nullable: true,\n                        description: \"Remaining requests (every time api key is used this should updated and should be updated on refill as well)\"\n                      },\n                      lastRequest: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"When last request occurred\"\n                      },\n                      expiresAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        nullable: true,\n                        description: \"Expiry date of a key\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"created at\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\",\n                        description: \"updated at\"\n                      },\n                      metadata: {\n                        type: \"object\",\n                        nullable: true,\n                        additionalProperties: true,\n                        description: \"Extra metadata about the apiKey\"\n                      },\n                      permissions: {\n                        type: \"string\",\n                        nullable: true,\n                        description: \"Permissions for the api key (stored as JSON string)\"\n                      }\n                    },\n                    required: [\n                      \"id\",\n                      \"userId\",\n                      \"enabled\",\n                      \"rateLimitEnabled\",\n                      \"requestCount\",\n                      \"createdAt\",\n                      \"updatedAt\"\n                    ]\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const {\n        keyId,\n        expiresIn,\n        enabled,\n        metadata,\n        refillAmount,\n        refillInterval,\n        remaining,\n        name,\n        permissions,\n        rateLimitEnabled,\n        rateLimitTimeWindow,\n        rateLimitMax\n      } = ctx.body;\n      const session = await getSessionFromCtx(ctx);\n      const authRequired = (ctx.request || ctx.headers) && !ctx.body.userId;\n      const user = session?.user ?? (authRequired ? null : { id: ctx.body.userId });\n      if (!user?.id) {\n        throw new APIError(\"UNAUTHORIZED\", {\n          message: ERROR_CODES.UNAUTHORIZED_SESSION\n        });\n      }\n      if (authRequired) {\n        if (refillAmount !== void 0 || refillInterval !== void 0 || rateLimitMax !== void 0 || rateLimitTimeWindow !== void 0 || rateLimitEnabled !== void 0 || remaining !== void 0 || permissions !== void 0) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.SERVER_ONLY_PROPERTY\n          });\n        }\n      }\n      const apiKey = await ctx.context.adapter.findOne({\n        model: API_KEY_TABLE_NAME,\n        where: [\n          {\n            field: \"id\",\n            value: keyId\n          },\n          {\n            field: \"userId\",\n            value: user.id\n          }\n        ]\n      });\n      if (!apiKey) {\n        throw new APIError(\"NOT_FOUND\", {\n          message: ERROR_CODES.KEY_NOT_FOUND\n        });\n      }\n      let newValues = {};\n      if (name !== void 0) {\n        if (name.length < opts.minimumNameLength) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_NAME_LENGTH\n          });\n        } else if (name.length > opts.maximumNameLength) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_NAME_LENGTH\n          });\n        }\n        newValues.name = name;\n      }\n      if (enabled !== void 0) {\n        newValues.enabled = enabled;\n      }\n      if (expiresIn !== void 0) {\n        if (opts.keyExpiration.disableCustomExpiresTime === true) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.KEY_DISABLED_EXPIRATION\n          });\n        }\n        if (expiresIn !== null) {\n          const expiresIn_in_days = expiresIn / (60 * 60 * 24);\n          if (expiresIn_in_days < opts.keyExpiration.minExpiresIn) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ERROR_CODES.EXPIRES_IN_IS_TOO_SMALL\n            });\n          } else if (expiresIn_in_days > opts.keyExpiration.maxExpiresIn) {\n            throw new APIError(\"BAD_REQUEST\", {\n              message: ERROR_CODES.EXPIRES_IN_IS_TOO_LARGE\n            });\n          }\n        }\n        newValues.expiresAt = expiresIn ? getDate(expiresIn, \"sec\") : null;\n      }\n      if (metadata !== void 0) {\n        if (typeof metadata !== \"object\") {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.INVALID_METADATA_TYPE\n          });\n        }\n        newValues.metadata = schema.apikey.fields.metadata.transform.input(metadata);\n      }\n      if (remaining !== void 0) {\n        newValues.remaining = remaining;\n      }\n      if (refillAmount !== void 0 || refillInterval !== void 0) {\n        if (refillAmount !== void 0 && refillInterval === void 0) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.REFILL_AMOUNT_AND_INTERVAL_REQUIRED\n          });\n        } else if (refillInterval !== void 0 && refillAmount === void 0) {\n          throw new APIError(\"BAD_REQUEST\", {\n            message: ERROR_CODES.REFILL_INTERVAL_AND_AMOUNT_REQUIRED\n          });\n        }\n        newValues.refillAmount = refillAmount;\n        newValues.refillInterval = refillInterval;\n      }\n      if (rateLimitEnabled !== void 0) {\n        newValues.rateLimitEnabled = rateLimitEnabled;\n      }\n      if (rateLimitTimeWindow !== void 0) {\n        newValues.rateLimitTimeWindow = rateLimitTimeWindow;\n      }\n      if (rateLimitMax !== void 0) {\n        newValues.rateLimitMax = rateLimitMax;\n      }\n      if (permissions !== void 0) {\n        newValues.permissions = JSON.stringify(permissions);\n      }\n      if (Object.keys(newValues).length === 0) {\n        throw new APIError(\"BAD_REQUEST\", {\n          message: ERROR_CODES.NO_VALUES_TO_UPDATE\n        });\n      }\n      let newApiKey = apiKey;\n      try {\n        let result = await ctx.context.adapter.update({\n          model: API_KEY_TABLE_NAME,\n          where: [\n            {\n              field: \"id\",\n              value: apiKey.id\n            }\n          ],\n          update: {\n            lastRequest: /* @__PURE__ */ new Date(),\n            remaining: apiKey.remaining === null ? null : apiKey.remaining - 1,\n            ...newValues\n          }\n        });\n        if (result) newApiKey = result;\n      } catch (error) {\n        throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: error?.message\n        });\n      }\n      deleteAllExpiredApiKeys(ctx.context);\n      newApiKey.metadata = schema.apikey.fields.metadata.transform.output(\n        newApiKey.metadata\n      );\n      const { key, ...returningApiKey } = newApiKey;\n      return ctx.json({\n        ...returningApiKey,\n        permissions: returningApiKey.permissions ? safeJSONParse(\n          //@ts-ignore - from DB, this value is always a string\n          returningApiKey.permissions\n        ) : null\n      });\n    }\n  );\n}\n\nfunction isRateLimited(apiKey, opts) {\n  const now = /* @__PURE__ */ new Date();\n  const lastRequest = apiKey.lastRequest;\n  const rateLimitTimeWindow = apiKey.rateLimitTimeWindow;\n  const rateLimitMax = apiKey.rateLimitMax;\n  let requestCount = apiKey.requestCount;\n  if (opts.rateLimit.enabled === false)\n    return {\n      success: true,\n      message: null,\n      update: { lastRequest: now },\n      tryAgainIn: null\n    };\n  if (apiKey.rateLimitEnabled === false)\n    return {\n      success: true,\n      message: null,\n      update: { lastRequest: now },\n      tryAgainIn: null\n    };\n  if (rateLimitTimeWindow === null || rateLimitMax === null) {\n    return {\n      success: true,\n      message: null,\n      update: null,\n      tryAgainIn: null\n    };\n  }\n  if (lastRequest === null) {\n    return {\n      success: true,\n      message: null,\n      update: { lastRequest: now, requestCount: 1 },\n      tryAgainIn: null\n    };\n  }\n  const timeSinceLastRequest = now.getTime() - new Date(lastRequest).getTime();\n  if (timeSinceLastRequest > rateLimitTimeWindow) {\n    return {\n      success: true,\n      message: null,\n      update: { lastRequest: now, requestCount: 1 },\n      tryAgainIn: null\n    };\n  }\n  if (requestCount >= rateLimitMax) {\n    return {\n      success: false,\n      message: ERROR_CODES.RATE_LIMIT_EXCEEDED,\n      update: null,\n      tryAgainIn: Math.ceil(rateLimitTimeWindow - timeSinceLastRequest)\n    };\n  }\n  requestCount++;\n  return {\n    success: true,\n    message: null,\n    tryAgainIn: null,\n    update: { lastRequest: now, requestCount }\n  };\n}\n\nasync function validateApiKey({\n  hashedKey,\n  ctx,\n  opts,\n  schema,\n  permissions\n}) {\n  const apiKey = await ctx.context.adapter.findOne({\n    model: API_KEY_TABLE_NAME,\n    where: [\n      {\n        field: \"key\",\n        value: hashedKey\n      }\n    ]\n  });\n  if (!apiKey) {\n    throw new APIError(\"UNAUTHORIZED\", {\n      message: ERROR_CODES.INVALID_API_KEY\n    });\n  }\n  if (apiKey.enabled === false) {\n    throw new APIError(\"UNAUTHORIZED\", {\n      message: ERROR_CODES.KEY_DISABLED,\n      code: \"KEY_DISABLED\"\n    });\n  }\n  if (apiKey.expiresAt) {\n    const now = (/* @__PURE__ */ new Date()).getTime();\n    const expiresAt = new Date(apiKey.expiresAt).getTime();\n    if (now > expiresAt) {\n      try {\n        ctx.context.adapter.delete({\n          model: API_KEY_TABLE_NAME,\n          where: [\n            {\n              field: \"id\",\n              value: apiKey.id\n            }\n          ]\n        });\n      } catch (error) {\n        ctx.context.logger.error(`Failed to delete expired API keys:`, error);\n      }\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: ERROR_CODES.KEY_EXPIRED,\n        code: \"KEY_EXPIRED\"\n      });\n    }\n  }\n  if (permissions) {\n    const apiKeyPermissions = apiKey.permissions ? safeJSONParse(\n      //@ts-ignore - from DB, this value is always a string\n      apiKey.permissions\n    ) : null;\n    if (!apiKeyPermissions) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: ERROR_CODES.KEY_NOT_FOUND,\n        code: \"KEY_NOT_FOUND\"\n      });\n    }\n    const r = role(apiKeyPermissions);\n    const result = r.authorize(permissions);\n    if (!result.success) {\n      throw new APIError(\"UNAUTHORIZED\", {\n        message: ERROR_CODES.KEY_NOT_FOUND,\n        code: \"KEY_NOT_FOUND\"\n      });\n    }\n  }\n  let remaining = apiKey.remaining;\n  let lastRefillAt = apiKey.lastRefillAt;\n  if (apiKey.remaining === 0 && apiKey.refillAmount === null) {\n    try {\n      ctx.context.adapter.delete({\n        model: API_KEY_TABLE_NAME,\n        where: [\n          {\n            field: \"id\",\n            value: apiKey.id\n          }\n        ]\n      });\n    } catch (error) {\n      ctx.context.logger.error(`Failed to delete expired API keys:`, error);\n    }\n    throw new APIError(\"TOO_MANY_REQUESTS\", {\n      message: ERROR_CODES.USAGE_EXCEEDED,\n      code: \"USAGE_EXCEEDED\"\n    });\n  } else if (remaining !== null) {\n    let now = (/* @__PURE__ */ new Date()).getTime();\n    const refillInterval = apiKey.refillInterval;\n    const refillAmount = apiKey.refillAmount;\n    let lastTime = new Date(lastRefillAt ?? apiKey.createdAt).getTime();\n    if (refillInterval && refillAmount) {\n      const timeSinceLastRequest = (now - lastTime) / (1e3 * 60 * 60 * 24);\n      if (timeSinceLastRequest > refillInterval) {\n        remaining = refillAmount;\n        lastRefillAt = /* @__PURE__ */ new Date();\n      }\n    }\n    if (remaining === 0) {\n      throw new APIError(\"TOO_MANY_REQUESTS\", {\n        message: ERROR_CODES.USAGE_EXCEEDED,\n        code: \"USAGE_EXCEEDED\"\n      });\n    } else {\n      remaining--;\n    }\n  }\n  const { message, success, update, tryAgainIn } = isRateLimited(apiKey, opts);\n  const newApiKey = await ctx.context.adapter.update({\n    model: API_KEY_TABLE_NAME,\n    where: [\n      {\n        field: \"id\",\n        value: apiKey.id\n      }\n    ],\n    update: {\n      ...update,\n      remaining,\n      lastRefillAt\n    }\n  });\n  if (!newApiKey) {\n    throw new APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: ERROR_CODES.FAILED_TO_UPDATE_API_KEY,\n      code: \"INTERNAL_SERVER_ERROR\"\n    });\n  }\n  if (success === false) {\n    throw new APIError(\"UNAUTHORIZED\", {\n      message: message ?? void 0,\n      code: \"RATE_LIMITED\",\n      details: {\n        tryAgainIn\n      }\n    });\n  }\n  return newApiKey;\n}\nfunction verifyApiKey({\n  opts,\n  schema,\n  deleteAllExpiredApiKeys\n}) {\n  return createAuthEndpoint(\n    \"/api-key/verify\",\n    {\n      method: \"POST\",\n      body: z.object({\n        key: z.string().meta({\n          description: \"The key to verify\"\n        }),\n        permissions: z.record(z.string(), z.array(z.string())).meta({\n          description: \"The permissions to verify.\"\n        }).optional()\n      }),\n      metadata: {\n        SERVER_ONLY: true\n      }\n    },\n    async (ctx) => {\n      const { key } = ctx.body;\n      if (key.length < opts.defaultKeyLength) {\n        return ctx.json({\n          valid: false,\n          error: {\n            message: ERROR_CODES.INVALID_API_KEY,\n            code: \"KEY_NOT_FOUND\"\n          },\n          key: null\n        });\n      }\n      if (opts.customAPIKeyValidator) {\n        const isValid = await opts.customAPIKeyValidator({ ctx, key });\n        if (!isValid) {\n          return ctx.json({\n            valid: false,\n            error: {\n              message: ERROR_CODES.INVALID_API_KEY,\n              code: \"KEY_NOT_FOUND\"\n            },\n            key: null\n          });\n        }\n      }\n      const hashed = opts.disableKeyHashing ? key : await defaultKeyHasher(key);\n      let apiKey = null;\n      try {\n        apiKey = await validateApiKey({\n          hashedKey: hashed,\n          permissions: ctx.body.permissions,\n          ctx,\n          opts,\n          schema\n        });\n        await deleteAllExpiredApiKeys(ctx.context);\n      } catch (error) {\n        if (error instanceof APIError) {\n          return ctx.json({\n            valid: false,\n            error: {\n              message: error.body?.message,\n              code: error.body?.code\n            },\n            key: null\n          });\n        }\n        return ctx.json({\n          valid: false,\n          error: {\n            message: ERROR_CODES.INVALID_API_KEY,\n            code: \"INVALID_API_KEY\"\n          },\n          key: null\n        });\n      }\n      const { key: _, ...returningApiKey } = apiKey ?? {\n        key: 1,\n        permissions: void 0\n      };\n      if (\"metadata\" in returningApiKey) {\n        returningApiKey.metadata = schema.apikey.fields.metadata.transform.output(\n          returningApiKey.metadata\n        );\n      }\n      returningApiKey.permissions = returningApiKey.permissions ? safeJSONParse(\n        //@ts-ignore - from DB, this value is always a string\n        returningApiKey.permissions\n      ) : null;\n      return ctx.json({\n        valid: true,\n        error: null,\n        key: apiKey === null ? null : returningApiKey\n      });\n    }\n  );\n}\n\nfunction listApiKeys({\n  opts,\n  schema,\n  deleteAllExpiredApiKeys\n}) {\n  return createAuthEndpoint(\n    \"/api-key/list\",\n    {\n      method: \"GET\",\n      use: [sessionMiddleware],\n      metadata: {\n        openapi: {\n          description: \"List all API keys for the authenticated user\",\n          responses: {\n            \"200\": {\n              description: \"API keys retrieved successfully\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"array\",\n                    items: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"ID\"\n                        },\n                        name: {\n                          type: \"string\",\n                          nullable: true,\n                          description: \"The name of the key\"\n                        },\n                        start: {\n                          type: \"string\",\n                          nullable: true,\n                          description: \"Shows the first few characters of the API key, including the prefix. This allows you to show those few characters in the UI to make it easier for users to identify the API key.\"\n                        },\n                        prefix: {\n                          type: \"string\",\n                          nullable: true,\n                          description: \"The API Key prefix. Stored as plain text.\"\n                        },\n                        userId: {\n                          type: \"string\",\n                          description: \"The owner of the user id\"\n                        },\n                        refillInterval: {\n                          type: \"number\",\n                          nullable: true,\n                          description: \"The interval in which the `remaining` count is refilled by day. Example: 1 // every day\"\n                        },\n                        refillAmount: {\n                          type: \"number\",\n                          nullable: true,\n                          description: \"The amount to refill\"\n                        },\n                        lastRefillAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          nullable: true,\n                          description: \"The last refill date\"\n                        },\n                        enabled: {\n                          type: \"boolean\",\n                          description: \"Sets if key is enabled or disabled\",\n                          default: true\n                        },\n                        rateLimitEnabled: {\n                          type: \"boolean\",\n                          description: \"Whether the key has rate limiting enabled\"\n                        },\n                        rateLimitTimeWindow: {\n                          type: \"number\",\n                          nullable: true,\n                          description: \"The duration in milliseconds\"\n                        },\n                        rateLimitMax: {\n                          type: \"number\",\n                          nullable: true,\n                          description: \"Maximum amount of requests allowed within a window\"\n                        },\n                        requestCount: {\n                          type: \"number\",\n                          description: \"The number of requests made within the rate limit time window\"\n                        },\n                        remaining: {\n                          type: \"number\",\n                          nullable: true,\n                          description: \"Remaining requests (every time api key is used this should updated and should be updated on refill as well)\"\n                        },\n                        lastRequest: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          nullable: true,\n                          description: \"When last request occurred\"\n                        },\n                        expiresAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          nullable: true,\n                          description: \"Expiry date of a key\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"created at\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"updated at\"\n                        },\n                        metadata: {\n                          type: \"object\",\n                          nullable: true,\n                          additionalProperties: true,\n                          description: \"Extra metadata about the apiKey\"\n                        },\n                        permissions: {\n                          type: \"string\",\n                          nullable: true,\n                          description: \"Permissions for the api key (stored as JSON string)\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"userId\",\n                        \"enabled\",\n                        \"rateLimitEnabled\",\n                        \"requestCount\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async (ctx) => {\n      const session = ctx.context.session;\n      let apiKeys = await ctx.context.adapter.findMany({\n        model: API_KEY_TABLE_NAME,\n        where: [\n          {\n            field: \"userId\",\n            value: session.user.id\n          }\n        ]\n      });\n      deleteAllExpiredApiKeys(ctx.context);\n      apiKeys = apiKeys.map((apiKey) => {\n        return {\n          ...apiKey,\n          metadata: schema.apikey.fields.metadata.transform.output(\n            apiKey.metadata\n          )\n        };\n      });\n      let returningApiKey = apiKeys.map((x) => {\n        const { key, ...returningApiKey2 } = x;\n        return {\n          ...returningApiKey2,\n          permissions: returningApiKey2.permissions ? safeJSONParse(\n            //@ts-ignore - From DB this is always a string\n            returningApiKey2.permissions\n          ) : null\n        };\n      });\n      return ctx.json(returningApiKey);\n    }\n  );\n}\n\nfunction deleteAllExpiredApiKeysEndpoint({\n  deleteAllExpiredApiKeys\n}) {\n  return createAuthEndpoint(\n    \"/api-key/delete-all-expired-api-keys\",\n    {\n      method: \"POST\",\n      metadata: {\n        SERVER_ONLY: true,\n        client: false\n      }\n    },\n    async (ctx) => {\n      try {\n        await deleteAllExpiredApiKeys(ctx.context, true);\n      } catch (error) {\n        ctx.context.logger.error(\n          \"[API KEY PLUGIN] Failed to delete expired API keys:\",\n          error\n        );\n        return ctx.json({\n          success: false,\n          error\n        });\n      }\n      return ctx.json({ success: true, error: null });\n    }\n  );\n}\n\nlet lastChecked = null;\nfunction deleteAllExpiredApiKeys(ctx, byPassLastCheckTime = false) {\n  if (lastChecked && !byPassLastCheckTime) {\n    const now = /* @__PURE__ */ new Date();\n    const diff = now.getTime() - lastChecked.getTime();\n    if (diff < 1e4) {\n      return;\n    }\n  }\n  lastChecked = /* @__PURE__ */ new Date();\n  try {\n    return ctx.adapter.deleteMany({\n      model: API_KEY_TABLE_NAME,\n      where: [\n        {\n          field: \"expiresAt\",\n          operator: \"lt\",\n          value: /* @__PURE__ */ new Date()\n        },\n        {\n          field: \"expiresAt\",\n          operator: \"ne\",\n          value: null\n        }\n      ]\n    });\n  } catch (error) {\n    ctx.logger.error(`Failed to delete expired API keys:`, error);\n  }\n}\nfunction createApiKeyRoutes({\n  keyGenerator,\n  opts,\n  schema\n}) {\n  return {\n    createApiKey: createApiKey({\n      keyGenerator,\n      opts,\n      schema,\n      deleteAllExpiredApiKeys\n    }),\n    verifyApiKey: verifyApiKey({ opts, schema, deleteAllExpiredApiKeys }),\n    getApiKey: getApiKey({ opts, schema, deleteAllExpiredApiKeys }),\n    updateApiKey: updateApiKey({ opts, schema, deleteAllExpiredApiKeys }),\n    deleteApiKey: deleteApiKey({ opts, schema, deleteAllExpiredApiKeys }),\n    listApiKeys: listApiKeys({ opts, schema, deleteAllExpiredApiKeys }),\n    deleteAllExpiredApiKeys: deleteAllExpiredApiKeysEndpoint({\n      deleteAllExpiredApiKeys\n    })\n  };\n}\n\nconst defaultKeyHasher = async (key) => {\n  const hash = await createHash(\"SHA-256\").digest(\n    new TextEncoder().encode(key)\n  );\n  const hashed = base64Url.encode(new Uint8Array(hash), {\n    padding: false\n  });\n  return hashed;\n};\nconst ERROR_CODES = {\n  INVALID_METADATA_TYPE: \"metadata must be an object or undefined\",\n  REFILL_AMOUNT_AND_INTERVAL_REQUIRED: \"refillAmount is required when refillInterval is provided\",\n  REFILL_INTERVAL_AND_AMOUNT_REQUIRED: \"refillInterval is required when refillAmount is provided\",\n  USER_BANNED: \"User is banned\",\n  UNAUTHORIZED_SESSION: \"Unauthorized or invalid session\",\n  KEY_NOT_FOUND: \"API Key not found\",\n  KEY_DISABLED: \"API Key is disabled\",\n  KEY_EXPIRED: \"API Key has expired\",\n  USAGE_EXCEEDED: \"API Key has reached its usage limit\",\n  KEY_NOT_RECOVERABLE: \"API Key is not recoverable\",\n  EXPIRES_IN_IS_TOO_SMALL: \"The expiresIn is smaller than the predefined minimum value.\",\n  EXPIRES_IN_IS_TOO_LARGE: \"The expiresIn is larger than the predefined maximum value.\",\n  INVALID_REMAINING: \"The remaining count is either too large or too small.\",\n  INVALID_PREFIX_LENGTH: \"The prefix length is either too large or too small.\",\n  INVALID_NAME_LENGTH: \"The name length is either too large or too small.\",\n  METADATA_DISABLED: \"Metadata is disabled.\",\n  RATE_LIMIT_EXCEEDED: \"Rate limit exceeded.\",\n  NO_VALUES_TO_UPDATE: \"No values to update.\",\n  KEY_DISABLED_EXPIRATION: \"Custom key expiration values are disabled.\",\n  INVALID_API_KEY: \"Invalid API key.\",\n  INVALID_USER_ID_FROM_API_KEY: \"The user id from the API key is invalid.\",\n  INVALID_API_KEY_GETTER_RETURN_TYPE: \"API Key getter returned an invalid key type. Expected string.\",\n  SERVER_ONLY_PROPERTY: \"The property you're trying to set can only be set from the server auth instance only.\",\n  FAILED_TO_UPDATE_API_KEY: \"Failed to update API key\",\n  NAME_REQUIRED: \"API Key name is required.\"\n};\nconst API_KEY_TABLE_NAME = \"apikey\";\nconst apiKey = (options) => {\n  const opts = {\n    ...options,\n    apiKeyHeaders: options?.apiKeyHeaders ?? \"x-api-key\",\n    defaultKeyLength: options?.defaultKeyLength || 64,\n    maximumPrefixLength: options?.maximumPrefixLength ?? 32,\n    minimumPrefixLength: options?.minimumPrefixLength ?? 1,\n    maximumNameLength: options?.maximumNameLength ?? 32,\n    minimumNameLength: options?.minimumNameLength ?? 1,\n    enableMetadata: options?.enableMetadata ?? false,\n    disableKeyHashing: options?.disableKeyHashing ?? false,\n    requireName: options?.requireName ?? false,\n    rateLimit: {\n      enabled: options?.rateLimit?.enabled === void 0 ? true : options?.rateLimit?.enabled,\n      timeWindow: options?.rateLimit?.timeWindow ?? 1e3 * 60 * 60 * 24,\n      maxRequests: options?.rateLimit?.maxRequests ?? 10\n    },\n    keyExpiration: {\n      defaultExpiresIn: options?.keyExpiration?.defaultExpiresIn ?? null,\n      disableCustomExpiresTime: options?.keyExpiration?.disableCustomExpiresTime ?? false,\n      maxExpiresIn: options?.keyExpiration?.maxExpiresIn ?? 365,\n      minExpiresIn: options?.keyExpiration?.minExpiresIn ?? 1\n    },\n    startingCharactersConfig: {\n      shouldStore: options?.startingCharactersConfig?.shouldStore ?? true,\n      charactersLength: options?.startingCharactersConfig?.charactersLength ?? 6\n    },\n    disableSessionForAPIKeys: options?.disableSessionForAPIKeys ?? false\n  };\n  const schema = mergeSchema(\n    apiKeySchema({\n      rateLimitMax: opts.rateLimit.maxRequests,\n      timeWindow: opts.rateLimit.timeWindow\n    }),\n    opts.schema\n  );\n  const getter = opts.customAPIKeyGetter || ((ctx) => {\n    if (Array.isArray(opts.apiKeyHeaders)) {\n      for (const header of opts.apiKeyHeaders) {\n        const value = ctx.headers?.get(header);\n        if (value) {\n          return value;\n        }\n      }\n    } else {\n      return ctx.headers?.get(opts.apiKeyHeaders);\n    }\n  });\n  const keyGenerator = opts.customKeyGenerator || (async (options2) => {\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    let apiKey2 = `${options2.prefix || \"\"}`;\n    for (let i = 0; i < options2.length; i++) {\n      const randomIndex = Math.floor(Math.random() * characters.length);\n      apiKey2 += characters[randomIndex];\n    }\n    return apiKey2;\n  });\n  const routes = createApiKeyRoutes({ keyGenerator, opts, schema });\n  return {\n    id: \"api-key\",\n    $ERROR_CODES: ERROR_CODES,\n    hooks: {\n      before: [\n        {\n          matcher: (ctx) => !!getter(ctx) && opts.disableSessionForAPIKeys === false,\n          handler: createAuthMiddleware(async (ctx) => {\n            const key = getter(ctx);\n            if (typeof key !== \"string\") {\n              throw new APIError(\"BAD_REQUEST\", {\n                message: ERROR_CODES.INVALID_API_KEY_GETTER_RETURN_TYPE\n              });\n            }\n            if (key.length < opts.defaultKeyLength) {\n              throw new APIError(\"FORBIDDEN\", {\n                message: ERROR_CODES.INVALID_API_KEY\n              });\n            }\n            if (opts.customAPIKeyValidator) {\n              const isValid = await opts.customAPIKeyValidator({ ctx, key });\n              if (!isValid) {\n                throw new APIError(\"FORBIDDEN\", {\n                  message: ERROR_CODES.INVALID_API_KEY\n                });\n              }\n            }\n            const hashed = opts.disableKeyHashing ? key : await defaultKeyHasher(key);\n            const apiKey2 = await validateApiKey({\n              hashedKey: hashed,\n              ctx,\n              opts,\n              schema\n            });\n            await deleteAllExpiredApiKeys(ctx.context);\n            let user;\n            try {\n              const userResult = await ctx.context.internalAdapter.findUserById(\n                apiKey2.userId\n              );\n              if (!userResult) {\n                throw new APIError(\"UNAUTHORIZED\", {\n                  message: ERROR_CODES.INVALID_USER_ID_FROM_API_KEY\n                });\n              }\n              user = userResult;\n            } catch (error) {\n              throw error;\n            }\n            const session = {\n              user,\n              session: {\n                id: apiKey2.id,\n                token: key,\n                userId: user.id,\n                userAgent: ctx.request?.headers.get(\"user-agent\") ?? null,\n                ipAddress: ctx.request ? getIp(ctx.request, ctx.context.options) : null,\n                createdAt: /* @__PURE__ */ new Date(),\n                updatedAt: /* @__PURE__ */ new Date(),\n                expiresAt: apiKey2.expiresAt || getDate(\n                  ctx.context.options.session?.expiresIn || 60 * 60 * 24 * 7,\n                  // 7 days\n                  \"ms\"\n                )\n              }\n            };\n            ctx.context.session = session;\n            if (ctx.path === \"/get-session\") {\n              return session;\n            } else {\n              return {\n                context: ctx\n              };\n            }\n          })\n        }\n      ]\n    },\n    endpoints: {\n      /**\n       * ### Endpoint\n       *\n       * POST `/api-key/create`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.createApiKey`\n       *\n       * **client:**\n       * `authClient.apiKey.create`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-create)\n       */\n      createApiKey: routes.createApiKey,\n      /**\n       * ### Endpoint\n       *\n       * POST `/api-key/verify`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.verifyApiKey`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-verify)\n       */\n      verifyApiKey: routes.verifyApiKey,\n      /**\n       * ### Endpoint\n       *\n       * GET `/api-key/get`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.getApiKey`\n       *\n       * **client:**\n       * `authClient.apiKey.get`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-get)\n       */\n      getApiKey: routes.getApiKey,\n      /**\n       * ### Endpoint\n       *\n       * POST `/api-key/update`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.updateApiKey`\n       *\n       * **client:**\n       * `authClient.apiKey.update`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-update)\n       */\n      updateApiKey: routes.updateApiKey,\n      /**\n       * ### Endpoint\n       *\n       * POST `/api-key/delete`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.deleteApiKey`\n       *\n       * **client:**\n       * `authClient.apiKey.delete`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-delete)\n       */\n      deleteApiKey: routes.deleteApiKey,\n      /**\n       * ### Endpoint\n       *\n       * GET `/api-key/list`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.listApiKeys`\n       *\n       * **client:**\n       * `authClient.apiKey.list`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-list)\n       */\n      listApiKeys: routes.listApiKeys,\n      /**\n       * ### Endpoint\n       *\n       * POST `/api-key/delete-all-expired-api-keys`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.deleteAllExpiredApiKeys`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/api-key#api-method-api-key-delete-all-expired-api-keys)\n       */\n      deleteAllExpiredApiKeys: routes.deleteAllExpiredApiKeys\n    },\n    schema\n  };\n};\n\nconst oneTimeToken = (options) => {\n  const opts = {\n    storeToken: \"plain\",\n    ...options\n  };\n  async function storeToken(ctx, token) {\n    if (opts.storeToken === \"hashed\") {\n      return await defaultKeyHasher(token);\n    }\n    if (typeof opts.storeToken === \"object\" && \"type\" in opts.storeToken && opts.storeToken.type === \"custom-hasher\") {\n      return await opts.storeToken.hash(token);\n    }\n    return token;\n  }\n  return {\n    id: \"one-time-token\",\n    endpoints: {\n      /**\n       * ### Endpoint\n       *\n       * GET `/one-time-token/generate`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.generateOneTimeToken`\n       *\n       * **client:**\n       * `authClient.oneTimeToken.generate`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/one-time-token#api-method-one-time-token-generate)\n       */\n      generateOneTimeToken: createAuthEndpoint(\n        \"/one-time-token/generate\",\n        {\n          method: \"GET\",\n          use: [sessionMiddleware]\n        },\n        async (c) => {\n          if (opts?.disableClientRequest && c.request) {\n            throw c.error(\"BAD_REQUEST\", {\n              message: \"Client requests are disabled\"\n            });\n          }\n          const session = c.context.session;\n          const token = opts?.generateToken ? await opts.generateToken(session, c) : generateRandomString(32);\n          const expiresAt = new Date(\n            Date.now() + (opts?.expiresIn ?? 3) * 60 * 1e3\n          );\n          const storedToken = await storeToken(c, token);\n          await c.context.internalAdapter.createVerificationValue({\n            value: session.session.token,\n            identifier: `one-time-token:${storedToken}`,\n            expiresAt\n          });\n          return c.json({ token });\n        }\n      ),\n      /**\n       * ### Endpoint\n       *\n       * POST `/one-time-token/verify`\n       *\n       * ### API Methods\n       *\n       * **server:**\n       * `auth.api.verifyOneTimeToken`\n       *\n       * **client:**\n       * `authClient.oneTimeToken.verify`\n       *\n       * @see [Read our docs to learn more.](https://better-auth.com/docs/plugins/one-time-token#api-method-one-time-token-verify)\n       */\n      verifyOneTimeToken: createAuthEndpoint(\n        \"/one-time-token/verify\",\n        {\n          method: \"POST\",\n          body: z.object({\n            token: z.string().meta({\n              description: 'The token to verify. Eg: \"some-token\"'\n            })\n          })\n        },\n        async (c) => {\n          const { token } = c.body;\n          const storedToken = await storeToken(c, token);\n          const verificationValue = await c.context.internalAdapter.findVerificationValue(\n            `one-time-token:${storedToken}`\n          );\n          if (!verificationValue) {\n            throw c.error(\"BAD_REQUEST\", {\n              message: \"Invalid token\"\n            });\n          }\n          if (verificationValue.expiresAt < /* @__PURE__ */ new Date()) {\n            await c.context.internalAdapter.deleteVerificationValue(\n              verificationValue.id\n            );\n            throw c.error(\"BAD_REQUEST\", {\n              message: \"Token expired\"\n            });\n          }\n          await c.context.internalAdapter.deleteVerificationValue(\n            verificationValue.id\n          );\n          const session = await c.context.internalAdapter.findSession(\n            verificationValue.value\n          );\n          if (!session) {\n            throw c.error(\"BAD_REQUEST\", {\n              message: \"Session not found\"\n            });\n          }\n          return c.json(session);\n        }\n      )\n    }\n  };\n};\n\nexport { API_KEY_TABLE_NAME as A, ERROR_CODES as E, apiKey as a, defaultKeyHasher as d, oneTimeToken as o };\n"],"names":[],"mappings":"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OAAO;wBACL,aAAa;wBACb,SAAS;4BACP,oBAAoB;gCAClB,QAAQ;oCACN,MAAM;oCACN,YAAY;wCACV,IAAI;4CACF,MAAM;4CACN,aAAa;wCACf;wCACA,MAAM;4CACJ,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,OAAO;4CACL,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,QAAQ;4CACN,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,QAAQ;4CACN,MAAM;4CACN,aAAa;wCACf;wCACA,gBAAgB;4CACd,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,cAAc;4CACZ,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,cAAc;4CACZ,MAAM;4CACN,QAAQ;4CACR,UAAU;4CACV,aAAa;wCACf;wCACA,SAAS;4CACP,MAAM;4CACN,aAAa;4CACb,SAAS;wCACX;wCACA,kBAAkB;4CAChB,MAAM;4CACN,aAAa;wCACf;wCACA,qBAAqB;4CACnB,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,cAAc;4CACZ,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,cAAc;4CACZ,MAAM;4CACN,aAAa;wCACf;wCACA,WAAW;4CACT,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;wCACA,aAAa;4CACX,MAAM;4CACN,QAAQ;4CACR,UAAU;4CACV,aAAa;wCACf;wCACA,WAAW;4CACT,MAAM;4CACN,QAAQ;4CACR,UAAU;4CACV,aAAa;wCACf;wCACA,WAAW;4CACT,MAAM;4CACN,QAAQ;4CACR,aAAa;wCACf;wCACA,WAAW;4CACT,MAAM;4CACN,QAAQ;4CACR,aAAa;wCACf;wCACA,UAAU;4CACR,MAAM;4CACN,UAAU;4CACV,sBAAsB;4CACtB,aAAa;wCACf;wCACA,aAAa;4CACX,MAAM;4CACN,UAAU;4CACV,aAAa;wCACf;oCACF;oCACA,UAAU;wCACR;wCACA;wCACA;wCACA;wCACA;wCACA;wCACA;qCACD;gCACH;4BACF;wBACF;oBACF;gBACF;YACF;QACF;IACF,GACA,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","ignoreList":[0],"debugId":null}}]
}